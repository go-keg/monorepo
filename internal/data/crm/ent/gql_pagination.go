// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contact"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
	"github.com/go-keg/monorepo/internal/data/crm/ent/payment"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodesField      = "nodes"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// ContactEdge is the edge representation of Contact.
type ContactEdge struct {
	Node   *Contact `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ContactConnection is the connection containing edges to Contact.
type ContactConnection struct {
	Edges      []*ContactEdge `json:"edges"`
	Nodes      []*Contact     `json:"nodes"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ContactConnection) build(nodes []*Contact, pager *contactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Contact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Contact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Contact {
			return nodes[i]
		}
	}
	c.Edges = make([]*ContactEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ContactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ContactPaginateOption enables pagination customization.
type ContactPaginateOption func(*contactPager) error

// WithContactOrder configures pagination ordering.
func WithContactOrder(order *ContactOrder) ContactPaginateOption {
	if order == nil {
		order = DefaultContactOrder
	}
	o := *order
	return func(pager *contactPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultContactOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithContactFilter configures pagination filter.
func WithContactFilter(filter func(*ContactQuery) (*ContactQuery, error)) ContactPaginateOption {
	return func(pager *contactPager) error {
		if filter == nil {
			return errors.New("ContactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type contactPager struct {
	reverse bool
	order   *ContactOrder
	filter  func(*ContactQuery) (*ContactQuery, error)
}

func newContactPager(opts []ContactPaginateOption, reverse bool) (*contactPager, error) {
	pager := &contactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultContactOrder
	}
	return pager, nil
}

func (p *contactPager) applyFilter(query *ContactQuery) (*ContactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *contactPager) toCursor(c *Contact) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *contactPager) applyCursors(query *ContactQuery, after, before *Cursor) (*ContactQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultContactOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *contactPager) applyOrder(query *ContactQuery) *ContactQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultContactOrder.Field {
		query = query.Order(DefaultContactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *contactPager) orderExpr(query *ContactQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultContactOrder.Field {
			b.Comma().Ident(DefaultContactOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Contact.
func (c *ContactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ContactPaginateOption,
) (*ContactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newContactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ContactConnection{Edges: []*ContactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ContactOrderFieldCreatedAt orders Contact by created_at.
	ContactOrderFieldCreatedAt = &ContactOrderField{
		Value: func(c *Contact) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: contact.FieldCreatedAt,
		toTerm: contact.ByCreatedAt,
		toCursor: func(c *Contact) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// ContactOrderFieldUpdatedAt orders Contact by updated_at.
	ContactOrderFieldUpdatedAt = &ContactOrderField{
		Value: func(c *Contact) (ent.Value, error) {
			return c.UpdatedAt, nil
		},
		column: contact.FieldUpdatedAt,
		toTerm: contact.ByUpdatedAt,
		toCursor: func(c *Contact) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ContactOrderField) String() string {
	var str string
	switch f.column {
	case ContactOrderFieldCreatedAt.column:
		str = "createdAt"
	case ContactOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ContactOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ContactOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ContactOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *ContactOrderFieldCreatedAt
	case "updatedAt":
		*f = *ContactOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid ContactOrderField", str)
	}
	return nil
}

// ContactOrderField defines the ordering field of Contact.
type ContactOrderField struct {
	// Value extracts the ordering value from the given Contact.
	Value    func(*Contact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) contact.OrderOption
	toCursor func(*Contact) Cursor
}

// ContactOrder defines the ordering of Contact.
type ContactOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ContactOrderField `json:"field"`
}

// DefaultContactOrder is the default ordering of Contact.
var DefaultContactOrder = &ContactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ContactOrderField{
		Value: func(c *Contact) (ent.Value, error) {
			return c.ID, nil
		},
		column: contact.FieldID,
		toTerm: contact.ByID,
		toCursor: func(c *Contact) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Contact into ContactEdge.
func (c *Contact) ToEdge(order *ContactOrder) *ContactEdge {
	if order == nil {
		order = DefaultContactOrder
	}
	return &ContactEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ContractEdge is the edge representation of Contract.
type ContractEdge struct {
	Node   *Contract `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ContractConnection is the connection containing edges to Contract.
type ContractConnection struct {
	Edges      []*ContractEdge `json:"edges"`
	Nodes      []*Contract     `json:"nodes"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ContractConnection) build(nodes []*Contract, pager *contractPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Contract
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Contract {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Contract {
			return nodes[i]
		}
	}
	c.Edges = make([]*ContractEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ContractEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ContractPaginateOption enables pagination customization.
type ContractPaginateOption func(*contractPager) error

// WithContractOrder configures pagination ordering.
func WithContractOrder(order *ContractOrder) ContractPaginateOption {
	if order == nil {
		order = DefaultContractOrder
	}
	o := *order
	return func(pager *contractPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultContractOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithContractFilter configures pagination filter.
func WithContractFilter(filter func(*ContractQuery) (*ContractQuery, error)) ContractPaginateOption {
	return func(pager *contractPager) error {
		if filter == nil {
			return errors.New("ContractQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type contractPager struct {
	reverse bool
	order   *ContractOrder
	filter  func(*ContractQuery) (*ContractQuery, error)
}

func newContractPager(opts []ContractPaginateOption, reverse bool) (*contractPager, error) {
	pager := &contractPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultContractOrder
	}
	return pager, nil
}

func (p *contractPager) applyFilter(query *ContractQuery) (*ContractQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *contractPager) toCursor(c *Contract) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *contractPager) applyCursors(query *ContractQuery, after, before *Cursor) (*ContractQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultContractOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *contractPager) applyOrder(query *ContractQuery) *ContractQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultContractOrder.Field {
		query = query.Order(DefaultContractOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *contractPager) orderExpr(query *ContractQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultContractOrder.Field {
			b.Comma().Ident(DefaultContractOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Contract.
func (c *ContractQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ContractPaginateOption,
) (*ContractConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newContractPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ContractConnection{Edges: []*ContractEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// ContractOrderFieldCreatedAt orders Contract by created_at.
	ContractOrderFieldCreatedAt = &ContractOrderField{
		Value: func(c *Contract) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: contract.FieldCreatedAt,
		toTerm: contract.ByCreatedAt,
		toCursor: func(c *Contract) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// ContractOrderFieldUpdatedAt orders Contract by updated_at.
	ContractOrderFieldUpdatedAt = &ContractOrderField{
		Value: func(c *Contract) (ent.Value, error) {
			return c.UpdatedAt, nil
		},
		column: contract.FieldUpdatedAt,
		toTerm: contract.ByUpdatedAt,
		toCursor: func(c *Contract) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ContractOrderField) String() string {
	var str string
	switch f.column {
	case ContractOrderFieldCreatedAt.column:
		str = "createdAt"
	case ContractOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ContractOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ContractOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ContractOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *ContractOrderFieldCreatedAt
	case "updatedAt":
		*f = *ContractOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid ContractOrderField", str)
	}
	return nil
}

// ContractOrderField defines the ordering field of Contract.
type ContractOrderField struct {
	// Value extracts the ordering value from the given Contract.
	Value    func(*Contract) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) contract.OrderOption
	toCursor func(*Contract) Cursor
}

// ContractOrder defines the ordering of Contract.
type ContractOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ContractOrderField `json:"field"`
}

// DefaultContractOrder is the default ordering of Contract.
var DefaultContractOrder = &ContractOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ContractOrderField{
		Value: func(c *Contract) (ent.Value, error) {
			return c.ID, nil
		},
		column: contract.FieldID,
		toTerm: contract.ByID,
		toCursor: func(c *Contract) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Contract into ContractEdge.
func (c *Contract) ToEdge(order *ContractOrder) *ContractEdge {
	if order == nil {
		order = DefaultContractOrder
	}
	return &ContractEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// CustomerEdge is the edge representation of Customer.
type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// CustomerConnection is the connection containing edges to Customer.
type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges"`
	Nodes      []*Customer     `json:"nodes"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *CustomerConnection) build(nodes []*Customer, pager *customerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Customer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Customer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Customer {
			return nodes[i]
		}
	}
	c.Edges = make([]*CustomerEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CustomerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CustomerPaginateOption enables pagination customization.
type CustomerPaginateOption func(*customerPager) error

// WithCustomerOrder configures pagination ordering.
func WithCustomerOrder(order *CustomerOrder) CustomerPaginateOption {
	if order == nil {
		order = DefaultCustomerOrder
	}
	o := *order
	return func(pager *customerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCustomerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCustomerFilter configures pagination filter.
func WithCustomerFilter(filter func(*CustomerQuery) (*CustomerQuery, error)) CustomerPaginateOption {
	return func(pager *customerPager) error {
		if filter == nil {
			return errors.New("CustomerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type customerPager struct {
	reverse bool
	order   *CustomerOrder
	filter  func(*CustomerQuery) (*CustomerQuery, error)
}

func newCustomerPager(opts []CustomerPaginateOption, reverse bool) (*customerPager, error) {
	pager := &customerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCustomerOrder
	}
	return pager, nil
}

func (p *customerPager) applyFilter(query *CustomerQuery) (*CustomerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *customerPager) toCursor(c *Customer) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *customerPager) applyCursors(query *CustomerQuery, after, before *Cursor) (*CustomerQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCustomerOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *customerPager) applyOrder(query *CustomerQuery) *CustomerQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCustomerOrder.Field {
		query = query.Order(DefaultCustomerOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *customerPager) orderExpr(query *CustomerQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCustomerOrder.Field {
			b.Comma().Ident(DefaultCustomerOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Customer.
func (c *CustomerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CustomerPaginateOption,
) (*CustomerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCustomerPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CustomerConnection{Edges: []*CustomerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := c.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := c.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CustomerOrderFieldCreatedAt orders Customer by created_at.
	CustomerOrderFieldCreatedAt = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.CreatedAt, nil
		},
		column: customer.FieldCreatedAt,
		toTerm: customer.ByCreatedAt,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
	// CustomerOrderFieldUpdatedAt orders Customer by updated_at.
	CustomerOrderFieldUpdatedAt = &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.UpdatedAt, nil
		},
		column: customer.FieldUpdatedAt,
		toTerm: customer.ByUpdatedAt,
		toCursor: func(c *Customer) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CustomerOrderField) String() string {
	var str string
	switch f.column {
	case CustomerOrderFieldCreatedAt.column:
		str = "createdAt"
	case CustomerOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CustomerOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CustomerOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *CustomerOrderFieldCreatedAt
	case "updatedAt":
		*f = *CustomerOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid CustomerOrderField", str)
	}
	return nil
}

// CustomerOrderField defines the ordering field of Customer.
type CustomerOrderField struct {
	// Value extracts the ordering value from the given Customer.
	Value    func(*Customer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) customer.OrderOption
	toCursor func(*Customer) Cursor
}

// CustomerOrder defines the ordering of Customer.
type CustomerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CustomerOrderField `json:"field"`
}

// DefaultCustomerOrder is the default ordering of Customer.
var DefaultCustomerOrder = &CustomerOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CustomerOrderField{
		Value: func(c *Customer) (ent.Value, error) {
			return c.ID, nil
		},
		column: customer.FieldID,
		toTerm: customer.ByID,
		toCursor: func(c *Customer) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Customer into CustomerEdge.
func (c *Customer) ToEdge(order *CustomerOrder) *CustomerEdge {
	if order == nil {
		order = DefaultCustomerOrder
	}
	return &CustomerEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// FollowUpEdge is the edge representation of FollowUp.
type FollowUpEdge struct {
	Node   *FollowUp `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// FollowUpConnection is the connection containing edges to FollowUp.
type FollowUpConnection struct {
	Edges      []*FollowUpEdge `json:"edges"`
	Nodes      []*FollowUp     `json:"nodes"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *FollowUpConnection) build(nodes []*FollowUp, pager *followupPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *FollowUp
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *FollowUp {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *FollowUp {
			return nodes[i]
		}
	}
	c.Edges = make([]*FollowUpEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FollowUpEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FollowUpPaginateOption enables pagination customization.
type FollowUpPaginateOption func(*followupPager) error

// WithFollowUpOrder configures pagination ordering.
func WithFollowUpOrder(order *FollowUpOrder) FollowUpPaginateOption {
	if order == nil {
		order = DefaultFollowUpOrder
	}
	o := *order
	return func(pager *followupPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFollowUpOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFollowUpFilter configures pagination filter.
func WithFollowUpFilter(filter func(*FollowUpQuery) (*FollowUpQuery, error)) FollowUpPaginateOption {
	return func(pager *followupPager) error {
		if filter == nil {
			return errors.New("FollowUpQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type followupPager struct {
	reverse bool
	order   *FollowUpOrder
	filter  func(*FollowUpQuery) (*FollowUpQuery, error)
}

func newFollowUpPager(opts []FollowUpPaginateOption, reverse bool) (*followupPager, error) {
	pager := &followupPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFollowUpOrder
	}
	return pager, nil
}

func (p *followupPager) applyFilter(query *FollowUpQuery) (*FollowUpQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *followupPager) toCursor(fu *FollowUp) Cursor {
	return p.order.Field.toCursor(fu)
}

func (p *followupPager) applyCursors(query *FollowUpQuery, after, before *Cursor) (*FollowUpQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFollowUpOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *followupPager) applyOrder(query *FollowUpQuery) *FollowUpQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFollowUpOrder.Field {
		query = query.Order(DefaultFollowUpOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *followupPager) orderExpr(query *FollowUpQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFollowUpOrder.Field {
			b.Comma().Ident(DefaultFollowUpOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to FollowUp.
func (fu *FollowUpQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FollowUpPaginateOption,
) (*FollowUpConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFollowUpPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if fu, err = pager.applyFilter(fu); err != nil {
		return nil, err
	}
	conn := &FollowUpConnection{Edges: []*FollowUpEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := fu.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if fu, err = pager.applyCursors(fu, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		fu.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := fu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := fu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	fu = pager.applyOrder(fu)
	nodes, err := fu.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FollowUpOrderFieldCreatedAt orders FollowUp by created_at.
	FollowUpOrderFieldCreatedAt = &FollowUpOrderField{
		Value: func(fu *FollowUp) (ent.Value, error) {
			return fu.CreatedAt, nil
		},
		column: followup.FieldCreatedAt,
		toTerm: followup.ByCreatedAt,
		toCursor: func(fu *FollowUp) Cursor {
			return Cursor{
				ID:    fu.ID,
				Value: fu.CreatedAt,
			}
		},
	}
	// FollowUpOrderFieldUpdatedAt orders FollowUp by updated_at.
	FollowUpOrderFieldUpdatedAt = &FollowUpOrderField{
		Value: func(fu *FollowUp) (ent.Value, error) {
			return fu.UpdatedAt, nil
		},
		column: followup.FieldUpdatedAt,
		toTerm: followup.ByUpdatedAt,
		toCursor: func(fu *FollowUp) Cursor {
			return Cursor{
				ID:    fu.ID,
				Value: fu.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FollowUpOrderField) String() string {
	var str string
	switch f.column {
	case FollowUpOrderFieldCreatedAt.column:
		str = "createdAt"
	case FollowUpOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FollowUpOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FollowUpOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FollowUpOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *FollowUpOrderFieldCreatedAt
	case "updatedAt":
		*f = *FollowUpOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid FollowUpOrderField", str)
	}
	return nil
}

// FollowUpOrderField defines the ordering field of FollowUp.
type FollowUpOrderField struct {
	// Value extracts the ordering value from the given FollowUp.
	Value    func(*FollowUp) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) followup.OrderOption
	toCursor func(*FollowUp) Cursor
}

// FollowUpOrder defines the ordering of FollowUp.
type FollowUpOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *FollowUpOrderField `json:"field"`
}

// DefaultFollowUpOrder is the default ordering of FollowUp.
var DefaultFollowUpOrder = &FollowUpOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FollowUpOrderField{
		Value: func(fu *FollowUp) (ent.Value, error) {
			return fu.ID, nil
		},
		column: followup.FieldID,
		toTerm: followup.ByID,
		toCursor: func(fu *FollowUp) Cursor {
			return Cursor{ID: fu.ID}
		},
	},
}

// ToEdge converts FollowUp into FollowUpEdge.
func (fu *FollowUp) ToEdge(order *FollowUpOrder) *FollowUpEdge {
	if order == nil {
		order = DefaultFollowUpOrder
	}
	return &FollowUpEdge{
		Node:   fu,
		Cursor: order.Field.toCursor(fu),
	}
}

// PaymentEdge is the edge representation of Payment.
type PaymentEdge struct {
	Node   *Payment `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// PaymentConnection is the connection containing edges to Payment.
type PaymentConnection struct {
	Edges      []*PaymentEdge `json:"edges"`
	Nodes      []*Payment     `json:"nodes"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *PaymentConnection) build(nodes []*Payment, pager *paymentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Payment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Payment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Payment {
			return nodes[i]
		}
	}
	c.Edges = make([]*PaymentEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PaymentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PaymentPaginateOption enables pagination customization.
type PaymentPaginateOption func(*paymentPager) error

// WithPaymentOrder configures pagination ordering.
func WithPaymentOrder(order *PaymentOrder) PaymentPaginateOption {
	if order == nil {
		order = DefaultPaymentOrder
	}
	o := *order
	return func(pager *paymentPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPaymentOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPaymentFilter configures pagination filter.
func WithPaymentFilter(filter func(*PaymentQuery) (*PaymentQuery, error)) PaymentPaginateOption {
	return func(pager *paymentPager) error {
		if filter == nil {
			return errors.New("PaymentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type paymentPager struct {
	reverse bool
	order   *PaymentOrder
	filter  func(*PaymentQuery) (*PaymentQuery, error)
}

func newPaymentPager(opts []PaymentPaginateOption, reverse bool) (*paymentPager, error) {
	pager := &paymentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPaymentOrder
	}
	return pager, nil
}

func (p *paymentPager) applyFilter(query *PaymentQuery) (*PaymentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *paymentPager) toCursor(pa *Payment) Cursor {
	return p.order.Field.toCursor(pa)
}

func (p *paymentPager) applyCursors(query *PaymentQuery, after, before *Cursor) (*PaymentQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPaymentOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *paymentPager) applyOrder(query *PaymentQuery) *PaymentQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPaymentOrder.Field {
		query = query.Order(DefaultPaymentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *paymentPager) orderExpr(query *PaymentQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPaymentOrder.Field {
			b.Comma().Ident(DefaultPaymentOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Payment.
func (pa *PaymentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PaymentPaginateOption,
) (*PaymentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPaymentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pa, err = pager.applyFilter(pa); err != nil {
		return nil, err
	}
	conn := &PaymentConnection{Edges: []*PaymentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pa, err = pager.applyCursors(pa, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := pa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	pa = pager.applyOrder(pa)
	nodes, err := pa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PaymentOrderFieldCreatedAt orders Payment by created_at.
	PaymentOrderFieldCreatedAt = &PaymentOrderField{
		Value: func(pa *Payment) (ent.Value, error) {
			return pa.CreatedAt, nil
		},
		column: payment.FieldCreatedAt,
		toTerm: payment.ByCreatedAt,
		toCursor: func(pa *Payment) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.CreatedAt,
			}
		},
	}
	// PaymentOrderFieldUpdatedAt orders Payment by updated_at.
	PaymentOrderFieldUpdatedAt = &PaymentOrderField{
		Value: func(pa *Payment) (ent.Value, error) {
			return pa.UpdatedAt, nil
		},
		column: payment.FieldUpdatedAt,
		toTerm: payment.ByUpdatedAt,
		toCursor: func(pa *Payment) Cursor {
			return Cursor{
				ID:    pa.ID,
				Value: pa.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PaymentOrderField) String() string {
	var str string
	switch f.column {
	case PaymentOrderFieldCreatedAt.column:
		str = "createdAt"
	case PaymentOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PaymentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PaymentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PaymentOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *PaymentOrderFieldCreatedAt
	case "updatedAt":
		*f = *PaymentOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid PaymentOrderField", str)
	}
	return nil
}

// PaymentOrderField defines the ordering field of Payment.
type PaymentOrderField struct {
	// Value extracts the ordering value from the given Payment.
	Value    func(*Payment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) payment.OrderOption
	toCursor func(*Payment) Cursor
}

// PaymentOrder defines the ordering of Payment.
type PaymentOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *PaymentOrderField `json:"field"`
}

// DefaultPaymentOrder is the default ordering of Payment.
var DefaultPaymentOrder = &PaymentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PaymentOrderField{
		Value: func(pa *Payment) (ent.Value, error) {
			return pa.ID, nil
		},
		column: payment.FieldID,
		toTerm: payment.ByID,
		toCursor: func(pa *Payment) Cursor {
			return Cursor{ID: pa.ID}
		},
	},
}

// ToEdge converts Payment into PaymentEdge.
func (pa *Payment) ToEdge(order *PaymentOrder) *PaymentEdge {
	if order == nil {
		order = DefaultPaymentOrder
	}
	return &PaymentEdge{
		Node:   pa,
		Cursor: order.Field.toCursor(pa),
	}
}
