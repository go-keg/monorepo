// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/permission"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
)

// TenantRoleUpdate is the builder for updating TenantRole entities.
type TenantRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantRoleUpdate builder.
func (tru *TenantRoleUpdate) Where(ps ...predicate.TenantRole) *TenantRoleUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetUpdatedAt sets the "updated_at" field.
func (tru *TenantRoleUpdate) SetUpdatedAt(t time.Time) *TenantRoleUpdate {
	tru.mutation.SetUpdatedAt(t)
	return tru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tru *TenantRoleUpdate) ClearUpdatedAt() *TenantRoleUpdate {
	tru.mutation.ClearUpdatedAt()
	return tru
}

// SetName sets the "name" field.
func (tru *TenantRoleUpdate) SetName(s string) *TenantRoleUpdate {
	tru.mutation.SetName(s)
	return tru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tru *TenantRoleUpdate) SetNillableName(s *string) *TenantRoleUpdate {
	if s != nil {
		tru.SetName(*s)
	}
	return tru
}

// SetDescription sets the "description" field.
func (tru *TenantRoleUpdate) SetDescription(s string) *TenantRoleUpdate {
	tru.mutation.SetDescription(s)
	return tru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tru *TenantRoleUpdate) SetNillableDescription(s *string) *TenantRoleUpdate {
	if s != nil {
		tru.SetDescription(*s)
	}
	return tru
}

// ClearDescription clears the value of the "description" field.
func (tru *TenantRoleUpdate) ClearDescription() *TenantRoleUpdate {
	tru.mutation.ClearDescription()
	return tru
}

// SetSort sets the "sort" field.
func (tru *TenantRoleUpdate) SetSort(i int) *TenantRoleUpdate {
	tru.mutation.ResetSort()
	tru.mutation.SetSort(i)
	return tru
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (tru *TenantRoleUpdate) SetNillableSort(i *int) *TenantRoleUpdate {
	if i != nil {
		tru.SetSort(*i)
	}
	return tru
}

// AddSort adds i to the "sort" field.
func (tru *TenantRoleUpdate) AddSort(i int) *TenantRoleUpdate {
	tru.mutation.AddSort(i)
	return tru
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (tru *TenantRoleUpdate) AddPermissionIDs(ids ...int) *TenantRoleUpdate {
	tru.mutation.AddPermissionIDs(ids...)
	return tru
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (tru *TenantRoleUpdate) AddPermissions(p ...*Permission) *TenantRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tru.AddPermissionIDs(ids...)
}

// AddTenantUserIDs adds the "tenant_users" edge to the TenantUser entity by IDs.
func (tru *TenantRoleUpdate) AddTenantUserIDs(ids ...int) *TenantRoleUpdate {
	tru.mutation.AddTenantUserIDs(ids...)
	return tru
}

// AddTenantUsers adds the "tenant_users" edges to the TenantUser entity.
func (tru *TenantRoleUpdate) AddTenantUsers(t ...*TenantUser) *TenantRoleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.AddTenantUserIDs(ids...)
}

// Mutation returns the TenantRoleMutation object of the builder.
func (tru *TenantRoleUpdate) Mutation() *TenantRoleMutation {
	return tru.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (tru *TenantRoleUpdate) ClearPermissions() *TenantRoleUpdate {
	tru.mutation.ClearPermissions()
	return tru
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (tru *TenantRoleUpdate) RemovePermissionIDs(ids ...int) *TenantRoleUpdate {
	tru.mutation.RemovePermissionIDs(ids...)
	return tru
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (tru *TenantRoleUpdate) RemovePermissions(p ...*Permission) *TenantRoleUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tru.RemovePermissionIDs(ids...)
}

// ClearTenantUsers clears all "tenant_users" edges to the TenantUser entity.
func (tru *TenantRoleUpdate) ClearTenantUsers() *TenantRoleUpdate {
	tru.mutation.ClearTenantUsers()
	return tru
}

// RemoveTenantUserIDs removes the "tenant_users" edge to TenantUser entities by IDs.
func (tru *TenantRoleUpdate) RemoveTenantUserIDs(ids ...int) *TenantRoleUpdate {
	tru.mutation.RemoveTenantUserIDs(ids...)
	return tru
}

// RemoveTenantUsers removes "tenant_users" edges to TenantUser entities.
func (tru *TenantRoleUpdate) RemoveTenantUsers(t ...*TenantUser) *TenantRoleUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tru.RemoveTenantUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TenantRoleUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TenantRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TenantRoleUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TenantRoleUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TenantRoleUpdate) defaults() {
	if _, ok := tru.mutation.UpdatedAt(); !ok && !tru.mutation.UpdatedAtCleared() {
		v := tenantrole.UpdateDefaultUpdatedAt()
		tru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TenantRoleUpdate) check() error {
	if v, ok := tru.mutation.Name(); ok {
		if err := tenantrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TenantRole.name": %w`, err)}
		}
	}
	if tru.mutation.TenantCleared() && len(tru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenantRole.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tru *TenantRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantRoleUpdate {
	tru.modifiers = append(tru.modifiers, modifiers...)
	return tru
}

func (tru *TenantRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantrole.Table, tenantrole.Columns, sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tru.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantrole.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tru.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if tru.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tru.mutation.Name(); ok {
		_spec.SetField(tenantrole.FieldName, field.TypeString, value)
	}
	if value, ok := tru.mutation.Description(); ok {
		_spec.SetField(tenantrole.FieldDescription, field.TypeString, value)
	}
	if tru.mutation.DescriptionCleared() {
		_spec.ClearField(tenantrole.FieldDescription, field.TypeString)
	}
	if value, ok := tru.mutation.Sort(); ok {
		_spec.SetField(tenantrole.FieldSort, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedSort(); ok {
		_spec.AddField(tenantrole.FieldSort, field.TypeInt, value)
	}
	if tru.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !tru.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.RemovedTenantUsersIDs(); len(nodes) > 0 && !tru.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TenantUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TenantRoleUpdateOne is the builder for updating a single TenantRole entity.
type TenantRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (truo *TenantRoleUpdateOne) SetUpdatedAt(t time.Time) *TenantRoleUpdateOne {
	truo.mutation.SetUpdatedAt(t)
	return truo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (truo *TenantRoleUpdateOne) ClearUpdatedAt() *TenantRoleUpdateOne {
	truo.mutation.ClearUpdatedAt()
	return truo
}

// SetName sets the "name" field.
func (truo *TenantRoleUpdateOne) SetName(s string) *TenantRoleUpdateOne {
	truo.mutation.SetName(s)
	return truo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (truo *TenantRoleUpdateOne) SetNillableName(s *string) *TenantRoleUpdateOne {
	if s != nil {
		truo.SetName(*s)
	}
	return truo
}

// SetDescription sets the "description" field.
func (truo *TenantRoleUpdateOne) SetDescription(s string) *TenantRoleUpdateOne {
	truo.mutation.SetDescription(s)
	return truo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (truo *TenantRoleUpdateOne) SetNillableDescription(s *string) *TenantRoleUpdateOne {
	if s != nil {
		truo.SetDescription(*s)
	}
	return truo
}

// ClearDescription clears the value of the "description" field.
func (truo *TenantRoleUpdateOne) ClearDescription() *TenantRoleUpdateOne {
	truo.mutation.ClearDescription()
	return truo
}

// SetSort sets the "sort" field.
func (truo *TenantRoleUpdateOne) SetSort(i int) *TenantRoleUpdateOne {
	truo.mutation.ResetSort()
	truo.mutation.SetSort(i)
	return truo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (truo *TenantRoleUpdateOne) SetNillableSort(i *int) *TenantRoleUpdateOne {
	if i != nil {
		truo.SetSort(*i)
	}
	return truo
}

// AddSort adds i to the "sort" field.
func (truo *TenantRoleUpdateOne) AddSort(i int) *TenantRoleUpdateOne {
	truo.mutation.AddSort(i)
	return truo
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (truo *TenantRoleUpdateOne) AddPermissionIDs(ids ...int) *TenantRoleUpdateOne {
	truo.mutation.AddPermissionIDs(ids...)
	return truo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (truo *TenantRoleUpdateOne) AddPermissions(p ...*Permission) *TenantRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return truo.AddPermissionIDs(ids...)
}

// AddTenantUserIDs adds the "tenant_users" edge to the TenantUser entity by IDs.
func (truo *TenantRoleUpdateOne) AddTenantUserIDs(ids ...int) *TenantRoleUpdateOne {
	truo.mutation.AddTenantUserIDs(ids...)
	return truo
}

// AddTenantUsers adds the "tenant_users" edges to the TenantUser entity.
func (truo *TenantRoleUpdateOne) AddTenantUsers(t ...*TenantUser) *TenantRoleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.AddTenantUserIDs(ids...)
}

// Mutation returns the TenantRoleMutation object of the builder.
func (truo *TenantRoleUpdateOne) Mutation() *TenantRoleMutation {
	return truo.mutation
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (truo *TenantRoleUpdateOne) ClearPermissions() *TenantRoleUpdateOne {
	truo.mutation.ClearPermissions()
	return truo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (truo *TenantRoleUpdateOne) RemovePermissionIDs(ids ...int) *TenantRoleUpdateOne {
	truo.mutation.RemovePermissionIDs(ids...)
	return truo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (truo *TenantRoleUpdateOne) RemovePermissions(p ...*Permission) *TenantRoleUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return truo.RemovePermissionIDs(ids...)
}

// ClearTenantUsers clears all "tenant_users" edges to the TenantUser entity.
func (truo *TenantRoleUpdateOne) ClearTenantUsers() *TenantRoleUpdateOne {
	truo.mutation.ClearTenantUsers()
	return truo
}

// RemoveTenantUserIDs removes the "tenant_users" edge to TenantUser entities by IDs.
func (truo *TenantRoleUpdateOne) RemoveTenantUserIDs(ids ...int) *TenantRoleUpdateOne {
	truo.mutation.RemoveTenantUserIDs(ids...)
	return truo
}

// RemoveTenantUsers removes "tenant_users" edges to TenantUser entities.
func (truo *TenantRoleUpdateOne) RemoveTenantUsers(t ...*TenantUser) *TenantRoleUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return truo.RemoveTenantUserIDs(ids...)
}

// Where appends a list predicates to the TenantRoleUpdate builder.
func (truo *TenantRoleUpdateOne) Where(ps ...predicate.TenantRole) *TenantRoleUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TenantRoleUpdateOne) Select(field string, fields ...string) *TenantRoleUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TenantRole entity.
func (truo *TenantRoleUpdateOne) Save(ctx context.Context) (*TenantRole, error) {
	truo.defaults()
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TenantRoleUpdateOne) SaveX(ctx context.Context) *TenantRole {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TenantRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TenantRoleUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TenantRoleUpdateOne) defaults() {
	if _, ok := truo.mutation.UpdatedAt(); !ok && !truo.mutation.UpdatedAtCleared() {
		v := tenantrole.UpdateDefaultUpdatedAt()
		truo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TenantRoleUpdateOne) check() error {
	if v, ok := truo.mutation.Name(); ok {
		if err := tenantrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TenantRole.name": %w`, err)}
		}
	}
	if truo.mutation.TenantCleared() && len(truo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenantRole.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (truo *TenantRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantRoleUpdateOne {
	truo.modifiers = append(truo.modifiers, modifiers...)
	return truo
}

func (truo *TenantRoleUpdateOne) sqlSave(ctx context.Context) (_node *TenantRole, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantrole.Table, tenantrole.Columns, sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantrole.FieldID)
		for _, f := range fields {
			if !tenantrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if truo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenantrole.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := truo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if truo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenantrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := truo.mutation.Name(); ok {
		_spec.SetField(tenantrole.FieldName, field.TypeString, value)
	}
	if value, ok := truo.mutation.Description(); ok {
		_spec.SetField(tenantrole.FieldDescription, field.TypeString, value)
	}
	if truo.mutation.DescriptionCleared() {
		_spec.ClearField(tenantrole.FieldDescription, field.TypeString)
	}
	if value, ok := truo.mutation.Sort(); ok {
		_spec.SetField(tenantrole.FieldSort, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedSort(); ok {
		_spec.AddField(tenantrole.FieldSort, field.TypeInt, value)
	}
	if truo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !truo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.RemovedTenantUsersIDs(); len(nodes) > 0 && !truo.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TenantUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(truo.modifiers...)
	_node = &TenantRole{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
