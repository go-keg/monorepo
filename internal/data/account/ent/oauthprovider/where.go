// Code generated by ent, DO NOT EDIT.

package oauthprovider

import (
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldID, id))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldProvider, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldName, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldClientSecret, v))
}

// AuthURL applies equality check predicate on the "auth_url" field. It's identical to AuthURLEQ.
func AuthURL(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldAuthURL, v))
}

// TokenURL applies equality check predicate on the "token_url" field. It's identical to TokenURLEQ.
func TokenURL(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldTokenURL, v))
}

// UserInfoURL applies equality check predicate on the "user_info_url" field. It's identical to UserInfoURLEQ.
func UserInfoURL(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldUserInfoURL, v))
}

// RedirectURI applies equality check predicate on the "redirect_uri" field. It's identical to RedirectURIEQ.
func RedirectURI(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldRedirectURI, v))
}

// Scopes applies equality check predicate on the "scopes" field. It's identical to ScopesEQ.
func Scopes(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldScopes, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldEnabled, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldProvider, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldName, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldClientSecret, v))
}

// AuthURLEQ applies the EQ predicate on the "auth_url" field.
func AuthURLEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldAuthURL, v))
}

// AuthURLNEQ applies the NEQ predicate on the "auth_url" field.
func AuthURLNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldAuthURL, v))
}

// AuthURLIn applies the In predicate on the "auth_url" field.
func AuthURLIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldAuthURL, vs...))
}

// AuthURLNotIn applies the NotIn predicate on the "auth_url" field.
func AuthURLNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldAuthURL, vs...))
}

// AuthURLGT applies the GT predicate on the "auth_url" field.
func AuthURLGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldAuthURL, v))
}

// AuthURLGTE applies the GTE predicate on the "auth_url" field.
func AuthURLGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldAuthURL, v))
}

// AuthURLLT applies the LT predicate on the "auth_url" field.
func AuthURLLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldAuthURL, v))
}

// AuthURLLTE applies the LTE predicate on the "auth_url" field.
func AuthURLLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldAuthURL, v))
}

// AuthURLContains applies the Contains predicate on the "auth_url" field.
func AuthURLContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldAuthURL, v))
}

// AuthURLHasPrefix applies the HasPrefix predicate on the "auth_url" field.
func AuthURLHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldAuthURL, v))
}

// AuthURLHasSuffix applies the HasSuffix predicate on the "auth_url" field.
func AuthURLHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldAuthURL, v))
}

// AuthURLEqualFold applies the EqualFold predicate on the "auth_url" field.
func AuthURLEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldAuthURL, v))
}

// AuthURLContainsFold applies the ContainsFold predicate on the "auth_url" field.
func AuthURLContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldAuthURL, v))
}

// TokenURLEQ applies the EQ predicate on the "token_url" field.
func TokenURLEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldTokenURL, v))
}

// TokenURLNEQ applies the NEQ predicate on the "token_url" field.
func TokenURLNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldTokenURL, v))
}

// TokenURLIn applies the In predicate on the "token_url" field.
func TokenURLIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldTokenURL, vs...))
}

// TokenURLNotIn applies the NotIn predicate on the "token_url" field.
func TokenURLNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldTokenURL, vs...))
}

// TokenURLGT applies the GT predicate on the "token_url" field.
func TokenURLGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldTokenURL, v))
}

// TokenURLGTE applies the GTE predicate on the "token_url" field.
func TokenURLGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldTokenURL, v))
}

// TokenURLLT applies the LT predicate on the "token_url" field.
func TokenURLLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldTokenURL, v))
}

// TokenURLLTE applies the LTE predicate on the "token_url" field.
func TokenURLLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldTokenURL, v))
}

// TokenURLContains applies the Contains predicate on the "token_url" field.
func TokenURLContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldTokenURL, v))
}

// TokenURLHasPrefix applies the HasPrefix predicate on the "token_url" field.
func TokenURLHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldTokenURL, v))
}

// TokenURLHasSuffix applies the HasSuffix predicate on the "token_url" field.
func TokenURLHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldTokenURL, v))
}

// TokenURLEqualFold applies the EqualFold predicate on the "token_url" field.
func TokenURLEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldTokenURL, v))
}

// TokenURLContainsFold applies the ContainsFold predicate on the "token_url" field.
func TokenURLContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldTokenURL, v))
}

// UserInfoURLEQ applies the EQ predicate on the "user_info_url" field.
func UserInfoURLEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldUserInfoURL, v))
}

// UserInfoURLNEQ applies the NEQ predicate on the "user_info_url" field.
func UserInfoURLNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldUserInfoURL, v))
}

// UserInfoURLIn applies the In predicate on the "user_info_url" field.
func UserInfoURLIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldUserInfoURL, vs...))
}

// UserInfoURLNotIn applies the NotIn predicate on the "user_info_url" field.
func UserInfoURLNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldUserInfoURL, vs...))
}

// UserInfoURLGT applies the GT predicate on the "user_info_url" field.
func UserInfoURLGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldUserInfoURL, v))
}

// UserInfoURLGTE applies the GTE predicate on the "user_info_url" field.
func UserInfoURLGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldUserInfoURL, v))
}

// UserInfoURLLT applies the LT predicate on the "user_info_url" field.
func UserInfoURLLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldUserInfoURL, v))
}

// UserInfoURLLTE applies the LTE predicate on the "user_info_url" field.
func UserInfoURLLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldUserInfoURL, v))
}

// UserInfoURLContains applies the Contains predicate on the "user_info_url" field.
func UserInfoURLContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldUserInfoURL, v))
}

// UserInfoURLHasPrefix applies the HasPrefix predicate on the "user_info_url" field.
func UserInfoURLHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldUserInfoURL, v))
}

// UserInfoURLHasSuffix applies the HasSuffix predicate on the "user_info_url" field.
func UserInfoURLHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldUserInfoURL, v))
}

// UserInfoURLEqualFold applies the EqualFold predicate on the "user_info_url" field.
func UserInfoURLEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldUserInfoURL, v))
}

// UserInfoURLContainsFold applies the ContainsFold predicate on the "user_info_url" field.
func UserInfoURLContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldUserInfoURL, v))
}

// RedirectURIEQ applies the EQ predicate on the "redirect_uri" field.
func RedirectURIEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldRedirectURI, v))
}

// RedirectURINEQ applies the NEQ predicate on the "redirect_uri" field.
func RedirectURINEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldRedirectURI, v))
}

// RedirectURIIn applies the In predicate on the "redirect_uri" field.
func RedirectURIIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldRedirectURI, vs...))
}

// RedirectURINotIn applies the NotIn predicate on the "redirect_uri" field.
func RedirectURINotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldRedirectURI, vs...))
}

// RedirectURIGT applies the GT predicate on the "redirect_uri" field.
func RedirectURIGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldRedirectURI, v))
}

// RedirectURIGTE applies the GTE predicate on the "redirect_uri" field.
func RedirectURIGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldRedirectURI, v))
}

// RedirectURILT applies the LT predicate on the "redirect_uri" field.
func RedirectURILT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldRedirectURI, v))
}

// RedirectURILTE applies the LTE predicate on the "redirect_uri" field.
func RedirectURILTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldRedirectURI, v))
}

// RedirectURIContains applies the Contains predicate on the "redirect_uri" field.
func RedirectURIContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldRedirectURI, v))
}

// RedirectURIHasPrefix applies the HasPrefix predicate on the "redirect_uri" field.
func RedirectURIHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldRedirectURI, v))
}

// RedirectURIHasSuffix applies the HasSuffix predicate on the "redirect_uri" field.
func RedirectURIHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldRedirectURI, v))
}

// RedirectURIEqualFold applies the EqualFold predicate on the "redirect_uri" field.
func RedirectURIEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldRedirectURI, v))
}

// RedirectURIContainsFold applies the ContainsFold predicate on the "redirect_uri" field.
func RedirectURIContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldRedirectURI, v))
}

// ScopesEQ applies the EQ predicate on the "scopes" field.
func ScopesEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldScopes, v))
}

// ScopesNEQ applies the NEQ predicate on the "scopes" field.
func ScopesNEQ(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldScopes, v))
}

// ScopesIn applies the In predicate on the "scopes" field.
func ScopesIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIn(FieldScopes, vs...))
}

// ScopesNotIn applies the NotIn predicate on the "scopes" field.
func ScopesNotIn(vs ...string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotIn(FieldScopes, vs...))
}

// ScopesGT applies the GT predicate on the "scopes" field.
func ScopesGT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGT(FieldScopes, v))
}

// ScopesGTE applies the GTE predicate on the "scopes" field.
func ScopesGTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldGTE(FieldScopes, v))
}

// ScopesLT applies the LT predicate on the "scopes" field.
func ScopesLT(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLT(FieldScopes, v))
}

// ScopesLTE applies the LTE predicate on the "scopes" field.
func ScopesLTE(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldLTE(FieldScopes, v))
}

// ScopesContains applies the Contains predicate on the "scopes" field.
func ScopesContains(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContains(FieldScopes, v))
}

// ScopesHasPrefix applies the HasPrefix predicate on the "scopes" field.
func ScopesHasPrefix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasPrefix(FieldScopes, v))
}

// ScopesHasSuffix applies the HasSuffix predicate on the "scopes" field.
func ScopesHasSuffix(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldHasSuffix(FieldScopes, v))
}

// ScopesIsNil applies the IsNil predicate on the "scopes" field.
func ScopesIsNil() predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldIsNull(FieldScopes))
}

// ScopesNotNil applies the NotNil predicate on the "scopes" field.
func ScopesNotNil() predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNotNull(FieldScopes))
}

// ScopesEqualFold applies the EqualFold predicate on the "scopes" field.
func ScopesEqualFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEqualFold(FieldScopes, v))
}

// ScopesContainsFold applies the ContainsFold predicate on the "scopes" field.
func ScopesContainsFold(v string) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldContainsFold(FieldScopes, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.FieldNEQ(FieldEnabled, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OAuthProvider) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OAuthProvider) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OAuthProvider) predicate.OAuthProvider {
	return predicate.OAuthProvider(sql.NotPredicates(p))
}
