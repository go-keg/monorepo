directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateMembershipInput is used for create Membership object.
Input was generated by ent.
"""
input CreateMembershipInput {
  isLeader: Boolean
  tenantUserID: ID!
  organizationID: ID!
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  name: String!
  type: OrganizationType
}
"""
CreatePermissionInput is used for create Permission object.
Input was generated by ent.
"""
input CreatePermissionInput {
  name: String!
  key: String
  """
  权限类型
  """
  type: PermissionType!
  path: String
  description: String
  sort: Int
  """
  自定义属性
  """
  attrs: Map
  parentID: ID
  childIDs: [ID!]
}
"""
CreateTenantInput is used for create Tenant object.
Input was generated by ent.
"""
input CreateTenantInput {
  name: String!
  maxUsers: Int
  features: [String!]
}
"""
CreateTenantRoleInput is used for create TenantRole object.
Input was generated by ent.
"""
input CreateTenantRoleInput {
  name: String!
  description: String
  sort: Int
  permissionIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  nickname: String!
  avatar: String
  password: String
  """
  状态
  """
  status: UserStatus
  isAdmin: Boolean
  oauthAccountIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
The builtin Map type
"""
scalar Map
type Membership implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  organizationID: ID!
  tenantUserID: ID!
  isLeader: Boolean!
  tenantUser: TenantUser!
  organization: Organization!
}
"""
Ordering options for Membership connections
"""
input MembershipOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Memberships.
  """
  field: MembershipOrderField!
}
"""
Properties by which Membership connections can be ordered.
"""
enum MembershipOrderField {
  createdAt
  updatedAt
}
"""
MembershipWhereInput is used for filtering Membership objects.
Input was generated by ent.
"""
input MembershipWhereInput {
  not: MembershipWhereInput
  and: [MembershipWhereInput!]
  or: [MembershipWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  organization_id field predicates
  """
  organizationID: ID
  organizationIDNEQ: ID
  organizationIDIn: [ID!]
  organizationIDNotIn: [ID!]
  """
  tenant_user_id field predicates
  """
  tenantUserID: ID
  tenantUserIDNEQ: ID
  tenantUserIDIn: [ID!]
  tenantUserIDNotIn: [ID!]
  """
  is_leader field predicates
  """
  isLeader: Boolean
  isLeaderNEQ: Boolean
  """
  tenant_user edge predicates
  """
  hasTenantUser: Boolean
  hasTenantUserWith: [TenantUserWhereInput!]
  """
  organization edge predicates
  """
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/go-keg/monorepo/internal/data/account/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type OAuthAccount implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  userID: ID!
  provider: String!
  providerUserID: String!
  accessToken: String
  refreshToken: String
  tokenExpiry: Time
  profile: Map
  user: User!
}
"""
Ordering options for OAuthAccount connections
"""
input OAuthAccountOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OAuthAccounts.
  """
  field: OAuthAccountOrderField!
}
"""
Properties by which OAuthAccount connections can be ordered.
"""
enum OAuthAccountOrderField {
  createdAt
  updatedAt
}
"""
OAuthAccountWhereInput is used for filtering OAuthAccount objects.
Input was generated by ent.
"""
input OAuthAccountWhereInput {
  not: OAuthAccountWhereInput
  and: [OAuthAccountWhereInput!]
  or: [OAuthAccountWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  provider field predicates
  """
  provider: String
  providerNEQ: String
  providerIn: [String!]
  providerNotIn: [String!]
  providerGT: String
  providerGTE: String
  providerLT: String
  providerLTE: String
  providerContains: String
  providerHasPrefix: String
  providerHasSuffix: String
  providerEqualFold: String
  providerContainsFold: String
  """
  provider_user_id field predicates
  """
  providerUserID: String
  providerUserIDNEQ: String
  providerUserIDIn: [String!]
  providerUserIDNotIn: [String!]
  providerUserIDGT: String
  providerUserIDGTE: String
  providerUserIDLT: String
  providerUserIDLTE: String
  providerUserIDContains: String
  providerUserIDHasPrefix: String
  providerUserIDHasSuffix: String
  providerUserIDEqualFold: String
  providerUserIDContainsFold: String
  """
  access_token field predicates
  """
  accessToken: String
  accessTokenNEQ: String
  accessTokenIn: [String!]
  accessTokenNotIn: [String!]
  accessTokenGT: String
  accessTokenGTE: String
  accessTokenLT: String
  accessTokenLTE: String
  accessTokenContains: String
  accessTokenHasPrefix: String
  accessTokenHasSuffix: String
  accessTokenIsNil: Boolean
  accessTokenNotNil: Boolean
  accessTokenEqualFold: String
  accessTokenContainsFold: String
  """
  refresh_token field predicates
  """
  refreshToken: String
  refreshTokenNEQ: String
  refreshTokenIn: [String!]
  refreshTokenNotIn: [String!]
  refreshTokenGT: String
  refreshTokenGTE: String
  refreshTokenLT: String
  refreshTokenLTE: String
  refreshTokenContains: String
  refreshTokenHasPrefix: String
  refreshTokenHasSuffix: String
  refreshTokenIsNil: Boolean
  refreshTokenNotNil: Boolean
  refreshTokenEqualFold: String
  refreshTokenContainsFold: String
  """
  token_expiry field predicates
  """
  tokenExpiry: Time
  tokenExpiryNEQ: Time
  tokenExpiryIn: [Time!]
  tokenExpiryNotIn: [Time!]
  tokenExpiryGT: Time
  tokenExpiryGTE: Time
  tokenExpiryLT: Time
  tokenExpiryLTE: Time
  tokenExpiryIsNil: Boolean
  tokenExpiryNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type OAuthProvider implements Node {
  id: ID!
  provider: String!
  """
  第三方平台名称
  """
  name: String!
  """
  OAuth2 Client ID
  """
  clientID: String!
  """
  授权地址
  """
  authURL: String!
  """
  Token 获取地址
  """
  tokenURL: String!
  """
  用户信息接口地址
  """
  userInfoURL: String!
  """
  回调地址
  """
  redirectURI: String!
  """
  请求的权限范围，例如：user,email
  """
  scopes: String
  """
  是否启用
  """
  enabled: Boolean!
}
"""
OAuthProviderWhereInput is used for filtering OAuthProvider objects.
Input was generated by ent.
"""
input OAuthProviderWhereInput {
  not: OAuthProviderWhereInput
  and: [OAuthProviderWhereInput!]
  or: [OAuthProviderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  provider field predicates
  """
  provider: String
  providerNEQ: String
  providerIn: [String!]
  providerNotIn: [String!]
  providerGT: String
  providerGTE: String
  providerLT: String
  providerLTE: String
  providerContains: String
  providerHasPrefix: String
  providerHasSuffix: String
  providerEqualFold: String
  providerContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  client_id field predicates
  """
  clientID: String
  clientIDNEQ: String
  clientIDIn: [String!]
  clientIDNotIn: [String!]
  clientIDGT: String
  clientIDGTE: String
  clientIDLT: String
  clientIDLTE: String
  clientIDContains: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDEqualFold: String
  clientIDContainsFold: String
  """
  auth_url field predicates
  """
  authURL: String
  authURLNEQ: String
  authURLIn: [String!]
  authURLNotIn: [String!]
  authURLGT: String
  authURLGTE: String
  authURLLT: String
  authURLLTE: String
  authURLContains: String
  authURLHasPrefix: String
  authURLHasSuffix: String
  authURLEqualFold: String
  authURLContainsFold: String
  """
  token_url field predicates
  """
  tokenURL: String
  tokenURLNEQ: String
  tokenURLIn: [String!]
  tokenURLNotIn: [String!]
  tokenURLGT: String
  tokenURLGTE: String
  tokenURLLT: String
  tokenURLLTE: String
  tokenURLContains: String
  tokenURLHasPrefix: String
  tokenURLHasSuffix: String
  tokenURLEqualFold: String
  tokenURLContainsFold: String
  """
  user_info_url field predicates
  """
  userInfoURL: String
  userInfoURLNEQ: String
  userInfoURLIn: [String!]
  userInfoURLNotIn: [String!]
  userInfoURLGT: String
  userInfoURLGTE: String
  userInfoURLLT: String
  userInfoURLLTE: String
  userInfoURLContains: String
  userInfoURLHasPrefix: String
  userInfoURLHasSuffix: String
  userInfoURLEqualFold: String
  userInfoURLContainsFold: String
  """
  redirect_uri field predicates
  """
  redirectURI: String
  redirectURINEQ: String
  redirectURIIn: [String!]
  redirectURINotIn: [String!]
  redirectURIGT: String
  redirectURIGTE: String
  redirectURILT: String
  redirectURILTE: String
  redirectURIContains: String
  redirectURIHasPrefix: String
  redirectURIHasSuffix: String
  redirectURIEqualFold: String
  redirectURIContainsFold: String
  """
  scopes field predicates
  """
  scopes: String
  scopesNEQ: String
  scopesIn: [String!]
  scopesNotIn: [String!]
  scopesGT: String
  scopesGTE: String
  scopesLT: String
  scopesLTE: String
  scopesContains: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIsNil: Boolean
  scopesNotNil: Boolean
  scopesEqualFold: String
  scopesContainsFold: String
  """
  enabled field predicates
  """
  enabled: Boolean
  enabledNEQ: Boolean
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
type Organization implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  name: String!
  parentID: ID
  type: OrganizationType!
  parent: Organization
  children: [Organization!]
  memberships: [Membership!]
}
"""
Ordering options for Organization connections
"""
input OrganizationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Organizations.
  """
  field: OrganizationOrderField!
}
"""
Properties by which Organization connections can be ordered.
"""
enum OrganizationOrderField {
  createdAt
  updatedAt
}
"""
OrganizationType is enum for the field type
"""
enum OrganizationType @goModel(model: "github.com/go-keg/monorepo/internal/data/account/ent/organization.Type") {
  company
  department
  team
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  not: OrganizationWhereInput
  and: [OrganizationWhereInput!]
  or: [OrganizationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  parent_id field predicates
  """
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  """
  type field predicates
  """
  type: OrganizationType
  typeNEQ: OrganizationType
  typeIn: [OrganizationType!]
  typeNotIn: [OrganizationType!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [OrganizationWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [OrganizationWhereInput!]
  """
  memberships edge predicates
  """
  hasMemberships: Boolean
  hasMembershipsWith: [MembershipWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  parentID: ID
  name: String!
  key: String
  """
  权限类型
  """
  type: PermissionType!
  path: String
  description: String
  sort: Int!
  """
  自定义属性
  """
  attrs: Map
  parent: Permission
  children: [Permission!]
}
"""
A connection to a list of items.
"""
type PermissionConnection {
  """
  A list of edges.
  """
  edges: [PermissionEdge]
  """
  A list of nodes.
  """
  nodes: [Permission]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PermissionEdge {
  """
  The item at the end of the edge.
  """
  node: Permission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  createdAt
  updatedAt
  name
  sort
}
"""
PermissionType is enum for the field type
"""
enum PermissionType @goModel(model: "github.com/go-keg/monorepo/internal/data/account/ent/permission.Type") {
  """
  目录
  """
  menu
  """
  页面
  """
  page
  """
  元素
  """
  element
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  parent_id field predicates
  """
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  key field predicates
  """
  key: String
  keyNEQ: String
  keyIn: [String!]
  keyNotIn: [String!]
  keyGT: String
  keyGTE: String
  keyLT: String
  keyLTE: String
  keyContains: String
  keyHasPrefix: String
  keyHasSuffix: String
  keyIsNil: Boolean
  keyNotNil: Boolean
  keyEqualFold: String
  keyContainsFold: String
  """
  type field predicates
  """
  type: PermissionType
  typeNEQ: PermissionType
  typeIn: [PermissionType!]
  typeNotIn: [PermissionType!]
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIsNil: Boolean
  pathNotNil: Boolean
  pathEqualFold: String
  pathContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  sort field predicates
  """
  sort: Int
  sortNEQ: Int
  sortIn: [Int!]
  sortNotIn: [Int!]
  sortGT: Int
  sortGTE: Int
  sortLT: Int
  sortLTE: Int
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [PermissionWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [PermissionWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  """
  权限
  """
  permissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Permissions returned from the connection.
    """
    orderBy: PermissionOrder

    """
    Filtering options for Permissions returned from the connection.
    """
    where: PermissionWhereInput
  ): PermissionConnection!
  """
  角色
  """
  tenantRoles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for TenantRoles returned from the connection.
    """
    orderBy: TenantRoleOrder

    """
    Filtering options for TenantRoles returned from the connection.
    """
    where: TenantRoleWhereInput
  ): TenantRoleConnection!
  """
  用户
  """
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  """
  权限
  """
  permissionList(
    """
    The number of elements to skip from the start of the list.
    """
    offset: Int! = 0

    """
    The maximum number of elements to return. This value cannot be negative.
    """
    limit: Int! = 10

    """
    Ordering options for permission returned from the connection.
    """
    orderBy: PermissionOrder

    """
    Filtering options for permission returned from the connection.
    """
    where: PermissionWhereInput
  ): PermissionConnection!
  """
  角色
  """
  tenantRoleList(
    """
    The number of elements to skip from the start of the list.
    """
    offset: Int! = 0

    """
    The maximum number of elements to return. This value cannot be negative.
    """
    limit: Int! = 10

    """
    Ordering options for tenantRole returned from the connection.
    """
    orderBy: TenantRoleOrder

    """
    Filtering options for tenantRole returned from the connection.
    """
    where: TenantRoleWhereInput
  ): TenantRoleConnection!
  """
  用户
  """
  userList(
    """
    The number of elements to skip from the start of the list.
    """
    offset: Int! = 0

    """
    The maximum number of elements to return. This value cannot be negative.
    """
    limit: Int! = 10

    """
    Ordering options for user returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for user returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
}
type Tenant implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String!
  maxUsers: Int!
  features: [String!]
  tenantUsers: [TenantUser!]
  roles: [TenantRole!]
  organizations: [Organization!]
}
"""
Ordering options for Tenant connections
"""
input TenantOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tenants.
  """
  field: TenantOrderField!
}
"""
Properties by which Tenant connections can be ordered.
"""
enum TenantOrderField {
  createdAt
  updatedAt
}
type TenantRole implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  name: String!
  description: String
  sort: Int!
  permissions: [Permission!]
}
"""
A connection to a list of items.
"""
type TenantRoleConnection {
  """
  A list of edges.
  """
  edges: [TenantRoleEdge]
  """
  A list of nodes.
  """
  nodes: [TenantRole]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenantRoleEdge {
  """
  The item at the end of the edge.
  """
  node: TenantRole
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for TenantRole connections
"""
input TenantRoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order TenantRoles.
  """
  field: TenantRoleOrderField!
}
"""
Properties by which TenantRole connections can be ordered.
"""
enum TenantRoleOrderField {
  createdAt
  updatedAt
  name
  sort
}
"""
TenantRoleWhereInput is used for filtering TenantRole objects.
Input was generated by ent.
"""
input TenantRoleWhereInput {
  not: TenantRoleWhereInput
  and: [TenantRoleWhereInput!]
  or: [TenantRoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  sort field predicates
  """
  sort: Int
  sortNEQ: Int
  sortIn: [Int!]
  sortNotIn: [Int!]
  sortGT: Int
  sortGTE: Int
  sortLT: Int
  sortLTE: Int
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [PermissionWhereInput!]
}
type TenantUser implements Node {
  id: ID!
  tenantID: ID!
  userID: ID!
  isOwner: Boolean!
  isActive: Boolean!
  """
  是否为最后登录的租户
  """
  lastLoginTenant: Boolean!
  """
  最后登录时间
  """
  lastLoginAt: Time
  user: User!
  tenant: Tenant!
  roles: [TenantRole!]
  memberships: [Membership!]
}
"""
TenantUserWhereInput is used for filtering TenantUser objects.
Input was generated by ent.
"""
input TenantUserWhereInput {
  not: TenantUserWhereInput
  and: [TenantUserWhereInput!]
  or: [TenantUserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  """
  is_owner field predicates
  """
  isOwner: Boolean
  isOwnerNEQ: Boolean
  """
  is_active field predicates
  """
  isActive: Boolean
  isActiveNEQ: Boolean
  """
  last_login_tenant field predicates
  """
  lastLoginTenant: Boolean
  lastLoginTenantNEQ: Boolean
  """
  last_login_at field predicates
  """
  lastLoginAt: Time
  lastLoginAtNEQ: Time
  lastLoginAtIn: [Time!]
  lastLoginAtNotIn: [Time!]
  lastLoginAtGT: Time
  lastLoginAtGTE: Time
  lastLoginAtLT: Time
  lastLoginAtLTE: Time
  lastLoginAtIsNil: Boolean
  lastLoginAtNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [TenantRoleWhereInput!]
  """
  memberships edge predicates
  """
  hasMemberships: Boolean
  hasMembershipsWith: [MembershipWhereInput!]
}
"""
TenantWhereInput is used for filtering Tenant objects.
Input was generated by ent.
"""
input TenantWhereInput {
  not: TenantWhereInput
  and: [TenantWhereInput!]
  or: [TenantWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  max_users field predicates
  """
  maxUsers: Int
  maxUsersNEQ: Int
  maxUsersIn: [Int!]
  maxUsersNotIn: [Int!]
  maxUsersGT: Int
  maxUsersGTE: Int
  maxUsersLT: Int
  maxUsersLTE: Int
  """
  tenant_users edge predicates
  """
  hasTenantUsers: Boolean
  hasTenantUsersWith: [TenantUserWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [TenantRoleWhereInput!]
  """
  organizations edge predicates
  """
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateMembershipInput is used for update Membership object.
Input was generated by ent.
"""
input UpdateMembershipInput {
  isLeader: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  name: String
  type: OrganizationType
}
"""
UpdatePermissionInput is used for update Permission object.
Input was generated by ent.
"""
input UpdatePermissionInput {
  name: String
  key: String
  clearKey: Boolean
  """
  权限类型
  """
  type: PermissionType
  path: String
  clearPath: Boolean
  description: String
  clearDescription: Boolean
  sort: Int
  """
  自定义属性
  """
  attrs: Map
  clearAttrs: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
}
"""
UpdateTenantInput is used for update Tenant object.
Input was generated by ent.
"""
input UpdateTenantInput {
  name: String
  maxUsers: Int
  features: [String!]
  appendFeatures: [String!]
  clearFeatures: Boolean
}
"""
UpdateTenantRoleInput is used for update TenantRole object.
Input was generated by ent.
"""
input UpdateTenantRoleInput {
  name: String
  description: String
  clearDescription: Boolean
  sort: Int
  addPermissionIDs: [ID!]
  removePermissionIDs: [ID!]
  clearPermissions: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  email: String
  nickname: String
  avatar: String
  clearAvatar: Boolean
  password: String
  clearPassword: Boolean
  """
  状态
  """
  status: UserStatus
  isAdmin: Boolean
  addOauthAccountIDs: [ID!]
  removeOauthAccountIDs: [ID!]
  clearOauthAccounts: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  email: String!
  nickname: String!
  avatar: String
  """
  状态
  """
  status: UserStatus!
  isAdmin: Boolean!
  oauthAccounts: [OAuthAccount!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  A list of nodes.
  """
  nodes: [User]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  createdAt
  updatedAt
  email
}
"""
UserStatus is enum for the field status
"""
enum UserStatus @goModel(model: "github.com/go-keg/monorepo/internal/data/account/ent/user.Status") {
  """
  正常
  """
  normal
  """
  冻结
  """
  freeze
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  nickname field predicates
  """
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameEqualFold: String
  nicknameContainsFold: String
  """
  avatar field predicates
  """
  avatar: String
  avatarNEQ: String
  avatarIn: [String!]
  avatarNotIn: [String!]
  avatarGT: String
  avatarGTE: String
  avatarLT: String
  avatarLTE: String
  avatarContains: String
  avatarHasPrefix: String
  avatarHasSuffix: String
  avatarIsNil: Boolean
  avatarNotNil: Boolean
  avatarEqualFold: String
  avatarContainsFold: String
  """
  status field predicates
  """
  status: UserStatus
  statusNEQ: UserStatus
  statusIn: [UserStatus!]
  statusNotIn: [UserStatus!]
  """
  is_admin field predicates
  """
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """
  oauth_accounts edge predicates
  """
  hasOauthAccounts: Boolean
  hasOauthAccountsWith: [OAuthAccountWhereInput!]
}
