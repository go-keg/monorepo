// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"golang.org/x/exp/slices"
)

type customCollectFieldsArgs struct {
	path   []string
	fields []string
}

type CustomCollectFieldsOption func(args *customCollectFieldsArgs)

func WithPath(path ...string) CustomCollectFieldsOption {
	return func(args *customCollectFieldsArgs) {
		args.path = path
	}
}

func WithFields(fields ...string) CustomCollectFieldsOption {
	return func(args *customCollectFieldsArgs) {
		args.fields = fields
	}
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_m *MembershipQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*MembershipQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _m, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _m.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_m.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_m.ctx.Fields, field) {
				_m.ctx.Fields = append(_m.ctx.Fields, field)
			}
		}
	}
	return _m, nil
}

// AllCollectFields
func (_m *MembershipQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*Membership, error) {
	query, err := _m.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_m *MembershipQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*Membership, error) {
	query, err := _m.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// MembershipList is the list to Membership.
type MembershipList struct {
	Nodes      []*Membership `json:"nodes"`
	TotalCount int           `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*Membership.
func (_m *MembershipQuery) List(ctx context.Context, offset, limit int, opts ...MembershipPaginateOption) (*MembershipList, error) {
	pager, err := newMembershipPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &MembershipList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_m.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_m).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_oa *OAuthAccountQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*OAuthAccountQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _oa, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _oa.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_oa.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_oa.ctx.Fields, field) {
				_oa.ctx.Fields = append(_oa.ctx.Fields, field)
			}
		}
	}
	return _oa, nil
}

// AllCollectFields
func (_oa *OAuthAccountQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*OAuthAccount, error) {
	query, err := _oa.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_oa *OAuthAccountQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*OAuthAccount, error) {
	query, err := _oa.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// OAuthAccountList is the list to OAuthAccount.
type OAuthAccountList struct {
	Nodes      []*OAuthAccount `json:"nodes"`
	TotalCount int             `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*OAuthAccount.
func (_oa *OAuthAccountQuery) List(ctx context.Context, offset, limit int, opts ...OAuthAccountPaginateOption) (*OAuthAccountList, error) {
	pager, err := newOAuthAccountPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_oa); err != nil {
		return nil, err
	}
	conn := &OAuthAccountList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _oa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_oa.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _oa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_oa).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_op *OAuthProviderQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*OAuthProviderQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _op, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _op.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_op.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_op.ctx.Fields, field) {
				_op.ctx.Fields = append(_op.ctx.Fields, field)
			}
		}
	}
	return _op, nil
}

// AllCollectFields
func (_op *OAuthProviderQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*OAuthProvider, error) {
	query, err := _op.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_op *OAuthProviderQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*OAuthProvider, error) {
	query, err := _op.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// OAuthProviderList is the list to OAuthProvider.
type OAuthProviderList struct {
	Nodes      []*OAuthProvider `json:"nodes"`
	TotalCount int              `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*OAuthProvider.
func (_op *OAuthProviderQuery) List(ctx context.Context, offset, limit int, opts ...OAuthProviderPaginateOption) (*OAuthProviderList, error) {
	pager, err := newOAuthProviderPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_op); err != nil {
		return nil, err
	}
	conn := &OAuthProviderList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _op.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_op.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _op.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_op).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_o *OrganizationQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*OrganizationQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _o, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _o.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_o.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_o.ctx.Fields, field) {
				_o.ctx.Fields = append(_o.ctx.Fields, field)
			}
		}
	}
	return _o, nil
}

// AllCollectFields
func (_o *OrganizationQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*Organization, error) {
	query, err := _o.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_o *OrganizationQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*Organization, error) {
	query, err := _o.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// OrganizationList is the list to Organization.
type OrganizationList struct {
	Nodes      []*Organization `json:"nodes"`
	TotalCount int             `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*Organization.
func (_o *OrganizationQuery) List(ctx context.Context, offset, limit int, opts ...OrganizationPaginateOption) (*OrganizationList, error) {
	pager, err := newOrganizationPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_o); err != nil {
		return nil, err
	}
	conn := &OrganizationList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_o.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_o).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_pe *PermissionQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*PermissionQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _pe, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _pe.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_pe.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_pe.ctx.Fields, field) {
				_pe.ctx.Fields = append(_pe.ctx.Fields, field)
			}
		}
	}
	return _pe, nil
}

// AllCollectFields
func (_pe *PermissionQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*Permission, error) {
	query, err := _pe.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_pe *PermissionQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*Permission, error) {
	query, err := _pe.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// PermissionList is the list to Permission.
type PermissionList struct {
	Nodes      []*Permission `json:"nodes"`
	TotalCount int           `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*Permission.
func (_pe *PermissionQuery) List(ctx context.Context, offset, limit int, opts ...PermissionPaginateOption) (*PermissionList, error) {
	pager, err := newPermissionPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_pe); err != nil {
		return nil, err
	}
	conn := &PermissionList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_pe.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_pe).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_t *TenantQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*TenantQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _t, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _t.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_t.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_t.ctx.Fields, field) {
				_t.ctx.Fields = append(_t.ctx.Fields, field)
			}
		}
	}
	return _t, nil
}

// AllCollectFields
func (_t *TenantQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*Tenant, error) {
	query, err := _t.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_t *TenantQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*Tenant, error) {
	query, err := _t.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// TenantList is the list to Tenant.
type TenantList struct {
	Nodes      []*Tenant `json:"nodes"`
	TotalCount int       `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*Tenant.
func (_t *TenantQuery) List(ctx context.Context, offset, limit int, opts ...TenantPaginateOption) (*TenantList, error) {
	pager, err := newTenantPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_t); err != nil {
		return nil, err
	}
	conn := &TenantList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_t.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_t).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_tr *TenantRoleQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*TenantRoleQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _tr, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _tr.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_tr.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_tr.ctx.Fields, field) {
				_tr.ctx.Fields = append(_tr.ctx.Fields, field)
			}
		}
	}
	return _tr, nil
}

// AllCollectFields
func (_tr *TenantRoleQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*TenantRole, error) {
	query, err := _tr.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_tr *TenantRoleQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*TenantRole, error) {
	query, err := _tr.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// TenantRoleList is the list to TenantRole.
type TenantRoleList struct {
	Nodes      []*TenantRole `json:"nodes"`
	TotalCount int           `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*TenantRole.
func (_tr *TenantRoleQuery) List(ctx context.Context, offset, limit int, opts ...TenantRolePaginateOption) (*TenantRoleList, error) {
	pager, err := newTenantRolePager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_tr); err != nil {
		return nil, err
	}
	conn := &TenantRoleList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _tr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_tr.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _tr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_tr).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_tu *TenantUserQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*TenantUserQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _tu, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _tu.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_tu.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_tu.ctx.Fields, field) {
				_tu.ctx.Fields = append(_tu.ctx.Fields, field)
			}
		}
	}
	return _tu, nil
}

// AllCollectFields
func (_tu *TenantUserQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*TenantUser, error) {
	query, err := _tu.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_tu *TenantUserQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*TenantUser, error) {
	query, err := _tu.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// TenantUserList is the list to TenantUser.
type TenantUserList struct {
	Nodes      []*TenantUser `json:"nodes"`
	TotalCount int           `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*TenantUser.
func (_tu *TenantUserQuery) List(ctx context.Context, offset, limit int, opts ...TenantUserPaginateOption) (*TenantUserList, error) {
	pager, err := newTenantUserPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_tu); err != nil {
		return nil, err
	}
	conn := &TenantUserList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _tu.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_tu.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _tu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_tu).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (_u *UserQuery) CustomCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*UserQuery, error) {
	args := customCollectFieldsArgs{}
	for _, opt := range opts {
		opt(&args)
	}
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return _u, nil
	}
	if field := collectedField(ctx, args.path...); field != nil {
		if err := _u.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, args.path); err != nil {
			return nil, err
		}
	}
	if len(args.fields) > 0 && len(_u.ctx.Fields) > 0 {
		for _, field := range args.fields {
			if !slices.Contains(_u.ctx.Fields, field) {
				_u.ctx.Fields = append(_u.ctx.Fields, field)
			}
		}
	}
	return _u, nil
}

// AllCollectFields
func (_u *UserQuery) AllCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) ([]*User, error) {
	query, err := _u.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.All(ctx)
}

// FirstCollectFields
func (_u *UserQuery) FirstCollectFields(ctx context.Context, opts ...CustomCollectFieldsOption) (*User, error) {
	query, err := _u.CustomCollectFields(ctx, opts...)
	if err != nil {
		return nil, err
	}
	return query.First(ctx)
}

// UserList is the list to User.
type UserList struct {
	Nodes      []*User `json:"nodes"`
	TotalCount int     `json:"totalCount"`
}

// List executes the query and returns totalCount and nodes []*User.
func (_u *UserQuery) List(ctx context.Context, offset, limit int, opts ...UserPaginateOption) (*UserList, error) {
	pager, err := newUserPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(_u); err != nil {
		return nil, err
	}
	conn := &UserList{}
	ignoredNodes := !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := _u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	_u.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = _u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(_u).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}
