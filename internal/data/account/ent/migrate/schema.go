// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// MembershipsColumns holds the columns for the "memberships" table.
	MembershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_leader", Type: field.TypeBool, Default: false},
		{Name: "organization_id", Type: field.TypeInt},
		{Name: "tenant_user_id", Type: field.TypeInt},
	}
	// MembershipsTable holds the schema information for the "memberships" table.
	MembershipsTable = &schema.Table{
		Name:       "memberships",
		Comment:    "组织架构成员",
		Columns:    MembershipsColumns,
		PrimaryKey: []*schema.Column{MembershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "memberships_organizations_memberships",
				Columns:    []*schema.Column{MembershipsColumns[4]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "memberships_tenant_users_memberships",
				Columns:    []*schema.Column{MembershipsColumns[5]},
				RefColumns: []*schema.Column{TenantUsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "membership_created_at",
				Unique:  false,
				Columns: []*schema.Column{MembershipsColumns[1]},
			},
		},
	}
	// OauthAccountsColumns holds the columns for the "oauth_accounts" table.
	OauthAccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "provider", Type: field.TypeString, Size: 20},
		{Name: "provider_user_id", Type: field.TypeString},
		{Name: "access_token", Type: field.TypeString, Nullable: true},
		{Name: "refresh_token", Type: field.TypeString, Nullable: true},
		{Name: "token_expiry", Type: field.TypeTime, Nullable: true},
		{Name: "profile", Type: field.TypeJSON, Nullable: true},
		{Name: "user_id", Type: field.TypeInt},
	}
	// OauthAccountsTable holds the schema information for the "oauth_accounts" table.
	OauthAccountsTable = &schema.Table{
		Name:       "oauth_accounts",
		Comment:    "用户关联OAuth账号",
		Columns:    OauthAccountsColumns,
		PrimaryKey: []*schema.Column{OauthAccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "oauth_accounts_users_oauth_accounts",
				Columns:    []*schema.Column{OauthAccountsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "oauthaccount_created_at",
				Unique:  false,
				Columns: []*schema.Column{OauthAccountsColumns[1]},
			},
			{
				Name:    "oauthaccount_provider_provider_user_id",
				Unique:  true,
				Columns: []*schema.Column{OauthAccountsColumns[3], OauthAccountsColumns[4]},
			},
		},
	}
	// OauthProvidersColumns holds the columns for the "oauth_providers" table.
	OauthProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "provider", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "auth_url", Type: field.TypeString},
		{Name: "token_url", Type: field.TypeString},
		{Name: "user_info_url", Type: field.TypeString},
		{Name: "redirect_uri", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "enabled", Type: field.TypeBool, Default: true},
	}
	// OauthProvidersTable holds the schema information for the "oauth_providers" table.
	OauthProvidersTable = &schema.Table{
		Name:       "oauth_providers",
		Columns:    OauthProvidersColumns,
		PrimaryKey: []*schema.Column{OauthProvidersColumns[0]},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"company", "department", "team"}, Default: "department"},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Comment:    "组织架构",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organizations_organizations_children",
				Columns:    []*schema.Column{OrganizationsColumns[5]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "organizations_tenants_organizations",
				Columns:    []*schema.Column{OrganizationsColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "organization_created_at",
				Unique:  false,
				Columns: []*schema.Column{OrganizationsColumns[1]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "key", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Comment: "权限类型", Enums: []string{"menu", "page", "element"}},
		{Name: "path", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "sort", Type: field.TypeInt, Default: 1000},
		{Name: "attrs", Type: field.TypeJSON, Nullable: true, Comment: "自定义属性"},
		{Name: "is_system", Type: field.TypeBool, Comment: "是否是系统级权限", Default: false},
		{Name: "parent_id", Type: field.TypeInt, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Comment:    "权限",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permissions_permissions_children",
				Columns:    []*schema.Column{PermissionsColumns[11]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "permission_created_at",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[1]},
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "max_users", Type: field.TypeInt, Default: 100},
		{Name: "features", Type: field.TypeJSON, Nullable: true},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Comment:    "租户",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "tenant_created_at",
				Unique:  false,
				Columns: []*schema.Column{TenantsColumns[1]},
			},
		},
	}
	// TenantRolesColumns holds the columns for the "tenant_roles" table.
	TenantRolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "sort", Type: field.TypeInt, Default: 1000},
		{Name: "tenant_id", Type: field.TypeInt},
	}
	// TenantRolesTable holds the schema information for the "tenant_roles" table.
	TenantRolesTable = &schema.Table{
		Name:       "tenant_roles",
		Comment:    "角色",
		Columns:    TenantRolesColumns,
		PrimaryKey: []*schema.Column{TenantRolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenant_roles_tenants_roles",
				Columns:    []*schema.Column{TenantRolesColumns[6]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "tenantrole_created_at",
				Unique:  false,
				Columns: []*schema.Column{TenantRolesColumns[1]},
			},
		},
	}
	// TenantUsersColumns holds the columns for the "tenant_users" table.
	TenantUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_owner", Type: field.TypeBool, Default: false},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "last_login_tenant", Type: field.TypeBool, Default: false},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true},
		{Name: "tenant_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// TenantUsersTable holds the schema information for the "tenant_users" table.
	TenantUsersTable = &schema.Table{
		Name:       "tenant_users",
		Columns:    TenantUsersColumns,
		PrimaryKey: []*schema.Column{TenantUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenant_users_tenants_tenant_users",
				Columns:    []*schema.Column{TenantUsersColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tenant_users_users_tenant_users",
				Columns:    []*schema.Column{TenantUsersColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime, Nullable: true},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "nickname", Type: field.TypeString},
		{Name: "avatar", Type: field.TypeString, Nullable: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Comment: "状态", Enums: []string{"normal", "freeze"}, Default: "normal"},
		{Name: "is_admin", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Comment:    "用户",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_created_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[3]},
			},
		},
	}
	// TenantRolePermissionsColumns holds the columns for the "tenant_role_permissions" table.
	TenantRolePermissionsColumns = []*schema.Column{
		{Name: "tenant_role_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// TenantRolePermissionsTable holds the schema information for the "tenant_role_permissions" table.
	TenantRolePermissionsTable = &schema.Table{
		Name:       "tenant_role_permissions",
		Columns:    TenantRolePermissionsColumns,
		PrimaryKey: []*schema.Column{TenantRolePermissionsColumns[0], TenantRolePermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenant_role_permissions_tenant_role_id",
				Columns:    []*schema.Column{TenantRolePermissionsColumns[0]},
				RefColumns: []*schema.Column{TenantRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tenant_role_permissions_permission_id",
				Columns:    []*schema.Column{TenantRolePermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TenantUserRolesColumns holds the columns for the "tenant_user_roles" table.
	TenantUserRolesColumns = []*schema.Column{
		{Name: "tenant_user_id", Type: field.TypeInt},
		{Name: "tenant_role_id", Type: field.TypeInt},
	}
	// TenantUserRolesTable holds the schema information for the "tenant_user_roles" table.
	TenantUserRolesTable = &schema.Table{
		Name:       "tenant_user_roles",
		Columns:    TenantUserRolesColumns,
		PrimaryKey: []*schema.Column{TenantUserRolesColumns[0], TenantUserRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenant_user_roles_tenant_user_id",
				Columns:    []*schema.Column{TenantUserRolesColumns[0]},
				RefColumns: []*schema.Column{TenantUsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tenant_user_roles_tenant_role_id",
				Columns:    []*schema.Column{TenantUserRolesColumns[1]},
				RefColumns: []*schema.Column{TenantRolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		MembershipsTable,
		OauthAccountsTable,
		OauthProvidersTable,
		OrganizationsTable,
		PermissionsTable,
		TenantsTable,
		TenantRolesTable,
		TenantUsersTable,
		UsersTable,
		TenantRolePermissionsTable,
		TenantUserRolesTable,
	}
)

func init() {
	MembershipsTable.ForeignKeys[0].RefTable = OrganizationsTable
	MembershipsTable.ForeignKeys[1].RefTable = TenantUsersTable
	OauthAccountsTable.ForeignKeys[0].RefTable = UsersTable
	OrganizationsTable.ForeignKeys[0].RefTable = OrganizationsTable
	OrganizationsTable.ForeignKeys[1].RefTable = TenantsTable
	PermissionsTable.ForeignKeys[0].RefTable = PermissionsTable
	TenantRolesTable.ForeignKeys[0].RefTable = TenantsTable
	TenantUsersTable.ForeignKeys[0].RefTable = TenantsTable
	TenantUsersTable.ForeignKeys[1].RefTable = UsersTable
	TenantRolePermissionsTable.ForeignKeys[0].RefTable = TenantRolesTable
	TenantRolePermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
	TenantUserRolesTable.ForeignKeys[0].RefTable = TenantUsersTable
	TenantUserRolesTable.ForeignKeys[1].RefTable = TenantRolesTable
}
