// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/example/ent/app"
	"github.com/go-keg/monorepo/internal/data/example/ent/predicate"
)

// AppUpdate is the builder for updating App entities.
type AppUpdate struct {
	config
	hooks     []Hook
	mutation  *AppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppUpdate builder.
func (au *AppUpdate) Where(ps ...predicate.App) *AppUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AppUpdate) SetUpdatedAt(t time.Time) *AppUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AppUpdate) ClearUpdatedAt() *AppUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetName sets the "name" field.
func (au *AppUpdate) SetName(s string) *AppUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AppUpdate) SetNillableName(s *string) *AppUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AppUpdate) SetDescription(s string) *AppUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AppUpdate) SetNillableDescription(s *string) *AppUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AppUpdate) ClearDescription() *AppUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetToken sets the "token" field.
func (au *AppUpdate) SetToken(s string) *AppUpdate {
	au.mutation.SetToken(s)
	return au
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (au *AppUpdate) SetNillableToken(s *string) *AppUpdate {
	if s != nil {
		au.SetToken(*s)
	}
	return au
}

// ClearToken clears the value of the "token" field.
func (au *AppUpdate) ClearToken() *AppUpdate {
	au.mutation.ClearToken()
	return au
}

// SetType sets the "type" field.
func (au *AppUpdate) SetType(a app.Type) *AppUpdate {
	au.mutation.SetType(a)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AppUpdate) SetNillableType(a *app.Type) *AppUpdate {
	if a != nil {
		au.SetType(*a)
	}
	return au
}

// SetUsable sets the "usable" field.
func (au *AppUpdate) SetUsable(b bool) *AppUpdate {
	au.mutation.SetUsable(b)
	return au
}

// SetNillableUsable sets the "usable" field if the given value is not nil.
func (au *AppUpdate) SetNillableUsable(b *bool) *AppUpdate {
	if b != nil {
		au.SetUsable(*b)
	}
	return au
}

// SetExpiresAt sets the "expires_at" field.
func (au *AppUpdate) SetExpiresAt(t time.Time) *AppUpdate {
	au.mutation.SetExpiresAt(t)
	return au
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (au *AppUpdate) SetNillableExpiresAt(t *time.Time) *AppUpdate {
	if t != nil {
		au.SetExpiresAt(*t)
	}
	return au
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (au *AppUpdate) ClearExpiresAt() *AppUpdate {
	au.mutation.ClearExpiresAt()
	return au
}

// Mutation returns the AppMutation object of the builder.
func (au *AppUpdate) Mutation() *AppMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AppUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := app.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppUpdate) check() error {
	if v, ok := au.mutation.GetType(); ok {
		if err := app.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "App.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AppUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AppUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(app.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(app.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(app.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(app.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Token(); ok {
		_spec.SetField(app.FieldToken, field.TypeString, value)
	}
	if au.mutation.TokenCleared() {
		_spec.ClearField(app.FieldToken, field.TypeString)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(app.FieldType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Usable(); ok {
		_spec.SetField(app.FieldUsable, field.TypeBool, value)
	}
	if value, ok := au.mutation.ExpiresAt(); ok {
		_spec.SetField(app.FieldExpiresAt, field.TypeTime, value)
	}
	if au.mutation.ExpiresAtCleared() {
		_spec.ClearField(app.FieldExpiresAt, field.TypeTime)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppUpdateOne is the builder for updating a single App entity.
type AppUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AppUpdateOne) SetUpdatedAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AppUpdateOne) ClearUpdatedAt() *AppUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetName sets the "name" field.
func (auo *AppUpdateOne) SetName(s string) *AppUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableName(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AppUpdateOne) SetDescription(s string) *AppUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableDescription(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AppUpdateOne) ClearDescription() *AppUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetToken sets the "token" field.
func (auo *AppUpdateOne) SetToken(s string) *AppUpdateOne {
	auo.mutation.SetToken(s)
	return auo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableToken(s *string) *AppUpdateOne {
	if s != nil {
		auo.SetToken(*s)
	}
	return auo
}

// ClearToken clears the value of the "token" field.
func (auo *AppUpdateOne) ClearToken() *AppUpdateOne {
	auo.mutation.ClearToken()
	return auo
}

// SetType sets the "type" field.
func (auo *AppUpdateOne) SetType(a app.Type) *AppUpdateOne {
	auo.mutation.SetType(a)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableType(a *app.Type) *AppUpdateOne {
	if a != nil {
		auo.SetType(*a)
	}
	return auo
}

// SetUsable sets the "usable" field.
func (auo *AppUpdateOne) SetUsable(b bool) *AppUpdateOne {
	auo.mutation.SetUsable(b)
	return auo
}

// SetNillableUsable sets the "usable" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableUsable(b *bool) *AppUpdateOne {
	if b != nil {
		auo.SetUsable(*b)
	}
	return auo
}

// SetExpiresAt sets the "expires_at" field.
func (auo *AppUpdateOne) SetExpiresAt(t time.Time) *AppUpdateOne {
	auo.mutation.SetExpiresAt(t)
	return auo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (auo *AppUpdateOne) SetNillableExpiresAt(t *time.Time) *AppUpdateOne {
	if t != nil {
		auo.SetExpiresAt(*t)
	}
	return auo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (auo *AppUpdateOne) ClearExpiresAt() *AppUpdateOne {
	auo.mutation.ClearExpiresAt()
	return auo
}

// Mutation returns the AppMutation object of the builder.
func (auo *AppUpdateOne) Mutation() *AppMutation {
	return auo.mutation
}

// Where appends a list predicates to the AppUpdate builder.
func (auo *AppUpdateOne) Where(ps ...predicate.App) *AppUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppUpdateOne) Select(field string, fields ...string) *AppUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated App entity.
func (auo *AppUpdateOne) Save(ctx context.Context) (*App, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppUpdateOne) SaveX(ctx context.Context) *App {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AppUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := app.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppUpdateOne) check() error {
	if v, ok := auo.mutation.GetType(); ok {
		if err := app.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "App.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AppUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AppUpdateOne) sqlSave(ctx context.Context) (_node *App, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(app.Table, app.Columns, sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "App.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, app.FieldID)
		for _, f := range fields {
			if !app.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != app.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(app.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(app.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(app.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(app.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Token(); ok {
		_spec.SetField(app.FieldToken, field.TypeString, value)
	}
	if auo.mutation.TokenCleared() {
		_spec.ClearField(app.FieldToken, field.TypeString)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(app.FieldType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Usable(); ok {
		_spec.SetField(app.FieldUsable, field.TypeBool, value)
	}
	if value, ok := auo.mutation.ExpiresAt(); ok {
		_spec.SetField(app.FieldExpiresAt, field.TypeTime, value)
	}
	if auo.mutation.ExpiresAtCleared() {
		_spec.ClearField(app.FieldExpiresAt, field.TypeTime)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &App{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{app.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
