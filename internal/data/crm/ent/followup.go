// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
)

// 跟进记录
type FollowUp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 跟进类型
	Type followup.Type `json:"type,omitempty"`
	// 跟进内容
	Content string `json:"content,omitempty"`
	// 跟进时间
	FollowedAt time.Time `json:"followed_at,omitempty"`
	// 创建人
	CreatedBy int `json:"created_by,omitempty"`
	// 修改人
	UpdatedBy int `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FollowUpQuery when eager-loading is set.
	Edges               FollowUpEdges `json:"edges"`
	customer_follow_ups *int
	selectValues        sql.SelectValues
}

// FollowUpEdges holds the relations/edges for other nodes in the graph.
type FollowUpEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FollowUpEdges) CustomerOrErr() (*Customer, error) {
	if e.Customer != nil {
		return e.Customer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: customer.Label}
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FollowUp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case followup.FieldID, followup.FieldCreatedBy, followup.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case followup.FieldType, followup.FieldContent:
			values[i] = new(sql.NullString)
		case followup.FieldCreatedAt, followup.FieldUpdatedAt, followup.FieldFollowedAt:
			values[i] = new(sql.NullTime)
		case followup.ForeignKeys[0]: // customer_follow_ups
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FollowUp fields.
func (fu *FollowUp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case followup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fu.ID = int(value.Int64)
		case followup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fu.CreatedAt = value.Time
			}
		case followup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fu.UpdatedAt = value.Time
			}
		case followup.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fu.Type = followup.Type(value.String)
			}
		case followup.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				fu.Content = value.String
			}
		case followup.FieldFollowedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field followed_at", values[i])
			} else if value.Valid {
				fu.FollowedAt = value.Time
			}
		case followup.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				fu.CreatedBy = int(value.Int64)
			}
		case followup.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				fu.UpdatedBy = int(value.Int64)
			}
		case followup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field customer_follow_ups", value)
			} else if value.Valid {
				fu.customer_follow_ups = new(int)
				*fu.customer_follow_ups = int(value.Int64)
			}
		default:
			fu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FollowUp.
// This includes values selected through modifiers, order, etc.
func (fu *FollowUp) Value(name string) (ent.Value, error) {
	return fu.selectValues.Get(name)
}

// QueryCustomer queries the "customer" edge of the FollowUp entity.
func (fu *FollowUp) QueryCustomer() *CustomerQuery {
	return NewFollowUpClient(fu.config).QueryCustomer(fu)
}

// Update returns a builder for updating this FollowUp.
// Note that you need to call FollowUp.Unwrap() before calling this method if this FollowUp
// was returned from a transaction, and the transaction was committed or rolled back.
func (fu *FollowUp) Update() *FollowUpUpdateOne {
	return NewFollowUpClient(fu.config).UpdateOne(fu)
}

// Unwrap unwraps the FollowUp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fu *FollowUp) Unwrap() *FollowUp {
	_tx, ok := fu.config.driver.(*txDriver)
	if !ok {
		panic("ent: FollowUp is not a transactional entity")
	}
	fu.config.driver = _tx.drv
	return fu
}

// String implements the fmt.Stringer.
func (fu *FollowUp) String() string {
	var builder strings.Builder
	builder.WriteString("FollowUp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", fu.Type))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fu.Content)
	builder.WriteString(", ")
	builder.WriteString("followed_at=")
	builder.WriteString(fu.FollowedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", fu.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", fu.UpdatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// FollowUps is a parsable slice of FollowUp.
type FollowUps []*FollowUp
