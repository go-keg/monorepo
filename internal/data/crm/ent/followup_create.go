// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
)

// FollowUpCreate is the builder for creating a FollowUp entity.
type FollowUpCreate struct {
	config
	mutation *FollowUpMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fuc *FollowUpCreate) SetCreatedAt(t time.Time) *FollowUpCreate {
	fuc.mutation.SetCreatedAt(t)
	return fuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fuc *FollowUpCreate) SetNillableCreatedAt(t *time.Time) *FollowUpCreate {
	if t != nil {
		fuc.SetCreatedAt(*t)
	}
	return fuc
}

// SetUpdatedAt sets the "updated_at" field.
func (fuc *FollowUpCreate) SetUpdatedAt(t time.Time) *FollowUpCreate {
	fuc.mutation.SetUpdatedAt(t)
	return fuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fuc *FollowUpCreate) SetNillableUpdatedAt(t *time.Time) *FollowUpCreate {
	if t != nil {
		fuc.SetUpdatedAt(*t)
	}
	return fuc
}

// SetCreatedBy sets the "created_by" field.
func (fuc *FollowUpCreate) SetCreatedBy(i int) *FollowUpCreate {
	fuc.mutation.SetCreatedBy(i)
	return fuc
}

// SetUpdatedBy sets the "updated_by" field.
func (fuc *FollowUpCreate) SetUpdatedBy(i int) *FollowUpCreate {
	fuc.mutation.SetUpdatedBy(i)
	return fuc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuc *FollowUpCreate) SetNillableUpdatedBy(i *int) *FollowUpCreate {
	if i != nil {
		fuc.SetUpdatedBy(*i)
	}
	return fuc
}

// SetType sets the "type" field.
func (fuc *FollowUpCreate) SetType(f followup.Type) *FollowUpCreate {
	fuc.mutation.SetType(f)
	return fuc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuc *FollowUpCreate) SetNillableType(f *followup.Type) *FollowUpCreate {
	if f != nil {
		fuc.SetType(*f)
	}
	return fuc
}

// SetContent sets the "content" field.
func (fuc *FollowUpCreate) SetContent(s string) *FollowUpCreate {
	fuc.mutation.SetContent(s)
	return fuc
}

// SetFollowedAt sets the "followed_at" field.
func (fuc *FollowUpCreate) SetFollowedAt(t time.Time) *FollowUpCreate {
	fuc.mutation.SetFollowedAt(t)
	return fuc
}

// SetNillableFollowedAt sets the "followed_at" field if the given value is not nil.
func (fuc *FollowUpCreate) SetNillableFollowedAt(t *time.Time) *FollowUpCreate {
	if t != nil {
		fuc.SetFollowedAt(*t)
	}
	return fuc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (fuc *FollowUpCreate) SetCustomerID(id int) *FollowUpCreate {
	fuc.mutation.SetCustomerID(id)
	return fuc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (fuc *FollowUpCreate) SetCustomer(c *Customer) *FollowUpCreate {
	return fuc.SetCustomerID(c.ID)
}

// Mutation returns the FollowUpMutation object of the builder.
func (fuc *FollowUpCreate) Mutation() *FollowUpMutation {
	return fuc.mutation
}

// Save creates the FollowUp in the database.
func (fuc *FollowUpCreate) Save(ctx context.Context) (*FollowUp, error) {
	fuc.defaults()
	return withHooks(ctx, fuc.sqlSave, fuc.mutation, fuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fuc *FollowUpCreate) SaveX(ctx context.Context) *FollowUp {
	v, err := fuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuc *FollowUpCreate) Exec(ctx context.Context) error {
	_, err := fuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuc *FollowUpCreate) ExecX(ctx context.Context) {
	if err := fuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuc *FollowUpCreate) defaults() {
	if _, ok := fuc.mutation.CreatedAt(); !ok {
		v := followup.DefaultCreatedAt()
		fuc.mutation.SetCreatedAt(v)
	}
	if _, ok := fuc.mutation.UpdatedAt(); !ok {
		v := followup.DefaultUpdatedAt()
		fuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fuc.mutation.GetType(); !ok {
		v := followup.DefaultType
		fuc.mutation.SetType(v)
	}
	if _, ok := fuc.mutation.FollowedAt(); !ok {
		v := followup.DefaultFollowedAt()
		fuc.mutation.SetFollowedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuc *FollowUpCreate) check() error {
	if _, ok := fuc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "FollowUp.created_by"`)}
	}
	if _, ok := fuc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FollowUp.type"`)}
	}
	if v, ok := fuc.mutation.GetType(); ok {
		if err := followup.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FollowUp.type": %w`, err)}
		}
	}
	if _, ok := fuc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "FollowUp.content"`)}
	}
	if v, ok := fuc.mutation.Content(); ok {
		if err := followup.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "FollowUp.content": %w`, err)}
		}
	}
	if _, ok := fuc.mutation.FollowedAt(); !ok {
		return &ValidationError{Name: "followed_at", err: errors.New(`ent: missing required field "FollowUp.followed_at"`)}
	}
	if len(fuc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "FollowUp.customer"`)}
	}
	return nil
}

func (fuc *FollowUpCreate) sqlSave(ctx context.Context) (*FollowUp, error) {
	if err := fuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fuc.mutation.id = &_node.ID
	fuc.mutation.done = true
	return _node, nil
}

func (fuc *FollowUpCreate) createSpec() (*FollowUp, *sqlgraph.CreateSpec) {
	var (
		_node = &FollowUp{config: fuc.config}
		_spec = sqlgraph.NewCreateSpec(followup.Table, sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fuc.conflict
	if value, ok := fuc.mutation.CreatedAt(); ok {
		_spec.SetField(followup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fuc.mutation.UpdatedAt(); ok {
		_spec.SetField(followup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fuc.mutation.CreatedBy(); ok {
		_spec.SetField(followup.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := fuc.mutation.UpdatedBy(); ok {
		_spec.SetField(followup.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := fuc.mutation.GetType(); ok {
		_spec.SetField(followup.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := fuc.mutation.Content(); ok {
		_spec.SetField(followup.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := fuc.mutation.FollowedAt(); ok {
		_spec.SetField(followup.FieldFollowedAt, field.TypeTime, value)
		_node.FollowedAt = value
	}
	if nodes := fuc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   followup.CustomerTable,
			Columns: []string{followup.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_follow_ups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FollowUp.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FollowUpUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fuc *FollowUpCreate) OnConflict(opts ...sql.ConflictOption) *FollowUpUpsertOne {
	fuc.conflict = opts
	return &FollowUpUpsertOne{
		create: fuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FollowUp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fuc *FollowUpCreate) OnConflictColumns(columns ...string) *FollowUpUpsertOne {
	fuc.conflict = append(fuc.conflict, sql.ConflictColumns(columns...))
	return &FollowUpUpsertOne{
		create: fuc,
	}
}

type (
	// FollowUpUpsertOne is the builder for "upsert"-ing
	//  one FollowUp node.
	FollowUpUpsertOne struct {
		create *FollowUpCreate
	}

	// FollowUpUpsert is the "OnConflict" setter.
	FollowUpUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FollowUpUpsert) SetUpdatedAt(v time.Time) *FollowUpUpsert {
	u.Set(followup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FollowUpUpsert) UpdateUpdatedAt() *FollowUpUpsert {
	u.SetExcluded(followup.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *FollowUpUpsert) ClearUpdatedAt() *FollowUpUpsert {
	u.SetNull(followup.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FollowUpUpsert) SetUpdatedBy(v int) *FollowUpUpsert {
	u.Set(followup.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FollowUpUpsert) UpdateUpdatedBy() *FollowUpUpsert {
	u.SetExcluded(followup.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FollowUpUpsert) AddUpdatedBy(v int) *FollowUpUpsert {
	u.Add(followup.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *FollowUpUpsert) ClearUpdatedBy() *FollowUpUpsert {
	u.SetNull(followup.FieldUpdatedBy)
	return u
}

// SetType sets the "type" field.
func (u *FollowUpUpsert) SetType(v followup.Type) *FollowUpUpsert {
	u.Set(followup.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FollowUpUpsert) UpdateType() *FollowUpUpsert {
	u.SetExcluded(followup.FieldType)
	return u
}

// SetContent sets the "content" field.
func (u *FollowUpUpsert) SetContent(v string) *FollowUpUpsert {
	u.Set(followup.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FollowUpUpsert) UpdateContent() *FollowUpUpsert {
	u.SetExcluded(followup.FieldContent)
	return u
}

// SetFollowedAt sets the "followed_at" field.
func (u *FollowUpUpsert) SetFollowedAt(v time.Time) *FollowUpUpsert {
	u.Set(followup.FieldFollowedAt, v)
	return u
}

// UpdateFollowedAt sets the "followed_at" field to the value that was provided on create.
func (u *FollowUpUpsert) UpdateFollowedAt() *FollowUpUpsert {
	u.SetExcluded(followup.FieldFollowedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FollowUp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FollowUpUpsertOne) UpdateNewValues() *FollowUpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(followup.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(followup.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FollowUp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FollowUpUpsertOne) Ignore() *FollowUpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FollowUpUpsertOne) DoNothing() *FollowUpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FollowUpCreate.OnConflict
// documentation for more info.
func (u *FollowUpUpsertOne) Update(set func(*FollowUpUpsert)) *FollowUpUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FollowUpUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FollowUpUpsertOne) SetUpdatedAt(v time.Time) *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FollowUpUpsertOne) UpdateUpdatedAt() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *FollowUpUpsertOne) ClearUpdatedAt() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FollowUpUpsertOne) SetUpdatedBy(v int) *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FollowUpUpsertOne) AddUpdatedBy(v int) *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FollowUpUpsertOne) UpdateUpdatedBy() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *FollowUpUpsertOne) ClearUpdatedBy() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetType sets the "type" field.
func (u *FollowUpUpsertOne) SetType(v followup.Type) *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FollowUpUpsertOne) UpdateType() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateType()
	})
}

// SetContent sets the "content" field.
func (u *FollowUpUpsertOne) SetContent(v string) *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FollowUpUpsertOne) UpdateContent() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateContent()
	})
}

// SetFollowedAt sets the "followed_at" field.
func (u *FollowUpUpsertOne) SetFollowedAt(v time.Time) *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetFollowedAt(v)
	})
}

// UpdateFollowedAt sets the "followed_at" field to the value that was provided on create.
func (u *FollowUpUpsertOne) UpdateFollowedAt() *FollowUpUpsertOne {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateFollowedAt()
	})
}

// Exec executes the query.
func (u *FollowUpUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FollowUpCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FollowUpUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FollowUpUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FollowUpUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FollowUpCreateBulk is the builder for creating many FollowUp entities in bulk.
type FollowUpCreateBulk struct {
	config
	err      error
	builders []*FollowUpCreate
	conflict []sql.ConflictOption
}

// Save creates the FollowUp entities in the database.
func (fucb *FollowUpCreateBulk) Save(ctx context.Context) ([]*FollowUp, error) {
	if fucb.err != nil {
		return nil, fucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fucb.builders))
	nodes := make([]*FollowUp, len(fucb.builders))
	mutators := make([]Mutator, len(fucb.builders))
	for i := range fucb.builders {
		func(i int, root context.Context) {
			builder := fucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FollowUpMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fucb *FollowUpCreateBulk) SaveX(ctx context.Context) []*FollowUp {
	v, err := fucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fucb *FollowUpCreateBulk) Exec(ctx context.Context) error {
	_, err := fucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fucb *FollowUpCreateBulk) ExecX(ctx context.Context) {
	if err := fucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FollowUp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FollowUpUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fucb *FollowUpCreateBulk) OnConflict(opts ...sql.ConflictOption) *FollowUpUpsertBulk {
	fucb.conflict = opts
	return &FollowUpUpsertBulk{
		create: fucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FollowUp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fucb *FollowUpCreateBulk) OnConflictColumns(columns ...string) *FollowUpUpsertBulk {
	fucb.conflict = append(fucb.conflict, sql.ConflictColumns(columns...))
	return &FollowUpUpsertBulk{
		create: fucb,
	}
}

// FollowUpUpsertBulk is the builder for "upsert"-ing
// a bulk of FollowUp nodes.
type FollowUpUpsertBulk struct {
	create *FollowUpCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FollowUp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FollowUpUpsertBulk) UpdateNewValues() *FollowUpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(followup.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(followup.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FollowUp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FollowUpUpsertBulk) Ignore() *FollowUpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FollowUpUpsertBulk) DoNothing() *FollowUpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FollowUpCreateBulk.OnConflict
// documentation for more info.
func (u *FollowUpUpsertBulk) Update(set func(*FollowUpUpsert)) *FollowUpUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FollowUpUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FollowUpUpsertBulk) SetUpdatedAt(v time.Time) *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FollowUpUpsertBulk) UpdateUpdatedAt() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *FollowUpUpsertBulk) ClearUpdatedAt() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *FollowUpUpsertBulk) SetUpdatedBy(v int) *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *FollowUpUpsertBulk) AddUpdatedBy(v int) *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *FollowUpUpsertBulk) UpdateUpdatedBy() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *FollowUpUpsertBulk) ClearUpdatedBy() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetType sets the "type" field.
func (u *FollowUpUpsertBulk) SetType(v followup.Type) *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FollowUpUpsertBulk) UpdateType() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateType()
	})
}

// SetContent sets the "content" field.
func (u *FollowUpUpsertBulk) SetContent(v string) *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FollowUpUpsertBulk) UpdateContent() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateContent()
	})
}

// SetFollowedAt sets the "followed_at" field.
func (u *FollowUpUpsertBulk) SetFollowedAt(v time.Time) *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.SetFollowedAt(v)
	})
}

// UpdateFollowedAt sets the "followed_at" field to the value that was provided on create.
func (u *FollowUpUpsertBulk) UpdateFollowedAt() *FollowUpUpsertBulk {
	return u.Update(func(s *FollowUpUpsert) {
		s.UpdateFollowedAt()
	})
}

// Exec executes the query.
func (u *FollowUpUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FollowUpCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FollowUpCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FollowUpUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
