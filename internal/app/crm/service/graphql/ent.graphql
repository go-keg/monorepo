directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Contact implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  """
  创建人
  """
  createdBy: Int!
  """
  修改人
  """
  updatedBy: Int
  """
  联系人姓名
  """
  name: String!
  """
  职位
  """
  position: String
  """
  手机号
  """
  phone: String
  """
  邮箱
  """
  email: String
  customer: Customer!
}
"""
A connection to a list of items.
"""
type ContactConnection {
  """
  A list of edges.
  """
  edges: [ContactEdge]
  """
  A list of nodes.
  """
  nodes: [Contact]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactEdge {
  """
  The item at the end of the edge.
  """
  node: Contact
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
A connection to a list of items.
"""
type ContactList {
  """
  A list of nodes.
  """
  nodes: [Contact]
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
Ordering options for Contact connections
"""
input ContactOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Contacts.
  """
  field: ContactOrderField!
}
"""
Properties by which Contact connections can be ordered.
"""
enum ContactOrderField {
  createdAt
  updatedAt
}
"""
ContactWhereInput is used for filtering Contact objects.
Input was generated by ent.
"""
input ContactWhereInput {
  not: ContactWhereInput
  and: [ContactWhereInput!]
  or: [ContactWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  position field predicates
  """
  position: String
  positionNEQ: String
  positionIn: [String!]
  positionNotIn: [String!]
  positionGT: String
  positionGTE: String
  positionLT: String
  positionLTE: String
  positionContains: String
  positionHasPrefix: String
  positionHasSuffix: String
  positionIsNil: Boolean
  positionNotNil: Boolean
  positionEqualFold: String
  positionContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
}
type Contract implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  """
  创建人
  """
  createdBy: Int!
  """
  修改人
  """
  updatedBy: Int
  """
  合同编号
  """
  contractNo: String!
  """
  合同金额
  """
  amount: Float!
  """
  签订日期
  """
  signedAt: Time
  """
  到期日期
  """
  endAt: Time
  customer: Customer!
  payments: [Payment!]
}
"""
A connection to a list of items.
"""
type ContractConnection {
  """
  A list of edges.
  """
  edges: [ContractEdge]
  """
  A list of nodes.
  """
  nodes: [Contract]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContractEdge {
  """
  The item at the end of the edge.
  """
  node: Contract
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
A connection to a list of items.
"""
type ContractList {
  """
  A list of nodes.
  """
  nodes: [Contract]
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
Ordering options for Contract connections
"""
input ContractOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Contracts.
  """
  field: ContractOrderField!
}
"""
Properties by which Contract connections can be ordered.
"""
enum ContractOrderField {
  createdAt
  updatedAt
}
"""
ContractWhereInput is used for filtering Contract objects.
Input was generated by ent.
"""
input ContractWhereInput {
  not: ContractWhereInput
  and: [ContractWhereInput!]
  or: [ContractWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  contract_no field predicates
  """
  contractNo: String
  contractNoNEQ: String
  contractNoIn: [String!]
  contractNoNotIn: [String!]
  contractNoGT: String
  contractNoGTE: String
  contractNoLT: String
  contractNoLTE: String
  contractNoContains: String
  contractNoHasPrefix: String
  contractNoHasSuffix: String
  contractNoEqualFold: String
  contractNoContainsFold: String
  """
  amount field predicates
  """
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float
  """
  signed_at field predicates
  """
  signedAt: Time
  signedAtNEQ: Time
  signedAtIn: [Time!]
  signedAtNotIn: [Time!]
  signedAtGT: Time
  signedAtGTE: Time
  signedAtLT: Time
  signedAtLTE: Time
  signedAtIsNil: Boolean
  signedAtNotNil: Boolean
  """
  end_at field predicates
  """
  endAt: Time
  endAtNEQ: Time
  endAtIn: [Time!]
  endAtNotIn: [Time!]
  endAtGT: Time
  endAtGTE: Time
  endAtLT: Time
  endAtLTE: Time
  endAtIsNil: Boolean
  endAtNotNil: Boolean
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
  """
  payments edge predicates
  """
  hasPayments: Boolean
  hasPaymentsWith: [PaymentWhereInput!]
}
"""
CreateContactInput is used for create Contact object.
Input was generated by ent.
"""
input CreateContactInput {
  """
  联系人姓名
  """
  name: String!
  """
  职位
  """
  position: String
  """
  手机号
  """
  phone: String
  """
  邮箱
  """
  email: String
  customerID: ID!
}
"""
CreateContractInput is used for create Contract object.
Input was generated by ent.
"""
input CreateContractInput {
  """
  合同编号
  """
  contractNo: String!
  """
  合同金额
  """
  amount: Float
  """
  签订日期
  """
  signedAt: Time
  """
  到期日期
  """
  endAt: Time
  customerID: ID!
  paymentIDs: [ID!]
}
"""
CreateCustomerInput is used for create Customer object.
Input was generated by ent.
"""
input CreateCustomerInput {
  """
  客户名称
  """
  name: String!
  """
  所属行业
  """
  industry: String
  """
  客户来源
  """
  source: String
  """
  客户等级
  """
  level: String
  """
  自定义扩展字段
  """
  metadata: Map
}
"""
CreateFollowUpInput is used for create FollowUp object.
Input was generated by ent.
"""
input CreateFollowUpInput {
  """
  跟进类型
  """
  type: FollowUpType
  """
  跟进内容
  """
  content: String!
  """
  跟进时间
  """
  followedAt: Time
  customerID: ID!
}
"""
CreatePaymentInput is used for create Payment object.
Input was generated by ent.
"""
input CreatePaymentInput {
  """
  收款金额
  """
  amount: Float
  """
  收款日期
  """
  receivedAt: Time
  contractID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Customer implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  """
  创建人
  """
  createdBy: Int!
  """
  修改人
  """
  updatedBy: Int
  """
  客户名称
  """
  name: String!
  """
  所属行业
  """
  industry: String
  """
  客户来源
  """
  source: String
  """
  客户等级
  """
  level: String
  """
  自定义扩展字段
  """
  metadata: Map
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Contacts returned from the connection.
    """
    orderBy: ContactOrder

    """
    Filtering options for Contacts returned from the connection.
    """
    where: ContactWhereInput
  ): ContactConnection!
  contracts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Contracts returned from the connection.
    """
    orderBy: ContractOrder

    """
    Filtering options for Contracts returned from the connection.
    """
    where: ContractWhereInput
  ): ContractConnection!
  followUps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for FollowUps returned from the connection.
    """
    orderBy: FollowUpOrder

    """
    Filtering options for FollowUps returned from the connection.
    """
    where: FollowUpWhereInput
  ): FollowUpConnection!
}
"""
A connection to a list of items.
"""
type CustomerConnection {
  """
  A list of edges.
  """
  edges: [CustomerEdge]
  """
  A list of nodes.
  """
  nodes: [Customer]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CustomerEdge {
  """
  The item at the end of the edge.
  """
  node: Customer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
A connection to a list of items.
"""
type CustomerList {
  """
  A list of nodes.
  """
  nodes: [Customer]
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
Ordering options for Customer connections
"""
input CustomerOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Customers.
  """
  field: CustomerOrderField!
}
"""
Properties by which Customer connections can be ordered.
"""
enum CustomerOrderField {
  createdAt
  updatedAt
}
"""
CustomerWhereInput is used for filtering Customer objects.
Input was generated by ent.
"""
input CustomerWhereInput {
  not: CustomerWhereInput
  and: [CustomerWhereInput!]
  or: [CustomerWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  industry field predicates
  """
  industry: String
  industryNEQ: String
  industryIn: [String!]
  industryNotIn: [String!]
  industryGT: String
  industryGTE: String
  industryLT: String
  industryLTE: String
  industryContains: String
  industryHasPrefix: String
  industryHasSuffix: String
  industryIsNil: Boolean
  industryNotNil: Boolean
  industryEqualFold: String
  industryContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceIsNil: Boolean
  sourceNotNil: Boolean
  sourceEqualFold: String
  sourceContainsFold: String
  """
  level field predicates
  """
  level: String
  levelNEQ: String
  levelIn: [String!]
  levelNotIn: [String!]
  levelGT: String
  levelGTE: String
  levelLT: String
  levelLTE: String
  levelContains: String
  levelHasPrefix: String
  levelHasSuffix: String
  levelIsNil: Boolean
  levelNotNil: Boolean
  levelEqualFold: String
  levelContainsFold: String
  """
  contacts edge predicates
  """
  hasContacts: Boolean
  hasContactsWith: [ContactWhereInput!]
  """
  contracts edge predicates
  """
  hasContracts: Boolean
  hasContractsWith: [ContractWhereInput!]
  """
  follow_ups edge predicates
  """
  hasFollowUps: Boolean
  hasFollowUpsWith: [FollowUpWhereInput!]
}
type FollowUp implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  """
  创建人
  """
  createdBy: Int!
  """
  修改人
  """
  updatedBy: Int
  """
  跟进类型
  """
  type: FollowUpType!
  """
  跟进内容
  """
  content: String!
  """
  跟进时间
  """
  followedAt: Time!
  customer: Customer!
}
"""
A connection to a list of items.
"""
type FollowUpConnection {
  """
  A list of edges.
  """
  edges: [FollowUpEdge]
  """
  A list of nodes.
  """
  nodes: [FollowUp]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FollowUpEdge {
  """
  The item at the end of the edge.
  """
  node: FollowUp
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
A connection to a list of items.
"""
type FollowUpList {
  """
  A list of nodes.
  """
  nodes: [FollowUp]
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
Ordering options for FollowUp connections
"""
input FollowUpOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order FollowUps.
  """
  field: FollowUpOrderField!
}
"""
Properties by which FollowUp connections can be ordered.
"""
enum FollowUpOrderField {
  createdAt
  updatedAt
}
"""
FollowUpType is enum for the field type
"""
enum FollowUpType @goModel(model: "github.com/go-keg/monorepo/internal/data/crm/ent/followup.Type") {
  call
  meeting
  email
  visit
  other
}
"""
FollowUpWhereInput is used for filtering FollowUp objects.
Input was generated by ent.
"""
input FollowUpWhereInput {
  not: FollowUpWhereInput
  and: [FollowUpWhereInput!]
  or: [FollowUpWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  type field predicates
  """
  type: FollowUpType
  typeNEQ: FollowUpType
  typeIn: [FollowUpType!]
  typeNotIn: [FollowUpType!]
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """
  followed_at field predicates
  """
  followedAt: Time
  followedAtNEQ: Time
  followedAtIn: [Time!]
  followedAtNotIn: [Time!]
  followedAtGT: Time
  followedAtGTE: Time
  followedAtLT: Time
  followedAtLTE: Time
  """
  customer edge predicates
  """
  hasCustomer: Boolean
  hasCustomerWith: [CustomerWhereInput!]
}
"""
The builtin Map type
"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/go-keg/monorepo/internal/data/crm/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Payment implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  """
  创建人
  """
  createdBy: Int!
  """
  修改人
  """
  updatedBy: Int
  """
  收款金额
  """
  amount: Float!
  """
  收款日期
  """
  receivedAt: Time
  contract: Contract!
}
"""
Ordering options for Payment connections
"""
input PaymentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Payments.
  """
  field: PaymentOrderField!
}
"""
Properties by which Payment connections can be ordered.
"""
enum PaymentOrderField {
  createdAt
  updatedAt
}
"""
PaymentWhereInput is used for filtering Payment objects.
Input was generated by ent.
"""
input PaymentWhereInput {
  not: PaymentWhereInput
  and: [PaymentWhereInput!]
  or: [PaymentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  created_by field predicates
  """
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """
  updated_by field predicates
  """
  updatedBy: Int
  updatedByNEQ: Int
  updatedByIn: [Int!]
  updatedByNotIn: [Int!]
  updatedByGT: Int
  updatedByGTE: Int
  updatedByLT: Int
  updatedByLTE: Int
  updatedByIsNil: Boolean
  updatedByNotNil: Boolean
  """
  amount field predicates
  """
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float
  """
  received_at field predicates
  """
  receivedAt: Time
  receivedAtNEQ: Time
  receivedAtIn: [Time!]
  receivedAtNotIn: [Time!]
  receivedAtGT: Time
  receivedAtGTE: Time
  receivedAtLT: Time
  receivedAtLTE: Time
  receivedAtIsNil: Boolean
  receivedAtNotNil: Boolean
  """
  contract edge predicates
  """
  hasContract: Boolean
  hasContractWith: [ContractWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  customers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Customers returned from the connection.
    """
    orderBy: CustomerOrder

    """
    Filtering options for Customers returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerConnection!
  customerList(
    """
    The number of elements to skip from the start of the list.
    """
    offset: Int! = 0

    """
    The maximum number of elements to return. This value cannot be negative.
    """
    limit: Int! = 10

    """
    Ordering options for customer returned from the connection.
    """
    orderBy: CustomerOrder

    """
    Filtering options for customer returned from the connection.
    """
    where: CustomerWhereInput
  ): CustomerList!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateContactInput is used for update Contact object.
Input was generated by ent.
"""
input UpdateContactInput {
  """
  联系人姓名
  """
  name: String
  """
  职位
  """
  position: String
  clearPosition: Boolean
  """
  手机号
  """
  phone: String
  clearPhone: Boolean
  """
  邮箱
  """
  email: String
  clearEmail: Boolean
}
"""
UpdateContractInput is used for update Contract object.
Input was generated by ent.
"""
input UpdateContractInput {
  """
  合同编号
  """
  contractNo: String
  """
  合同金额
  """
  amount: Float
  """
  签订日期
  """
  signedAt: Time
  clearSignedAt: Boolean
  """
  到期日期
  """
  endAt: Time
  clearEndAt: Boolean
  addPaymentIDs: [ID!]
  removePaymentIDs: [ID!]
  clearPayments: Boolean
}
"""
UpdateCustomerInput is used for update Customer object.
Input was generated by ent.
"""
input UpdateCustomerInput {
  """
  客户名称
  """
  name: String
  """
  所属行业
  """
  industry: String
  clearIndustry: Boolean
  """
  客户来源
  """
  source: String
  clearSource: Boolean
  """
  客户等级
  """
  level: String
  clearLevel: Boolean
  """
  自定义扩展字段
  """
  metadata: Map
  clearMetadata: Boolean
}
"""
UpdateFollowUpInput is used for update FollowUp object.
Input was generated by ent.
"""
input UpdateFollowUpInput {
  """
  跟进类型
  """
  type: FollowUpType
  """
  跟进内容
  """
  content: String
  """
  跟进时间
  """
  followedAt: Time
}
"""
UpdatePaymentInput is used for update Payment object.
Input was generated by ent.
"""
input UpdatePaymentInput {
  """
  收款金额
  """
  amount: Float
  """
  收款日期
  """
  receivedAt: Time
  clearReceivedAt: Boolean
}
