// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-keg/monorepo/internal/data/account/ent"
)

type CaptchaReply struct {
	ID      string `json:"id"`
	Captcha string `json:"captcha"`
}

type LoginReply struct {
	Token string `json:"token"`
	// 过期时间（秒）
	Exp  int       `json:"exp"`
	User *ent.User `json:"user"`
}

type UpdateProfileInput struct {
	Nickname *string `json:"nickname,omitempty"`
	Avatar   *string `json:"avatar,omitempty"`
	Mobile   *string `json:"mobile,omitempty"`
}

// 用户角色类型
type UserRole string

const (
	// 租户成员
	UserRoleTenantUser UserRole = "TenantUser"
	// 租户Owner
	UserRoleTenantOwner UserRole = "TenantOwner"
	// 系统后台管理员
	UserRoleSystemAdmin UserRole = "SystemAdmin"
)

var AllUserRole = []UserRole{
	UserRoleTenantUser,
	UserRoleTenantOwner,
	UserRoleSystemAdmin,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleTenantUser, UserRoleTenantOwner, UserRoleSystemAdmin:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 验证码类型
type VerifyCodeType string

const (
	// 忘记密码
	VerifyCodeTypeForgetPassword VerifyCodeType = "ForgetPassword"
	// 注册验证
	VerifyCodeTypeRegister VerifyCodeType = "Register"
)

var AllVerifyCodeType = []VerifyCodeType{
	VerifyCodeTypeForgetPassword,
	VerifyCodeTypeRegister,
}

func (e VerifyCodeType) IsValid() bool {
	switch e {
	case VerifyCodeTypeForgetPassword, VerifyCodeTypeRegister:
		return true
	}
	return false
}

func (e VerifyCodeType) String() string {
	return string(e)
}

func (e *VerifyCodeType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VerifyCodeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VerifyCodeType", str)
	}
	return nil
}

func (e VerifyCodeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
