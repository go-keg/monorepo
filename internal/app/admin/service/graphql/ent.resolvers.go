package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/go-keg/monorepo/internal/data/example/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return nil, fmt.Errorf("not implemented")
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return nil, fmt.Errorf("not implemented")
}

// OperationLogs is the resolver for the operationLogs field.
func (r *queryResolver) OperationLogs(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.OperationLogOrder, where *ent.OperationLogWhereInput) (*ent.OperationLogConnection, error) {
	return r.ent.OperationLog.Query().Paginate(ctx, after, first, before, last, ent.WithOperationLogFilter(where.Filter), ent.WithOperationLogOrder(orderBy))
}

// Permissions is the resolver for the permissions field.
func (r *queryResolver) Permissions(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.PermissionOrder, where *ent.PermissionWhereInput) (*ent.PermissionConnection, error) {
	return r.ent.Permission.Query().Paginate(ctx, after, first, before, last, ent.WithPermissionFilter(where.Filter), ent.WithPermissionOrder(orderBy))
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.RoleOrder, where *ent.RoleWhereInput) (*ent.RoleConnection, error) {
	return r.ent.Role.Query().Paginate(ctx, after, first, before, last, ent.WithRoleFilter(where.Filter), ent.WithRoleOrder(orderBy))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.ent.User.Query().Paginate(ctx, after, first, before, last, ent.WithUserFilter(where.Filter), ent.WithUserOrder(orderBy))
}

// OperationLogList is the resolver for the operationLogList field.
func (r *queryResolver) OperationLogList(ctx context.Context, offset int, limit int, orderBy *ent.OperationLogOrder, where *ent.OperationLogWhereInput) (*ent.OperationLogConnection, error) {
	return r.ent.OperationLog.Query().List(ctx, offset, limit, ent.WithOperationLogFilter(where.Filter), ent.WithOperationLogOrder(orderBy))
}

// PermissionList is the resolver for the permissionList field.
func (r *queryResolver) PermissionList(ctx context.Context, offset int, limit int, orderBy *ent.PermissionOrder, where *ent.PermissionWhereInput) (*ent.PermissionConnection, error) {
	return r.ent.Permission.Query().List(ctx, offset, limit, ent.WithPermissionFilter(where.Filter), ent.WithPermissionOrder(orderBy))
}

// RoleList is the resolver for the roleList field.
func (r *queryResolver) RoleList(ctx context.Context, offset int, limit int, orderBy *ent.RoleOrder, where *ent.RoleWhereInput) (*ent.RoleConnection, error) {
	return r.ent.Role.Query().List(ctx, offset, limit, ent.WithRoleFilter(where.Filter), ent.WithRoleOrder(orderBy))
}

// UserList is the resolver for the userList field.
func (r *queryResolver) UserList(ctx context.Context, offset int, limit int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.ent.User.Query().List(ctx, offset, limit, ent.WithUserFilter(where.Filter), ent.WithUserOrder(orderBy))
}

// Permission returns PermissionResolver implementation.
func (r *Resolver) Permission() PermissionResolver { return &permissionResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type permissionResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
