// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/membership"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
	"github.com/go-keg/monorepo/internal/data/account/ent/user"
)

// TenantUserQuery is the builder for querying TenantUser entities.
type TenantUserQuery struct {
	config
	ctx                  *QueryContext
	order                []tenantuser.OrderOption
	inters               []Interceptor
	predicates           []predicate.TenantUser
	withUser             *UserQuery
	withTenant           *TenantQuery
	withRoles            *TenantRoleQuery
	withMemberships      *MembershipQuery
	loadTotal            []func(context.Context, []*TenantUser) error
	modifiers            []func(*sql.Selector)
	withNamedRoles       map[string]*TenantRoleQuery
	withNamedMemberships map[string]*MembershipQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TenantUserQuery builder.
func (tuq *TenantUserQuery) Where(ps ...predicate.TenantUser) *TenantUserQuery {
	tuq.predicates = append(tuq.predicates, ps...)
	return tuq
}

// Limit the number of records to be returned by this query.
func (tuq *TenantUserQuery) Limit(limit int) *TenantUserQuery {
	tuq.ctx.Limit = &limit
	return tuq
}

// Offset to start from.
func (tuq *TenantUserQuery) Offset(offset int) *TenantUserQuery {
	tuq.ctx.Offset = &offset
	return tuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tuq *TenantUserQuery) Unique(unique bool) *TenantUserQuery {
	tuq.ctx.Unique = &unique
	return tuq
}

// Order specifies how the records should be ordered.
func (tuq *TenantUserQuery) Order(o ...tenantuser.OrderOption) *TenantUserQuery {
	tuq.order = append(tuq.order, o...)
	return tuq
}

// QueryUser chains the current query on the "user" edge.
func (tuq *TenantUserQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenantuser.Table, tenantuser.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tenantuser.UserTable, tenantuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTenant chains the current query on the "tenant" edge.
func (tuq *TenantUserQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenantuser.Table, tenantuser.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tenantuser.TenantTable, tenantuser.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoles chains the current query on the "roles" edge.
func (tuq *TenantUserQuery) QueryRoles() *TenantRoleQuery {
	query := (&TenantRoleClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenantuser.Table, tenantuser.FieldID, selector),
			sqlgraph.To(tenantrole.Table, tenantrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tenantuser.RolesTable, tenantuser.RolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMemberships chains the current query on the "memberships" edge.
func (tuq *TenantUserQuery) QueryMemberships() *MembershipQuery {
	query := (&MembershipClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tenantuser.Table, tenantuser.FieldID, selector),
			sqlgraph.To(membership.Table, membership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenantuser.MembershipsTable, tenantuser.MembershipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TenantUser entity from the query.
// Returns a *NotFoundError when no TenantUser was found.
func (tuq *TenantUserQuery) First(ctx context.Context) (*TenantUser, error) {
	nodes, err := tuq.Limit(1).All(setContextOp(ctx, tuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tenantuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tuq *TenantUserQuery) FirstX(ctx context.Context) *TenantUser {
	node, err := tuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TenantUser ID from the query.
// Returns a *NotFoundError when no TenantUser ID was found.
func (tuq *TenantUserQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tuq.Limit(1).IDs(setContextOp(ctx, tuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tenantuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tuq *TenantUserQuery) FirstIDX(ctx context.Context) int {
	id, err := tuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TenantUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TenantUser entity is found.
// Returns a *NotFoundError when no TenantUser entities are found.
func (tuq *TenantUserQuery) Only(ctx context.Context) (*TenantUser, error) {
	nodes, err := tuq.Limit(2).All(setContextOp(ctx, tuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tenantuser.Label}
	default:
		return nil, &NotSingularError{tenantuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tuq *TenantUserQuery) OnlyX(ctx context.Context) *TenantUser {
	node, err := tuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TenantUser ID in the query.
// Returns a *NotSingularError when more than one TenantUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (tuq *TenantUserQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tuq.Limit(2).IDs(setContextOp(ctx, tuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tenantuser.Label}
	default:
		err = &NotSingularError{tenantuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tuq *TenantUserQuery) OnlyIDX(ctx context.Context) int {
	id, err := tuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TenantUsers.
func (tuq *TenantUserQuery) All(ctx context.Context) ([]*TenantUser, error) {
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryAll)
	if err := tuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TenantUser, *TenantUserQuery]()
	return withInterceptors[[]*TenantUser](ctx, tuq, qr, tuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tuq *TenantUserQuery) AllX(ctx context.Context) []*TenantUser {
	nodes, err := tuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TenantUser IDs.
func (tuq *TenantUserQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tuq.ctx.Unique == nil && tuq.path != nil {
		tuq.Unique(true)
	}
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryIDs)
	if err = tuq.Select(tenantuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tuq *TenantUserQuery) IDsX(ctx context.Context) []int {
	ids, err := tuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tuq *TenantUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryCount)
	if err := tuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tuq, querierCount[*TenantUserQuery](), tuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tuq *TenantUserQuery) CountX(ctx context.Context) int {
	count, err := tuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tuq *TenantUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryExist)
	switch _, err := tuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tuq *TenantUserQuery) ExistX(ctx context.Context) bool {
	exist, err := tuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TenantUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tuq *TenantUserQuery) Clone() *TenantUserQuery {
	if tuq == nil {
		return nil
	}
	return &TenantUserQuery{
		config:          tuq.config,
		ctx:             tuq.ctx.Clone(),
		order:           append([]tenantuser.OrderOption{}, tuq.order...),
		inters:          append([]Interceptor{}, tuq.inters...),
		predicates:      append([]predicate.TenantUser{}, tuq.predicates...),
		withUser:        tuq.withUser.Clone(),
		withTenant:      tuq.withTenant.Clone(),
		withRoles:       tuq.withRoles.Clone(),
		withMemberships: tuq.withMemberships.Clone(),
		// clone intermediate query.
		sql:       tuq.sql.Clone(),
		path:      tuq.path,
		modifiers: append([]func(*sql.Selector){}, tuq.modifiers...),
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TenantUserQuery) WithUser(opts ...func(*UserQuery)) *TenantUserQuery {
	query := (&UserClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withUser = query
	return tuq
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TenantUserQuery) WithTenant(opts ...func(*TenantQuery)) *TenantUserQuery {
	query := (&TenantClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withTenant = query
	return tuq
}

// WithRoles tells the query-builder to eager-load the nodes that are connected to
// the "roles" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TenantUserQuery) WithRoles(opts ...func(*TenantRoleQuery)) *TenantUserQuery {
	query := (&TenantRoleClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withRoles = query
	return tuq
}

// WithMemberships tells the query-builder to eager-load the nodes that are connected to
// the "memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TenantUserQuery) WithMemberships(opts ...func(*MembershipQuery)) *TenantUserQuery {
	query := (&MembershipClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withMemberships = query
	return tuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TenantUser.Query().
//		GroupBy(tenantuser.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tuq *TenantUserQuery) GroupBy(field string, fields ...string) *TenantUserGroupBy {
	tuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TenantUserGroupBy{build: tuq}
	grbuild.flds = &tuq.ctx.Fields
	grbuild.label = tenantuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID int `json:"tenant_id,omitempty"`
//	}
//
//	client.TenantUser.Query().
//		Select(tenantuser.FieldTenantID).
//		Scan(ctx, &v)
func (tuq *TenantUserQuery) Select(fields ...string) *TenantUserSelect {
	tuq.ctx.Fields = append(tuq.ctx.Fields, fields...)
	sbuild := &TenantUserSelect{TenantUserQuery: tuq}
	sbuild.label = tenantuser.Label
	sbuild.flds, sbuild.scan = &tuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TenantUserSelect configured with the given aggregations.
func (tuq *TenantUserQuery) Aggregate(fns ...AggregateFunc) *TenantUserSelect {
	return tuq.Select().Aggregate(fns...)
}

func (tuq *TenantUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tuq); err != nil {
				return err
			}
		}
	}
	for _, f := range tuq.ctx.Fields {
		if !tenantuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tuq.path != nil {
		prev, err := tuq.path(ctx)
		if err != nil {
			return err
		}
		tuq.sql = prev
	}
	return nil
}

func (tuq *TenantUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TenantUser, error) {
	var (
		nodes       = []*TenantUser{}
		_spec       = tuq.querySpec()
		loadedTypes = [4]bool{
			tuq.withUser != nil,
			tuq.withTenant != nil,
			tuq.withRoles != nil,
			tuq.withMemberships != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TenantUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TenantUser{config: tuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tuq.modifiers) > 0 {
		_spec.Modifiers = tuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tuq.withUser; query != nil {
		if err := tuq.loadUser(ctx, query, nodes, nil,
			func(n *TenantUser, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := tuq.withTenant; query != nil {
		if err := tuq.loadTenant(ctx, query, nodes, nil,
			func(n *TenantUser, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := tuq.withRoles; query != nil {
		if err := tuq.loadRoles(ctx, query, nodes,
			func(n *TenantUser) { n.Edges.Roles = []*TenantRole{} },
			func(n *TenantUser, e *TenantRole) { n.Edges.Roles = append(n.Edges.Roles, e) }); err != nil {
			return nil, err
		}
	}
	if query := tuq.withMemberships; query != nil {
		if err := tuq.loadMemberships(ctx, query, nodes,
			func(n *TenantUser) { n.Edges.Memberships = []*Membership{} },
			func(n *TenantUser, e *Membership) { n.Edges.Memberships = append(n.Edges.Memberships, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tuq.withNamedRoles {
		if err := tuq.loadRoles(ctx, query, nodes,
			func(n *TenantUser) { n.appendNamedRoles(name) },
			func(n *TenantUser, e *TenantRole) { n.appendNamedRoles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tuq.withNamedMemberships {
		if err := tuq.loadMemberships(ctx, query, nodes,
			func(n *TenantUser) { n.appendNamedMemberships(name) },
			func(n *TenantUser, e *Membership) { n.appendNamedMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range tuq.loadTotal {
		if err := tuq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tuq *TenantUserQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*TenantUser, init func(*TenantUser), assign func(*TenantUser, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TenantUser)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tuq *TenantUserQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*TenantUser, init func(*TenantUser), assign func(*TenantUser, *Tenant)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TenantUser)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tuq *TenantUserQuery) loadRoles(ctx context.Context, query *TenantRoleQuery, nodes []*TenantUser, init func(*TenantUser), assign func(*TenantUser, *TenantRole)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TenantUser)
	nids := make(map[int]map[*TenantUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(tenantuser.RolesTable)
		s.Join(joinT).On(s.C(tenantrole.FieldID), joinT.C(tenantuser.RolesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(tenantuser.RolesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(tenantuser.RolesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*TenantUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*TenantRole](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "roles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tuq *TenantUserQuery) loadMemberships(ctx context.Context, query *MembershipQuery, nodes []*TenantUser, init func(*TenantUser), assign func(*TenantUser, *Membership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TenantUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(membership.FieldTenantUserID)
	}
	query.Where(predicate.Membership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tenantuser.MembershipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TenantUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tenant_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tuq *TenantUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tuq.querySpec()
	if len(tuq.modifiers) > 0 {
		_spec.Modifiers = tuq.modifiers
	}
	_spec.Node.Columns = tuq.ctx.Fields
	if len(tuq.ctx.Fields) > 0 {
		_spec.Unique = tuq.ctx.Unique != nil && *tuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tuq.driver, _spec)
}

func (tuq *TenantUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tenantuser.Table, tenantuser.Columns, sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt))
	_spec.From = tuq.sql
	if unique := tuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tuq.path != nil {
		_spec.Unique = true
	}
	if fields := tuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantuser.FieldID)
		for i := range fields {
			if fields[i] != tenantuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tuq.withUser != nil {
			_spec.Node.AddColumnOnce(tenantuser.FieldUserID)
		}
		if tuq.withTenant != nil {
			_spec.Node.AddColumnOnce(tenantuser.FieldTenantID)
		}
	}
	if ps := tuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tuq *TenantUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tuq.driver.Dialect())
	t1 := builder.Table(tenantuser.Table)
	columns := tuq.ctx.Fields
	if len(columns) == 0 {
		columns = tenantuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tuq.sql != nil {
		selector = tuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tuq.ctx.Unique != nil && *tuq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tuq.modifiers {
		m(selector)
	}
	for _, p := range tuq.predicates {
		p(selector)
	}
	for _, p := range tuq.order {
		p(selector)
	}
	if offset := tuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tuq *TenantUserQuery) Modify(modifiers ...func(s *sql.Selector)) *TenantUserSelect {
	tuq.modifiers = append(tuq.modifiers, modifiers...)
	return tuq.Select()
}

// WithNamedRoles tells the query-builder to eager-load the nodes that are connected to the "roles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tuq *TenantUserQuery) WithNamedRoles(name string, opts ...func(*TenantRoleQuery)) *TenantUserQuery {
	query := (&TenantRoleClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tuq.withNamedRoles == nil {
		tuq.withNamedRoles = make(map[string]*TenantRoleQuery)
	}
	tuq.withNamedRoles[name] = query
	return tuq
}

// WithNamedMemberships tells the query-builder to eager-load the nodes that are connected to the "memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tuq *TenantUserQuery) WithNamedMemberships(name string, opts ...func(*MembershipQuery)) *TenantUserQuery {
	query := (&MembershipClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tuq.withNamedMemberships == nil {
		tuq.withNamedMemberships = make(map[string]*MembershipQuery)
	}
	tuq.withNamedMemberships[name] = query
	return tuq
}

// TenantUserGroupBy is the group-by builder for TenantUser entities.
type TenantUserGroupBy struct {
	selector
	build *TenantUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tugb *TenantUserGroupBy) Aggregate(fns ...AggregateFunc) *TenantUserGroupBy {
	tugb.fns = append(tugb.fns, fns...)
	return tugb
}

// Scan applies the selector query and scans the result into the given value.
func (tugb *TenantUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tugb.build.ctx, ent.OpQueryGroupBy)
	if err := tugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenantUserQuery, *TenantUserGroupBy](ctx, tugb.build, tugb, tugb.build.inters, v)
}

func (tugb *TenantUserGroupBy) sqlScan(ctx context.Context, root *TenantUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tugb.fns))
	for _, fn := range tugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tugb.flds)+len(tugb.fns))
		for _, f := range *tugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TenantUserSelect is the builder for selecting fields of TenantUser entities.
type TenantUserSelect struct {
	*TenantUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tus *TenantUserSelect) Aggregate(fns ...AggregateFunc) *TenantUserSelect {
	tus.fns = append(tus.fns, fns...)
	return tus
}

// Scan applies the selector query and scans the result into the given value.
func (tus *TenantUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tus.ctx, ent.OpQuerySelect)
	if err := tus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TenantUserQuery, *TenantUserSelect](ctx, tus.TenantUserQuery, tus, tus.inters, v)
}

func (tus *TenantUserSelect) sqlScan(ctx context.Context, root *TenantUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tus.fns))
	for _, fn := range tus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tus *TenantUserSelect) Modify(modifiers ...func(s *sql.Selector)) *TenantUserSelect {
	tus.modifiers = append(tus.modifiers, modifiers...)
	return tus
}
