package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70-dev

import (
	"context"

	"github.com/go-keg/monorepo/internal/app/account/service/graphql/dataloader"
	"github.com/go-keg/monorepo/internal/data/account/ent"
	"github.com/go-keg/monorepo/internal/pkg/utils"
	"github.com/samber/lo"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	if input.Password != nil {
		input.Password = lo.ToPtr(utils.GeneratePassword(*input.Password))
	}
	return r.ent.User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	if input.Password != nil {
		input.Password = lo.ToPtr(utils.GeneratePassword(*input.Password))
	}
	return r.ent.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (bool, error) {
	err := r.ent.User.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input ent.CreatePermissionInput) (*ent.Permission, error) {
	return r.ent.Permission.Create().SetInput(input).Save(ctx)
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, id int, input ent.UpdatePermissionInput) (*ent.Permission, error) {
	return r.ent.Permission.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, id int) (bool, error) {
	err := r.ent.Permission.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input ent.CreateTenantInput) (*ent.Tenant, error) {
	return r.ent.Tenant.Create().SetInput(input).Save(ctx)
}

// UpdateTenant is the resolver for the updateTenant field.
func (r *mutationResolver) UpdateTenant(ctx context.Context, id int, input ent.UpdateTenantInput) (*ent.Tenant, error) {
	return r.ent.Tenant.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteTenant is the resolver for the deleteTenant field.
func (r *mutationResolver) DeleteTenant(ctx context.Context, id int) (bool, error) {
	err := r.ent.Tenant.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// ChildrenCount is the resolver for the childrenCount field.
func (r *permissionResolver) ChildrenCount(ctx context.Context, obj *ent.Permission) (int, error) {
	return dataloader.For(ctx).GetPermissionChildrenCount(ctx, obj.ID)
}
