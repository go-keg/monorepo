// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (c *Contact) Customer(ctx context.Context) (*Customer, error) {
	result, err := c.Edges.CustomerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCustomer().Only(ctx)
	}
	return result, err
}

func (c *Contract) Customer(ctx context.Context) (*Customer, error) {
	result, err := c.Edges.CustomerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryCustomer().Only(ctx)
	}
	return result, err
}

func (c *Contract) Payments(ctx context.Context) (result []*Payment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedPayments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.PaymentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryPayments().All(ctx)
	}
	return result, err
}

func (c *Customer) Contacts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ContactOrder, where *ContactWhereInput,
) (*ContactConnection, error) {
	opts := []ContactPaginateOption{
		WithContactOrder(orderBy),
		WithContactFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[0][alias]
	if nodes, err := c.NamedContacts(alias); err == nil || hasTotalCount {
		pager, err := newContactPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ContactConnection{Edges: []*ContactEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryContacts().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Customer) Contracts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *ContractOrder, where *ContractWhereInput,
) (*ContractConnection, error) {
	opts := []ContractPaginateOption{
		WithContractOrder(orderBy),
		WithContractFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[1][alias]
	if nodes, err := c.NamedContracts(alias); err == nil || hasTotalCount {
		pager, err := newContractPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &ContractConnection{Edges: []*ContractEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryContracts().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Customer) FollowUps(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *FollowUpOrder, where *FollowUpWhereInput,
) (*FollowUpConnection, error) {
	opts := []FollowUpPaginateOption{
		WithFollowUpOrder(orderBy),
		WithFollowUpFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[2][alias]
	if nodes, err := c.NamedFollowUps(alias); err == nil || hasTotalCount {
		pager, err := newFollowUpPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FollowUpConnection{Edges: []*FollowUpEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryFollowUps().Paginate(ctx, after, first, before, last, opts...)
}

func (fu *FollowUp) Customer(ctx context.Context) (*Customer, error) {
	result, err := fu.Edges.CustomerOrErr()
	if IsNotLoaded(err) {
		result, err = fu.QueryCustomer().Only(ctx)
	}
	return result, err
}

func (pa *Payment) Contract(ctx context.Context) (*Contract, error) {
	result, err := pa.Edges.ContractOrErr()
	if IsNotLoaded(err) {
		result, err = pa.QueryContract().Only(ctx)
	}
	return result, err
}
