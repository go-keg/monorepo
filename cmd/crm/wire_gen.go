// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-keg/monorepo/internal/app/crm/conf"
	"github.com/go-keg/monorepo/internal/app/crm/data"
	"github.com/go-keg/monorepo/internal/app/crm/job"
	"github.com/go-keg/monorepo/internal/app/crm/schedule"
	"github.com/go-keg/monorepo/internal/app/crm/server"
	"github.com/go-keg/monorepo/internal/app/crm/service/graphql"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

func initApp(crm *conf.Crm, logger log.Logger) (*kratos.App, func(), error) {
	client, err := data.NewEntClient(crm)
	if err != nil {
		return nil, nil, err
	}
	executableSchema := graphql.NewSchema(logger, client)
	httpServer := server.NewHTTPServer(crm, logger, executableSchema)
	jobJob := job.NewJob(logger)
	scheduleSchedule := schedule.NewSchedule(logger, client)
	app := newApp(logger, httpServer, jobJob, scheduleSchedule)
	return app, func() {
	}, nil
}
