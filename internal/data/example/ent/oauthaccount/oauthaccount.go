// Code generated by ent, DO NOT EDIT.

package oauthaccount

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the oauthaccount type in the database.
	Label = "oauth_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldProviderUserID holds the string denoting the provider_user_id field in the database.
	FieldProviderUserID = "provider_user_id"
	// FieldAccessToken holds the string denoting the access_token field in the database.
	FieldAccessToken = "access_token"
	// FieldRefreshToken holds the string denoting the refresh_token field in the database.
	FieldRefreshToken = "refresh_token"
	// FieldTokenExpiry holds the string denoting the token_expiry field in the database.
	FieldTokenExpiry = "token_expiry"
	// FieldProfile holds the string denoting the profile field in the database.
	FieldProfile = "profile"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the oauthaccount in the database.
	Table = "oauth_accounts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "oauth_accounts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for oauthaccount fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldProvider,
	FieldProviderUserID,
	FieldAccessToken,
	FieldRefreshToken,
	FieldTokenExpiry,
	FieldProfile,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Provider defines the type for the "provider" enum field.
type Provider string

// Provider values.
const (
	ProviderGoogle Provider = "google"
)

func (pr Provider) String() string {
	return string(pr)
}

// ProviderValidator is a validator for the "provider" field enum values. It is called by the builders before save.
func ProviderValidator(pr Provider) error {
	switch pr {
	case ProviderGoogle:
		return nil
	default:
		return fmt.Errorf("oauthaccount: invalid enum value for provider field: %q", pr)
	}
}

// OrderOption defines the ordering options for the OAuthAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByProviderUserID orders the results by the provider_user_id field.
func ByProviderUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProviderUserID, opts...).ToFunc()
}

// ByAccessToken orders the results by the access_token field.
func ByAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessToken, opts...).ToFunc()
}

// ByRefreshToken orders the results by the refresh_token field.
func ByRefreshToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshToken, opts...).ToFunc()
}

// ByTokenExpiry orders the results by the token_expiry field.
func ByTokenExpiry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenExpiry, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Provider) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Provider) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Provider(str)
	if err := ProviderValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Provider", str)
	}
	return nil
}
