// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
)

// 客户
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	CreatedBy int `json:"created_by,omitempty"`
	// 修改人
	UpdatedBy int `json:"updated_by,omitempty"`
	// 客户名称
	Name string `json:"name,omitempty"`
	// 所属行业
	Industry string `json:"industry,omitempty"`
	// 客户来源
	Source string `json:"source,omitempty"`
	// 客户等级
	Level string `json:"level,omitempty"`
	// 自定义扩展字段
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges        CustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// Contracts holds the value of the contracts edge.
	Contracts []*Contract `json:"contracts,omitempty"`
	// FollowUps holds the value of the follow_ups edge.
	FollowUps []*FollowUp `json:"follow_ups,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedContacts  map[string][]*Contact
	namedContracts map[string][]*Contract
	namedFollowUps map[string][]*FollowUp
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[0] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// ContractsOrErr returns the Contracts value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) ContractsOrErr() ([]*Contract, error) {
	if e.loadedTypes[1] {
		return e.Contracts, nil
	}
	return nil, &NotLoadedError{edge: "contracts"}
}

// FollowUpsOrErr returns the FollowUps value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) FollowUpsOrErr() ([]*FollowUp, error) {
	if e.loadedTypes[2] {
		return e.FollowUps, nil
	}
	return nil, &NotLoadedError{edge: "follow_ups"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldMetadata:
			values[i] = new([]byte)
		case customer.FieldID, customer.FieldCreatedBy, customer.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case customer.FieldName, customer.FieldIndustry, customer.FieldSource, customer.FieldLevel:
			values[i] = new(sql.NullString)
		case customer.FieldCreatedAt, customer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case customer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case customer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case customer.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = int(value.Int64)
			}
		case customer.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = int(value.Int64)
			}
		case customer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case customer.FieldIndustry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field industry", values[i])
			} else if value.Valid {
				c.Industry = value.String
			}
		case customer.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				c.Source = value.String
			}
		case customer.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				c.Level = value.String
			}
		case customer.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (c *Customer) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryContacts queries the "contacts" edge of the Customer entity.
func (c *Customer) QueryContacts() *ContactQuery {
	return NewCustomerClient(c.config).QueryContacts(c)
}

// QueryContracts queries the "contracts" edge of the Customer entity.
func (c *Customer) QueryContracts() *ContractQuery {
	return NewCustomerClient(c.config).QueryContracts(c)
}

// QueryFollowUps queries the "follow_ups" edge of the Customer entity.
func (c *Customer) QueryFollowUps() *FollowUpQuery {
	return NewCustomerClient(c.config).QueryFollowUps(c)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("industry=")
	builder.WriteString(c.Industry)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(c.Source)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(c.Level)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", c.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedContacts(name string) ([]*Contact, error) {
	if c.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedContacts(name string, edges ...*Contact) {
	if c.Edges.namedContacts == nil {
		c.Edges.namedContacts = make(map[string][]*Contact)
	}
	if len(edges) == 0 {
		c.Edges.namedContacts[name] = []*Contact{}
	} else {
		c.Edges.namedContacts[name] = append(c.Edges.namedContacts[name], edges...)
	}
}

// NamedContracts returns the Contracts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedContracts(name string) ([]*Contract, error) {
	if c.Edges.namedContracts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedContracts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedContracts(name string, edges ...*Contract) {
	if c.Edges.namedContracts == nil {
		c.Edges.namedContracts = make(map[string][]*Contract)
	}
	if len(edges) == 0 {
		c.Edges.namedContracts[name] = []*Contract{}
	} else {
		c.Edges.namedContracts[name] = append(c.Edges.namedContracts[name], edges...)
	}
}

// NamedFollowUps returns the FollowUps named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Customer) NamedFollowUps(name string) ([]*FollowUp, error) {
	if c.Edges.namedFollowUps == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedFollowUps[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Customer) appendNamedFollowUps(name string, edges ...*FollowUp) {
	if c.Edges.namedFollowUps == nil {
		c.Edges.namedFollowUps = make(map[string][]*FollowUp)
	}
	if len(edges) == 0 {
		c.Edges.namedFollowUps[name] = []*FollowUp{}
	} else {
		c.Edges.namedFollowUps[name] = append(c.Edges.namedFollowUps[name], edges...)
	}
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
