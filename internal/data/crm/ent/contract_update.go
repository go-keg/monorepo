// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/payment"
	"github.com/go-keg/monorepo/internal/data/crm/ent/predicate"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks     []Hook
	mutation  *ContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContractUpdate) SetUpdatedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *ContractUpdate) ClearUpdatedAt() *ContractUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *ContractUpdate) SetUpdatedBy(i int) *ContractUpdate {
	cu.mutation.ResetUpdatedBy()
	cu.mutation.SetUpdatedBy(i)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableUpdatedBy(i *int) *ContractUpdate {
	if i != nil {
		cu.SetUpdatedBy(*i)
	}
	return cu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cu *ContractUpdate) AddUpdatedBy(i int) *ContractUpdate {
	cu.mutation.AddUpdatedBy(i)
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *ContractUpdate) ClearUpdatedBy() *ContractUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// SetContractNo sets the "contract_no" field.
func (cu *ContractUpdate) SetContractNo(s string) *ContractUpdate {
	cu.mutation.SetContractNo(s)
	return cu
}

// SetNillableContractNo sets the "contract_no" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableContractNo(s *string) *ContractUpdate {
	if s != nil {
		cu.SetContractNo(*s)
	}
	return cu
}

// SetAmount sets the "amount" field.
func (cu *ContractUpdate) SetAmount(f float64) *ContractUpdate {
	cu.mutation.ResetAmount()
	cu.mutation.SetAmount(f)
	return cu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableAmount(f *float64) *ContractUpdate {
	if f != nil {
		cu.SetAmount(*f)
	}
	return cu
}

// AddAmount adds f to the "amount" field.
func (cu *ContractUpdate) AddAmount(f float64) *ContractUpdate {
	cu.mutation.AddAmount(f)
	return cu
}

// SetSignedAt sets the "signed_at" field.
func (cu *ContractUpdate) SetSignedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetSignedAt(t)
	return cu
}

// SetNillableSignedAt sets the "signed_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableSignedAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetSignedAt(*t)
	}
	return cu
}

// ClearSignedAt clears the value of the "signed_at" field.
func (cu *ContractUpdate) ClearSignedAt() *ContractUpdate {
	cu.mutation.ClearSignedAt()
	return cu
}

// SetEndAt sets the "end_at" field.
func (cu *ContractUpdate) SetEndAt(t time.Time) *ContractUpdate {
	cu.mutation.SetEndAt(t)
	return cu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableEndAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetEndAt(*t)
	}
	return cu
}

// ClearEndAt clears the value of the "end_at" field.
func (cu *ContractUpdate) ClearEndAt() *ContractUpdate {
	cu.mutation.ClearEndAt()
	return cu
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cu *ContractUpdate) AddPaymentIDs(ids ...int) *ContractUpdate {
	cu.mutation.AddPaymentIDs(ids...)
	return cu
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cu *ContractUpdate) AddPayments(p ...*Payment) *ContractUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPaymentIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cu *ContractUpdate) ClearPayments() *ContractUpdate {
	cu.mutation.ClearPayments()
	return cu
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cu *ContractUpdate) RemovePaymentIDs(ids ...int) *ContractUpdate {
	cu.mutation.RemovePaymentIDs(ids...)
	return cu
}

// RemovePayments removes "payments" edges to Payment entities.
func (cu *ContractUpdate) RemovePayments(p ...*Payment) *ContractUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := contract.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContractUpdate) check() error {
	if v, ok := cu.mutation.ContractNo(); ok {
		if err := contract.ContractNoValidator(v); err != nil {
			return &ValidationError{Name: "contract_no", err: fmt.Errorf(`ent: validator failed for field "Contract.contract_no": %w`, err)}
		}
	}
	if cu.mutation.CustomerCleared() && len(cu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Contract.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ContractUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(contract.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contract.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(contract.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(contract.FieldUpdatedBy, field.TypeInt, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(contract.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := cu.mutation.ContractNo(); ok {
		_spec.SetField(contract.FieldContractNo, field.TypeString, value)
	}
	if value, ok := cu.mutation.Amount(); ok {
		_spec.SetField(contract.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedAmount(); ok {
		_spec.AddField(contract.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.SignedAt(); ok {
		_spec.SetField(contract.FieldSignedAt, field.TypeTime, value)
	}
	if cu.mutation.SignedAtCleared() {
		_spec.ClearField(contract.FieldSignedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.EndAt(); ok {
		_spec.SetField(contract.FieldEndAt, field.TypeTime, value)
	}
	if cu.mutation.EndAtCleared() {
		_spec.ClearField(contract.FieldEndAt, field.TypeTime)
	}
	if cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContractUpdateOne) SetUpdatedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *ContractUpdateOne) ClearUpdatedAt() *ContractUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *ContractUpdateOne) SetUpdatedBy(i int) *ContractUpdateOne {
	cuo.mutation.ResetUpdatedBy()
	cuo.mutation.SetUpdatedBy(i)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableUpdatedBy(i *int) *ContractUpdateOne {
	if i != nil {
		cuo.SetUpdatedBy(*i)
	}
	return cuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cuo *ContractUpdateOne) AddUpdatedBy(i int) *ContractUpdateOne {
	cuo.mutation.AddUpdatedBy(i)
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *ContractUpdateOne) ClearUpdatedBy() *ContractUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// SetContractNo sets the "contract_no" field.
func (cuo *ContractUpdateOne) SetContractNo(s string) *ContractUpdateOne {
	cuo.mutation.SetContractNo(s)
	return cuo
}

// SetNillableContractNo sets the "contract_no" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableContractNo(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetContractNo(*s)
	}
	return cuo
}

// SetAmount sets the "amount" field.
func (cuo *ContractUpdateOne) SetAmount(f float64) *ContractUpdateOne {
	cuo.mutation.ResetAmount()
	cuo.mutation.SetAmount(f)
	return cuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableAmount(f *float64) *ContractUpdateOne {
	if f != nil {
		cuo.SetAmount(*f)
	}
	return cuo
}

// AddAmount adds f to the "amount" field.
func (cuo *ContractUpdateOne) AddAmount(f float64) *ContractUpdateOne {
	cuo.mutation.AddAmount(f)
	return cuo
}

// SetSignedAt sets the "signed_at" field.
func (cuo *ContractUpdateOne) SetSignedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetSignedAt(t)
	return cuo
}

// SetNillableSignedAt sets the "signed_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableSignedAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetSignedAt(*t)
	}
	return cuo
}

// ClearSignedAt clears the value of the "signed_at" field.
func (cuo *ContractUpdateOne) ClearSignedAt() *ContractUpdateOne {
	cuo.mutation.ClearSignedAt()
	return cuo
}

// SetEndAt sets the "end_at" field.
func (cuo *ContractUpdateOne) SetEndAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetEndAt(t)
	return cuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableEndAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetEndAt(*t)
	}
	return cuo
}

// ClearEndAt clears the value of the "end_at" field.
func (cuo *ContractUpdateOne) ClearEndAt() *ContractUpdateOne {
	cuo.mutation.ClearEndAt()
	return cuo
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cuo *ContractUpdateOne) AddPaymentIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.AddPaymentIDs(ids...)
	return cuo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cuo *ContractUpdateOne) AddPayments(p ...*Payment) *ContractUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPaymentIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cuo *ContractUpdateOne) ClearPayments() *ContractUpdateOne {
	cuo.mutation.ClearPayments()
	return cuo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cuo *ContractUpdateOne) RemovePaymentIDs(ids ...int) *ContractUpdateOne {
	cuo.mutation.RemovePaymentIDs(ids...)
	return cuo
}

// RemovePayments removes "payments" edges to Payment entities.
func (cuo *ContractUpdateOne) RemovePayments(p ...*Payment) *ContractUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the ContractUpdate builder.
func (cuo *ContractUpdateOne) Where(ps ...predicate.Contract) *ContractUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := contract.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContractUpdateOne) check() error {
	if v, ok := cuo.mutation.ContractNo(); ok {
		if err := contract.ContractNoValidator(v); err != nil {
			return &ValidationError{Name: "contract_no", err: fmt.Errorf(`ent: validator failed for field "Contract.contract_no": %w`, err)}
		}
	}
	if cuo.mutation.CustomerCleared() && len(cuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Contract.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ContractUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contract.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contract.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(contract.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(contract.FieldUpdatedBy, field.TypeInt, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(contract.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := cuo.mutation.ContractNo(); ok {
		_spec.SetField(contract.FieldContractNo, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Amount(); ok {
		_spec.SetField(contract.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedAmount(); ok {
		_spec.AddField(contract.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.SignedAt(); ok {
		_spec.SetField(contract.FieldSignedAt, field.TypeTime, value)
	}
	if cuo.mutation.SignedAtCleared() {
		_spec.ClearField(contract.FieldSignedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.EndAt(); ok {
		_spec.SetField(contract.FieldEndAt, field.TypeTime, value)
	}
	if cuo.mutation.EndAtCleared() {
		_spec.ClearField(contract.FieldEndAt, field.TypeTime)
	}
	if cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
