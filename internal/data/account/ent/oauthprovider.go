// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/account/ent/oauthprovider"
)

// OAuthProvider is the model entity for the OAuthProvider schema.
type OAuthProvider struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider string `json:"provider,omitempty"`
	// 第三方平台名称
	Name string `json:"name,omitempty"`
	// OAuth2 Client ID
	ClientID string `json:"client_id,omitempty"`
	// OAuth2 Client Secret
	ClientSecret string `json:"-"`
	// 授权地址
	AuthURL string `json:"auth_url,omitempty"`
	// Token 获取地址
	TokenURL string `json:"token_url,omitempty"`
	// 用户信息接口地址
	UserInfoURL string `json:"user_info_url,omitempty"`
	// 回调地址
	RedirectURI string `json:"redirect_uri,omitempty"`
	// 请求的权限范围，例如：user,email
	Scopes string `json:"scopes,omitempty"`
	// 是否启用
	Enabled      bool `json:"enabled,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OAuthProvider) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthprovider.FieldEnabled:
			values[i] = new(sql.NullBool)
		case oauthprovider.FieldID:
			values[i] = new(sql.NullInt64)
		case oauthprovider.FieldProvider, oauthprovider.FieldName, oauthprovider.FieldClientID, oauthprovider.FieldClientSecret, oauthprovider.FieldAuthURL, oauthprovider.FieldTokenURL, oauthprovider.FieldUserInfoURL, oauthprovider.FieldRedirectURI, oauthprovider.FieldScopes:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OAuthProvider fields.
func (op *OAuthProvider) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthprovider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			op.ID = int(value.Int64)
		case oauthprovider.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				op.Provider = value.String
			}
		case oauthprovider.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				op.Name = value.String
			}
		case oauthprovider.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				op.ClientID = value.String
			}
		case oauthprovider.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				op.ClientSecret = value.String
			}
		case oauthprovider.FieldAuthURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_url", values[i])
			} else if value.Valid {
				op.AuthURL = value.String
			}
		case oauthprovider.FieldTokenURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token_url", values[i])
			} else if value.Valid {
				op.TokenURL = value.String
			}
		case oauthprovider.FieldUserInfoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_info_url", values[i])
			} else if value.Valid {
				op.UserInfoURL = value.String
			}
		case oauthprovider.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				op.RedirectURI = value.String
			}
		case oauthprovider.FieldScopes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value.Valid {
				op.Scopes = value.String
			}
		case oauthprovider.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				op.Enabled = value.Bool
			}
		default:
			op.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OAuthProvider.
// This includes values selected through modifiers, order, etc.
func (op *OAuthProvider) Value(name string) (ent.Value, error) {
	return op.selectValues.Get(name)
}

// Update returns a builder for updating this OAuthProvider.
// Note that you need to call OAuthProvider.Unwrap() before calling this method if this OAuthProvider
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OAuthProvider) Update() *OAuthProviderUpdateOne {
	return NewOAuthProviderClient(op.config).UpdateOne(op)
}

// Unwrap unwraps the OAuthProvider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OAuthProvider) Unwrap() *OAuthProvider {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("ent: OAuthProvider is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OAuthProvider) String() string {
	var builder strings.Builder
	builder.WriteString("OAuthProvider(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("provider=")
	builder.WriteString(op.Provider)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(op.Name)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(op.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("auth_url=")
	builder.WriteString(op.AuthURL)
	builder.WriteString(", ")
	builder.WriteString("token_url=")
	builder.WriteString(op.TokenURL)
	builder.WriteString(", ")
	builder.WriteString("user_info_url=")
	builder.WriteString(op.UserInfoURL)
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(op.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(op.Scopes)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", op.Enabled))
	builder.WriteByte(')')
	return builder.String()
}

// OAuthProviders is a parsable slice of OAuthProvider.
type OAuthProviders []*OAuthProvider
