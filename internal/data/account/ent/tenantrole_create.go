// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/permission"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
)

// TenantRoleCreate is the builder for creating a TenantRole entity.
type TenantRoleCreate struct {
	config
	mutation *TenantRoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (trc *TenantRoleCreate) SetCreatedAt(t time.Time) *TenantRoleCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (trc *TenantRoleCreate) SetNillableCreatedAt(t *time.Time) *TenantRoleCreate {
	if t != nil {
		trc.SetCreatedAt(*t)
	}
	return trc
}

// SetUpdatedAt sets the "updated_at" field.
func (trc *TenantRoleCreate) SetUpdatedAt(t time.Time) *TenantRoleCreate {
	trc.mutation.SetUpdatedAt(t)
	return trc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (trc *TenantRoleCreate) SetNillableUpdatedAt(t *time.Time) *TenantRoleCreate {
	if t != nil {
		trc.SetUpdatedAt(*t)
	}
	return trc
}

// SetTenantID sets the "tenant_id" field.
func (trc *TenantRoleCreate) SetTenantID(i int) *TenantRoleCreate {
	trc.mutation.SetTenantID(i)
	return trc
}

// SetName sets the "name" field.
func (trc *TenantRoleCreate) SetName(s string) *TenantRoleCreate {
	trc.mutation.SetName(s)
	return trc
}

// SetDescription sets the "description" field.
func (trc *TenantRoleCreate) SetDescription(s string) *TenantRoleCreate {
	trc.mutation.SetDescription(s)
	return trc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (trc *TenantRoleCreate) SetNillableDescription(s *string) *TenantRoleCreate {
	if s != nil {
		trc.SetDescription(*s)
	}
	return trc
}

// SetSort sets the "sort" field.
func (trc *TenantRoleCreate) SetSort(i int) *TenantRoleCreate {
	trc.mutation.SetSort(i)
	return trc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (trc *TenantRoleCreate) SetNillableSort(i *int) *TenantRoleCreate {
	if i != nil {
		trc.SetSort(*i)
	}
	return trc
}

// SetID sets the "id" field.
func (trc *TenantRoleCreate) SetID(i int) *TenantRoleCreate {
	trc.mutation.SetID(i)
	return trc
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (trc *TenantRoleCreate) AddPermissionIDs(ids ...int) *TenantRoleCreate {
	trc.mutation.AddPermissionIDs(ids...)
	return trc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (trc *TenantRoleCreate) AddPermissions(p ...*Permission) *TenantRoleCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return trc.AddPermissionIDs(ids...)
}

// AddTenantUserIDs adds the "tenant_users" edge to the TenantUser entity by IDs.
func (trc *TenantRoleCreate) AddTenantUserIDs(ids ...int) *TenantRoleCreate {
	trc.mutation.AddTenantUserIDs(ids...)
	return trc
}

// AddTenantUsers adds the "tenant_users" edges to the TenantUser entity.
func (trc *TenantRoleCreate) AddTenantUsers(t ...*TenantUser) *TenantRoleCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return trc.AddTenantUserIDs(ids...)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (trc *TenantRoleCreate) SetTenant(t *Tenant) *TenantRoleCreate {
	return trc.SetTenantID(t.ID)
}

// Mutation returns the TenantRoleMutation object of the builder.
func (trc *TenantRoleCreate) Mutation() *TenantRoleMutation {
	return trc.mutation
}

// Save creates the TenantRole in the database.
func (trc *TenantRoleCreate) Save(ctx context.Context) (*TenantRole, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TenantRoleCreate) SaveX(ctx context.Context) *TenantRole {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TenantRoleCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TenantRoleCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TenantRoleCreate) defaults() {
	if _, ok := trc.mutation.CreatedAt(); !ok {
		v := tenantrole.DefaultCreatedAt()
		trc.mutation.SetCreatedAt(v)
	}
	if _, ok := trc.mutation.UpdatedAt(); !ok {
		v := tenantrole.DefaultUpdatedAt()
		trc.mutation.SetUpdatedAt(v)
	}
	if _, ok := trc.mutation.Sort(); !ok {
		v := tenantrole.DefaultSort
		trc.mutation.SetSort(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TenantRoleCreate) check() error {
	if _, ok := trc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TenantRole.tenant_id"`)}
	}
	if _, ok := trc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TenantRole.name"`)}
	}
	if v, ok := trc.mutation.Name(); ok {
		if err := tenantrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TenantRole.name": %w`, err)}
		}
	}
	if _, ok := trc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "TenantRole.sort"`)}
	}
	if len(trc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "TenantRole.tenant"`)}
	}
	return nil
}

func (trc *TenantRoleCreate) sqlSave(ctx context.Context) (*TenantRole, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TenantRoleCreate) createSpec() (*TenantRole, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantRole{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(tenantrole.Table, sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt))
	)
	_spec.OnConflict = trc.conflict
	if id, ok := trc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(tenantrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.UpdatedAt(); ok {
		_spec.SetField(tenantrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := trc.mutation.Name(); ok {
		_spec.SetField(tenantrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := trc.mutation.Description(); ok {
		_spec.SetField(tenantrole.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := trc.mutation.Sort(); ok {
		_spec.SetField(tenantrole.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if nodes := trc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantrole.PermissionsTable,
			Columns: tenantrole.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TenantUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tenantrole.TenantUsersTable,
			Columns: tenantrole.TenantUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenantrole.TenantTable,
			Columns: []string{tenantrole.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenantRole.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantRoleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (trc *TenantRoleCreate) OnConflict(opts ...sql.ConflictOption) *TenantRoleUpsertOne {
	trc.conflict = opts
	return &TenantRoleUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenantRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TenantRoleCreate) OnConflictColumns(columns ...string) *TenantRoleUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TenantRoleUpsertOne{
		create: trc,
	}
}

type (
	// TenantRoleUpsertOne is the builder for "upsert"-ing
	//  one TenantRole node.
	TenantRoleUpsertOne struct {
		create *TenantRoleCreate
	}

	// TenantRoleUpsert is the "OnConflict" setter.
	TenantRoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantRoleUpsert) SetUpdatedAt(v time.Time) *TenantRoleUpsert {
	u.Set(tenantrole.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantRoleUpsert) UpdateUpdatedAt() *TenantRoleUpsert {
	u.SetExcluded(tenantrole.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TenantRoleUpsert) ClearUpdatedAt() *TenantRoleUpsert {
	u.SetNull(tenantrole.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *TenantRoleUpsert) SetName(v string) *TenantRoleUpsert {
	u.Set(tenantrole.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantRoleUpsert) UpdateName() *TenantRoleUpsert {
	u.SetExcluded(tenantrole.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *TenantRoleUpsert) SetDescription(v string) *TenantRoleUpsert {
	u.Set(tenantrole.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TenantRoleUpsert) UpdateDescription() *TenantRoleUpsert {
	u.SetExcluded(tenantrole.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *TenantRoleUpsert) ClearDescription() *TenantRoleUpsert {
	u.SetNull(tenantrole.FieldDescription)
	return u
}

// SetSort sets the "sort" field.
func (u *TenantRoleUpsert) SetSort(v int) *TenantRoleUpsert {
	u.Set(tenantrole.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *TenantRoleUpsert) UpdateSort() *TenantRoleUpsert {
	u.SetExcluded(tenantrole.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *TenantRoleUpsert) AddSort(v int) *TenantRoleUpsert {
	u.Add(tenantrole.FieldSort, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TenantRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenantrole.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantRoleUpsertOne) UpdateNewValues() *TenantRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenantrole.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tenantrole.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(tenantrole.FieldTenantID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenantRole.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenantRoleUpsertOne) Ignore() *TenantRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantRoleUpsertOne) DoNothing() *TenantRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantRoleCreate.OnConflict
// documentation for more info.
func (u *TenantRoleUpsertOne) Update(set func(*TenantRoleUpsert)) *TenantRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantRoleUpsertOne) SetUpdatedAt(v time.Time) *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantRoleUpsertOne) UpdateUpdatedAt() *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TenantRoleUpsertOne) ClearUpdatedAt() *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TenantRoleUpsertOne) SetName(v string) *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantRoleUpsertOne) UpdateName() *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *TenantRoleUpsertOne) SetDescription(v string) *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TenantRoleUpsertOne) UpdateDescription() *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TenantRoleUpsertOne) ClearDescription() *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.ClearDescription()
	})
}

// SetSort sets the "sort" field.
func (u *TenantRoleUpsertOne) SetSort(v int) *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *TenantRoleUpsertOne) AddSort(v int) *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *TenantRoleUpsertOne) UpdateSort() *TenantRoleUpsertOne {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateSort()
	})
}

// Exec executes the query.
func (u *TenantRoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantRoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantRoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantRoleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantRoleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantRoleCreateBulk is the builder for creating many TenantRole entities in bulk.
type TenantRoleCreateBulk struct {
	config
	err      error
	builders []*TenantRoleCreate
	conflict []sql.ConflictOption
}

// Save creates the TenantRole entities in the database.
func (trcb *TenantRoleCreateBulk) Save(ctx context.Context) ([]*TenantRole, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TenantRole, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TenantRoleCreateBulk) SaveX(ctx context.Context) []*TenantRole {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TenantRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TenantRoleCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenantRole.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantRoleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (trcb *TenantRoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantRoleUpsertBulk {
	trcb.conflict = opts
	return &TenantRoleUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenantRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TenantRoleCreateBulk) OnConflictColumns(columns ...string) *TenantRoleUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TenantRoleUpsertBulk{
		create: trcb,
	}
}

// TenantRoleUpsertBulk is the builder for "upsert"-ing
// a bulk of TenantRole nodes.
type TenantRoleUpsertBulk struct {
	create *TenantRoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TenantRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenantrole.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantRoleUpsertBulk) UpdateNewValues() *TenantRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenantrole.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tenantrole.FieldCreatedAt)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(tenantrole.FieldTenantID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenantRole.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenantRoleUpsertBulk) Ignore() *TenantRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantRoleUpsertBulk) DoNothing() *TenantRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantRoleCreateBulk.OnConflict
// documentation for more info.
func (u *TenantRoleUpsertBulk) Update(set func(*TenantRoleUpsert)) *TenantRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TenantRoleUpsertBulk) SetUpdatedAt(v time.Time) *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TenantRoleUpsertBulk) UpdateUpdatedAt() *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TenantRoleUpsertBulk) ClearUpdatedAt() *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *TenantRoleUpsertBulk) SetName(v string) *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TenantRoleUpsertBulk) UpdateName() *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *TenantRoleUpsertBulk) SetDescription(v string) *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TenantRoleUpsertBulk) UpdateDescription() *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *TenantRoleUpsertBulk) ClearDescription() *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.ClearDescription()
	})
}

// SetSort sets the "sort" field.
func (u *TenantRoleUpsertBulk) SetSort(v int) *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *TenantRoleUpsertBulk) AddSort(v int) *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *TenantRoleUpsertBulk) UpdateSort() *TenantRoleUpsertBulk {
	return u.Update(func(s *TenantRoleUpsert) {
		s.UpdateSort()
	})
}

// Exec executes the query.
func (u *TenantRoleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantRoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantRoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantRoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
