// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
)

// 角色
type TenantRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort int `json:"sort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantRoleQuery when eager-loading is set.
	Edges        TenantRoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenantRoleEdges holds the relations/edges for other nodes in the graph.
type TenantRoleEdges struct {
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// TenantUsers holds the value of the tenant_users edge.
	TenantUsers []*TenantUser `json:"tenant_users,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedPermissions map[string][]*Permission
	namedTenantUsers map[string][]*TenantUser
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e TenantRoleEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[0] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// TenantUsersOrErr returns the TenantUsers value or an error if the edge
// was not loaded in eager-loading.
func (e TenantRoleEdges) TenantUsersOrErr() ([]*TenantUser, error) {
	if e.loadedTypes[1] {
		return e.TenantUsers, nil
	}
	return nil, &NotLoadedError{edge: "tenant_users"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantRoleEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenantRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenantrole.FieldID, tenantrole.FieldTenantID, tenantrole.FieldSort:
			values[i] = new(sql.NullInt64)
		case tenantrole.FieldName, tenantrole.FieldDescription:
			values[i] = new(sql.NullString)
		case tenantrole.FieldCreatedAt, tenantrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenantRole fields.
func (tr *TenantRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenantrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case tenantrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case tenantrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tr.UpdatedAt = value.Time
			}
		case tenantrole.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tr.TenantID = int(value.Int64)
			}
		case tenantrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tr.Name = value.String
			}
		case tenantrole.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				tr.Description = value.String
			}
		case tenantrole.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				tr.Sort = int(value.Int64)
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenantRole.
// This includes values selected through modifiers, order, etc.
func (tr *TenantRole) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// QueryPermissions queries the "permissions" edge of the TenantRole entity.
func (tr *TenantRole) QueryPermissions() *PermissionQuery {
	return NewTenantRoleClient(tr.config).QueryPermissions(tr)
}

// QueryTenantUsers queries the "tenant_users" edge of the TenantRole entity.
func (tr *TenantRole) QueryTenantUsers() *TenantUserQuery {
	return NewTenantRoleClient(tr.config).QueryTenantUsers(tr)
}

// QueryTenant queries the "tenant" edge of the TenantRole entity.
func (tr *TenantRole) QueryTenant() *TenantQuery {
	return NewTenantRoleClient(tr.config).QueryTenant(tr)
}

// Update returns a builder for updating this TenantRole.
// Note that you need to call TenantRole.Unwrap() before calling this method if this TenantRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TenantRole) Update() *TenantRoleUpdateOne {
	return NewTenantRoleClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TenantRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TenantRole) Unwrap() *TenantRole {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenantRole is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TenantRole) String() string {
	var builder strings.Builder
	builder.WriteString("TenantRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(tr.Description)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", tr.Sort))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPermissions returns the Permissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tr *TenantRole) NamedPermissions(name string) ([]*Permission, error) {
	if tr.Edges.namedPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tr.Edges.namedPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tr *TenantRole) appendNamedPermissions(name string, edges ...*Permission) {
	if tr.Edges.namedPermissions == nil {
		tr.Edges.namedPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		tr.Edges.namedPermissions[name] = []*Permission{}
	} else {
		tr.Edges.namedPermissions[name] = append(tr.Edges.namedPermissions[name], edges...)
	}
}

// NamedTenantUsers returns the TenantUsers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tr *TenantRole) NamedTenantUsers(name string) ([]*TenantUser, error) {
	if tr.Edges.namedTenantUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tr.Edges.namedTenantUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tr *TenantRole) appendNamedTenantUsers(name string, edges ...*TenantUser) {
	if tr.Edges.namedTenantUsers == nil {
		tr.Edges.namedTenantUsers = make(map[string][]*TenantUser)
	}
	if len(edges) == 0 {
		tr.Edges.namedTenantUsers[name] = []*TenantUser{}
	} else {
		tr.Edges.namedTenantUsers[name] = append(tr.Edges.namedTenantUsers[name], edges...)
	}
}

// TenantRoles is a parsable slice of TenantRole.
type TenantRoles []*TenantRole
