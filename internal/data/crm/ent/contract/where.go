// Code generated by ent, DO NOT EDIT.

package contract

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-keg/monorepo/internal/data/crm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldUpdatedBy, v))
}

// ContractNo applies equality check predicate on the "contract_no" field. It's identical to ContractNoEQ.
func ContractNo(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldContractNo, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAmount, v))
}

// SignedAt applies equality check predicate on the "signed_at" field. It's identical to SignedAtEQ.
func SignedAt(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldSignedAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldEndAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldUpdatedBy))
}

// ContractNoEQ applies the EQ predicate on the "contract_no" field.
func ContractNoEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldContractNo, v))
}

// ContractNoNEQ applies the NEQ predicate on the "contract_no" field.
func ContractNoNEQ(v string) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldContractNo, v))
}

// ContractNoIn applies the In predicate on the "contract_no" field.
func ContractNoIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldContractNo, vs...))
}

// ContractNoNotIn applies the NotIn predicate on the "contract_no" field.
func ContractNoNotIn(vs ...string) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldContractNo, vs...))
}

// ContractNoGT applies the GT predicate on the "contract_no" field.
func ContractNoGT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldContractNo, v))
}

// ContractNoGTE applies the GTE predicate on the "contract_no" field.
func ContractNoGTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldContractNo, v))
}

// ContractNoLT applies the LT predicate on the "contract_no" field.
func ContractNoLT(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldContractNo, v))
}

// ContractNoLTE applies the LTE predicate on the "contract_no" field.
func ContractNoLTE(v string) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldContractNo, v))
}

// ContractNoContains applies the Contains predicate on the "contract_no" field.
func ContractNoContains(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContains(FieldContractNo, v))
}

// ContractNoHasPrefix applies the HasPrefix predicate on the "contract_no" field.
func ContractNoHasPrefix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasPrefix(FieldContractNo, v))
}

// ContractNoHasSuffix applies the HasSuffix predicate on the "contract_no" field.
func ContractNoHasSuffix(v string) predicate.Contract {
	return predicate.Contract(sql.FieldHasSuffix(FieldContractNo, v))
}

// ContractNoEqualFold applies the EqualFold predicate on the "contract_no" field.
func ContractNoEqualFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldEqualFold(FieldContractNo, v))
}

// ContractNoContainsFold applies the ContainsFold predicate on the "contract_no" field.
func ContractNoContainsFold(v string) predicate.Contract {
	return predicate.Contract(sql.FieldContainsFold(FieldContractNo, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldAmount, v))
}

// SignedAtEQ applies the EQ predicate on the "signed_at" field.
func SignedAtEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldSignedAt, v))
}

// SignedAtNEQ applies the NEQ predicate on the "signed_at" field.
func SignedAtNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldSignedAt, v))
}

// SignedAtIn applies the In predicate on the "signed_at" field.
func SignedAtIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldSignedAt, vs...))
}

// SignedAtNotIn applies the NotIn predicate on the "signed_at" field.
func SignedAtNotIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldSignedAt, vs...))
}

// SignedAtGT applies the GT predicate on the "signed_at" field.
func SignedAtGT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldSignedAt, v))
}

// SignedAtGTE applies the GTE predicate on the "signed_at" field.
func SignedAtGTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldSignedAt, v))
}

// SignedAtLT applies the LT predicate on the "signed_at" field.
func SignedAtLT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldSignedAt, v))
}

// SignedAtLTE applies the LTE predicate on the "signed_at" field.
func SignedAtLTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldSignedAt, v))
}

// SignedAtIsNil applies the IsNil predicate on the "signed_at" field.
func SignedAtIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldSignedAt))
}

// SignedAtNotNil applies the NotNil predicate on the "signed_at" field.
func SignedAtNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldSignedAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Contract {
	return predicate.Contract(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Contract {
	return predicate.Contract(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Contract {
	return predicate.Contract(sql.FieldNotNull(FieldEndAt))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.Contract {
	return predicate.Contract(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Contract) predicate.Contract {
	return predicate.Contract(sql.NotPredicates(p))
}
