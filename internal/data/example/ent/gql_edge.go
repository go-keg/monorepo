// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (oa *OAuthAccount) User(ctx context.Context) (*User, error) {
	result, err := oa.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = oa.QueryUser().Only(ctx)
	}
	return result, err
}

func (ol *OperationLog) User(ctx context.Context) (*User, error) {
	result, err := ol.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ol.QueryUser().Only(ctx)
	}
	return result, err
}

func (pe *Permission) Parent(ctx context.Context) (*Permission, error) {
	result, err := pe.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = pe.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pe *Permission) Children(ctx context.Context) (result []*Permission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryChildren().All(ctx)
	}
	return result, err
}

func (r *Role) Permissions(ctx context.Context) (result []*Permission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedPermissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.PermissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryPermissions().All(ctx)
	}
	return result, err
}

func (u *User) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRoles().All(ctx)
	}
	return result, err
}

func (u *User) OauthAccounts(ctx context.Context) (result []*OAuthAccount, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedOauthAccounts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.OauthAccountsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryOauthAccounts().All(ctx)
	}
	return result, err
}
