// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contact"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
	"github.com/go-keg/monorepo/internal/data/crm/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CustomerUpdate) SetUpdatedAt(t time.Time) *CustomerUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cu *CustomerUpdate) ClearUpdatedAt() *CustomerUpdate {
	cu.mutation.ClearUpdatedAt()
	return cu
}

// SetName sets the "name" field.
func (cu *CustomerUpdate) SetName(s string) *CustomerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetIndustry sets the "industry" field.
func (cu *CustomerUpdate) SetIndustry(s string) *CustomerUpdate {
	cu.mutation.SetIndustry(s)
	return cu
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableIndustry(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetIndustry(*s)
	}
	return cu
}

// ClearIndustry clears the value of the "industry" field.
func (cu *CustomerUpdate) ClearIndustry() *CustomerUpdate {
	cu.mutation.ClearIndustry()
	return cu
}

// SetSource sets the "source" field.
func (cu *CustomerUpdate) SetSource(s string) *CustomerUpdate {
	cu.mutation.SetSource(s)
	return cu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableSource(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetSource(*s)
	}
	return cu
}

// ClearSource clears the value of the "source" field.
func (cu *CustomerUpdate) ClearSource() *CustomerUpdate {
	cu.mutation.ClearSource()
	return cu
}

// SetLevel sets the "level" field.
func (cu *CustomerUpdate) SetLevel(s string) *CustomerUpdate {
	cu.mutation.SetLevel(s)
	return cu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableLevel(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetLevel(*s)
	}
	return cu
}

// ClearLevel clears the value of the "level" field.
func (cu *CustomerUpdate) ClearLevel() *CustomerUpdate {
	cu.mutation.ClearLevel()
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *CustomerUpdate) SetMetadata(m map[string]interface{}) *CustomerUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *CustomerUpdate) ClearMetadata() *CustomerUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// SetUpdatedBy sets the "updated_by" field.
func (cu *CustomerUpdate) SetUpdatedBy(i int) *CustomerUpdate {
	cu.mutation.ResetUpdatedBy()
	cu.mutation.SetUpdatedBy(i)
	return cu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableUpdatedBy(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetUpdatedBy(*i)
	}
	return cu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cu *CustomerUpdate) AddUpdatedBy(i int) *CustomerUpdate {
	cu.mutation.AddUpdatedBy(i)
	return cu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cu *CustomerUpdate) ClearUpdatedBy() *CustomerUpdate {
	cu.mutation.ClearUpdatedBy()
	return cu
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (cu *CustomerUpdate) AddContactIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddContactIDs(ids...)
	return cu
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (cu *CustomerUpdate) AddContacts(c ...*Contact) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddContactIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (cu *CustomerUpdate) AddContractIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddContractIDs(ids...)
	return cu
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (cu *CustomerUpdate) AddContracts(c ...*Contract) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddContractIDs(ids...)
}

// AddFollowUpIDs adds the "follow_ups" edge to the FollowUp entity by IDs.
func (cu *CustomerUpdate) AddFollowUpIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddFollowUpIDs(ids...)
	return cu
}

// AddFollowUps adds the "follow_ups" edges to the FollowUp entity.
func (cu *CustomerUpdate) AddFollowUps(f ...*FollowUp) *CustomerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddFollowUpIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (cu *CustomerUpdate) ClearContacts() *CustomerUpdate {
	cu.mutation.ClearContacts()
	return cu
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (cu *CustomerUpdate) RemoveContactIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveContactIDs(ids...)
	return cu
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (cu *CustomerUpdate) RemoveContacts(c ...*Contact) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveContactIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (cu *CustomerUpdate) ClearContracts() *CustomerUpdate {
	cu.mutation.ClearContracts()
	return cu
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (cu *CustomerUpdate) RemoveContractIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveContractIDs(ids...)
	return cu
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (cu *CustomerUpdate) RemoveContracts(c ...*Contract) *CustomerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveContractIDs(ids...)
}

// ClearFollowUps clears all "follow_ups" edges to the FollowUp entity.
func (cu *CustomerUpdate) ClearFollowUps() *CustomerUpdate {
	cu.mutation.ClearFollowUps()
	return cu
}

// RemoveFollowUpIDs removes the "follow_ups" edge to FollowUp entities by IDs.
func (cu *CustomerUpdate) RemoveFollowUpIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemoveFollowUpIDs(ids...)
	return cu
}

// RemoveFollowUps removes "follow_ups" edges to FollowUp entities.
func (cu *CustomerUpdate) RemoveFollowUps(f ...*FollowUp) *CustomerUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveFollowUpIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CustomerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok && !cu.mutation.UpdatedAtCleared() {
		v := customer.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CustomerUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CustomerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(customer.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.UpdatedAtCleared() {
		_spec.ClearField(customer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Industry(); ok {
		_spec.SetField(customer.FieldIndustry, field.TypeString, value)
	}
	if cu.mutation.IndustryCleared() {
		_spec.ClearField(customer.FieldIndustry, field.TypeString)
	}
	if value, ok := cu.mutation.Source(); ok {
		_spec.SetField(customer.FieldSource, field.TypeString, value)
	}
	if cu.mutation.SourceCleared() {
		_spec.ClearField(customer.FieldSource, field.TypeString)
	}
	if value, ok := cu.mutation.Level(); ok {
		_spec.SetField(customer.FieldLevel, field.TypeString, value)
	}
	if cu.mutation.LevelCleared() {
		_spec.ClearField(customer.FieldLevel, field.TypeString)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cu.mutation.UpdatedBy(); ok {
		_spec.SetField(customer.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(customer.FieldUpdatedBy, field.TypeInt, value)
	}
	if cu.mutation.UpdatedByCleared() {
		_spec.ClearField(customer.FieldUpdatedBy, field.TypeInt)
	}
	if cu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cu.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedContractsIDs(); len(nodes) > 0 && !cu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FollowUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFollowUpsIDs(); len(nodes) > 0 && !cu.mutation.FollowUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FollowUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CustomerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CustomerUpdateOne) SetUpdatedAt(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cuo *CustomerUpdateOne) ClearUpdatedAt() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedAt()
	return cuo
}

// SetName sets the "name" field.
func (cuo *CustomerUpdateOne) SetName(s string) *CustomerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetIndustry sets the "industry" field.
func (cuo *CustomerUpdateOne) SetIndustry(s string) *CustomerUpdateOne {
	cuo.mutation.SetIndustry(s)
	return cuo
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableIndustry(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetIndustry(*s)
	}
	return cuo
}

// ClearIndustry clears the value of the "industry" field.
func (cuo *CustomerUpdateOne) ClearIndustry() *CustomerUpdateOne {
	cuo.mutation.ClearIndustry()
	return cuo
}

// SetSource sets the "source" field.
func (cuo *CustomerUpdateOne) SetSource(s string) *CustomerUpdateOne {
	cuo.mutation.SetSource(s)
	return cuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableSource(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetSource(*s)
	}
	return cuo
}

// ClearSource clears the value of the "source" field.
func (cuo *CustomerUpdateOne) ClearSource() *CustomerUpdateOne {
	cuo.mutation.ClearSource()
	return cuo
}

// SetLevel sets the "level" field.
func (cuo *CustomerUpdateOne) SetLevel(s string) *CustomerUpdateOne {
	cuo.mutation.SetLevel(s)
	return cuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableLevel(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetLevel(*s)
	}
	return cuo
}

// ClearLevel clears the value of the "level" field.
func (cuo *CustomerUpdateOne) ClearLevel() *CustomerUpdateOne {
	cuo.mutation.ClearLevel()
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *CustomerUpdateOne) SetMetadata(m map[string]interface{}) *CustomerUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *CustomerUpdateOne) ClearMetadata() *CustomerUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cuo *CustomerUpdateOne) SetUpdatedBy(i int) *CustomerUpdateOne {
	cuo.mutation.ResetUpdatedBy()
	cuo.mutation.SetUpdatedBy(i)
	return cuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableUpdatedBy(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetUpdatedBy(*i)
	}
	return cuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (cuo *CustomerUpdateOne) AddUpdatedBy(i int) *CustomerUpdateOne {
	cuo.mutation.AddUpdatedBy(i)
	return cuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cuo *CustomerUpdateOne) ClearUpdatedBy() *CustomerUpdateOne {
	cuo.mutation.ClearUpdatedBy()
	return cuo
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (cuo *CustomerUpdateOne) AddContactIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddContactIDs(ids...)
	return cuo
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (cuo *CustomerUpdateOne) AddContacts(c ...*Contact) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddContactIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (cuo *CustomerUpdateOne) AddContractIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddContractIDs(ids...)
	return cuo
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (cuo *CustomerUpdateOne) AddContracts(c ...*Contract) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddContractIDs(ids...)
}

// AddFollowUpIDs adds the "follow_ups" edge to the FollowUp entity by IDs.
func (cuo *CustomerUpdateOne) AddFollowUpIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddFollowUpIDs(ids...)
	return cuo
}

// AddFollowUps adds the "follow_ups" edges to the FollowUp entity.
func (cuo *CustomerUpdateOne) AddFollowUps(f ...*FollowUp) *CustomerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddFollowUpIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (cuo *CustomerUpdateOne) ClearContacts() *CustomerUpdateOne {
	cuo.mutation.ClearContacts()
	return cuo
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (cuo *CustomerUpdateOne) RemoveContactIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveContactIDs(ids...)
	return cuo
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (cuo *CustomerUpdateOne) RemoveContacts(c ...*Contact) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveContactIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (cuo *CustomerUpdateOne) ClearContracts() *CustomerUpdateOne {
	cuo.mutation.ClearContracts()
	return cuo
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (cuo *CustomerUpdateOne) RemoveContractIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveContractIDs(ids...)
	return cuo
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (cuo *CustomerUpdateOne) RemoveContracts(c ...*Contract) *CustomerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveContractIDs(ids...)
}

// ClearFollowUps clears all "follow_ups" edges to the FollowUp entity.
func (cuo *CustomerUpdateOne) ClearFollowUps() *CustomerUpdateOne {
	cuo.mutation.ClearFollowUps()
	return cuo
}

// RemoveFollowUpIDs removes the "follow_ups" edge to FollowUp entities by IDs.
func (cuo *CustomerUpdateOne) RemoveFollowUpIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemoveFollowUpIDs(ids...)
	return cuo
}

// RemoveFollowUps removes "follow_ups" edges to FollowUp entities.
func (cuo *CustomerUpdateOne) RemoveFollowUps(f ...*FollowUp) *CustomerUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveFollowUpIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CustomerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok && !cuo.mutation.UpdatedAtCleared() {
		v := customer.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CustomerUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CustomerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CustomerUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(customer.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(customer.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Industry(); ok {
		_spec.SetField(customer.FieldIndustry, field.TypeString, value)
	}
	if cuo.mutation.IndustryCleared() {
		_spec.ClearField(customer.FieldIndustry, field.TypeString)
	}
	if value, ok := cuo.mutation.Source(); ok {
		_spec.SetField(customer.FieldSource, field.TypeString, value)
	}
	if cuo.mutation.SourceCleared() {
		_spec.ClearField(customer.FieldSource, field.TypeString)
	}
	if value, ok := cuo.mutation.Level(); ok {
		_spec.SetField(customer.FieldLevel, field.TypeString, value)
	}
	if cuo.mutation.LevelCleared() {
		_spec.ClearField(customer.FieldLevel, field.TypeString)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(customer.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cuo.mutation.UpdatedBy(); ok {
		_spec.SetField(customer.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(customer.FieldUpdatedBy, field.TypeInt, value)
	}
	if cuo.mutation.UpdatedByCleared() {
		_spec.ClearField(customer.FieldUpdatedBy, field.TypeInt)
	}
	if cuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !cuo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedContractsIDs(); len(nodes) > 0 && !cuo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FollowUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFollowUpsIDs(); len(nodes) > 0 && !cuo.mutation.FollowUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FollowUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
