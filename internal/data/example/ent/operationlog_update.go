// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/example/ent/operationlog"
	"github.com/go-keg/monorepo/internal/data/example/ent/predicate"
	"github.com/go-keg/monorepo/internal/data/example/ent/user"
)

// OperationLogUpdate is the builder for updating OperationLog entities.
type OperationLogUpdate struct {
	config
	hooks     []Hook
	mutation  *OperationLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OperationLogUpdate builder.
func (olu *OperationLogUpdate) Where(ps ...predicate.OperationLog) *OperationLogUpdate {
	olu.mutation.Where(ps...)
	return olu
}

// SetUpdatedAt sets the "updated_at" field.
func (olu *OperationLogUpdate) SetUpdatedAt(t time.Time) *OperationLogUpdate {
	olu.mutation.SetUpdatedAt(t)
	return olu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (olu *OperationLogUpdate) ClearUpdatedAt() *OperationLogUpdate {
	olu.mutation.ClearUpdatedAt()
	return olu
}

// SetUserID sets the "user_id" field.
func (olu *OperationLogUpdate) SetUserID(i int) *OperationLogUpdate {
	olu.mutation.SetUserID(i)
	return olu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableUserID(i *int) *OperationLogUpdate {
	if i != nil {
		olu.SetUserID(*i)
	}
	return olu
}

// SetType sets the "type" field.
func (olu *OperationLogUpdate) SetType(s string) *OperationLogUpdate {
	olu.mutation.SetType(s)
	return olu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableType(s *string) *OperationLogUpdate {
	if s != nil {
		olu.SetType(*s)
	}
	return olu
}

// SetContent sets the "content" field.
func (olu *OperationLogUpdate) SetContent(s string) *OperationLogUpdate {
	olu.mutation.SetContent(s)
	return olu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (olu *OperationLogUpdate) SetNillableContent(s *string) *OperationLogUpdate {
	if s != nil {
		olu.SetContent(*s)
	}
	return olu
}

// SetMetadata sets the "metadata" field.
func (olu *OperationLogUpdate) SetMetadata(m map[string]interface{}) *OperationLogUpdate {
	olu.mutation.SetMetadata(m)
	return olu
}

// SetUser sets the "user" edge to the User entity.
func (olu *OperationLogUpdate) SetUser(u *User) *OperationLogUpdate {
	return olu.SetUserID(u.ID)
}

// Mutation returns the OperationLogMutation object of the builder.
func (olu *OperationLogUpdate) Mutation() *OperationLogMutation {
	return olu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (olu *OperationLogUpdate) ClearUser() *OperationLogUpdate {
	olu.mutation.ClearUser()
	return olu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (olu *OperationLogUpdate) Save(ctx context.Context) (int, error) {
	olu.defaults()
	return withHooks(ctx, olu.sqlSave, olu.mutation, olu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (olu *OperationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := olu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (olu *OperationLogUpdate) Exec(ctx context.Context) error {
	_, err := olu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olu *OperationLogUpdate) ExecX(ctx context.Context) {
	if err := olu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olu *OperationLogUpdate) defaults() {
	if _, ok := olu.mutation.UpdatedAt(); !ok && !olu.mutation.UpdatedAtCleared() {
		v := operationlog.UpdateDefaultUpdatedAt()
		olu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (olu *OperationLogUpdate) check() error {
	if olu.mutation.UserCleared() && len(olu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OperationLog.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (olu *OperationLogUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OperationLogUpdate {
	olu.modifiers = append(olu.modifiers, modifiers...)
	return olu
}

func (olu *OperationLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := olu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operationlog.Table, operationlog.Columns, sqlgraph.NewFieldSpec(operationlog.FieldID, field.TypeInt))
	if ps := olu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if olu.mutation.CreatedAtCleared() {
		_spec.ClearField(operationlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := olu.mutation.UpdatedAt(); ok {
		_spec.SetField(operationlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if olu.mutation.UpdatedAtCleared() {
		_spec.ClearField(operationlog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := olu.mutation.GetType(); ok {
		_spec.SetField(operationlog.FieldType, field.TypeString, value)
	}
	if value, ok := olu.mutation.Content(); ok {
		_spec.SetField(operationlog.FieldContent, field.TypeString, value)
	}
	if value, ok := olu.mutation.Metadata(); ok {
		_spec.SetField(operationlog.FieldMetadata, field.TypeJSON, value)
	}
	if olu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.UserTable,
			Columns: []string{operationlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.UserTable,
			Columns: []string{operationlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(olu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, olu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	olu.mutation.done = true
	return n, nil
}

// OperationLogUpdateOne is the builder for updating a single OperationLog entity.
type OperationLogUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OperationLogMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (oluo *OperationLogUpdateOne) SetUpdatedAt(t time.Time) *OperationLogUpdateOne {
	oluo.mutation.SetUpdatedAt(t)
	return oluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oluo *OperationLogUpdateOne) ClearUpdatedAt() *OperationLogUpdateOne {
	oluo.mutation.ClearUpdatedAt()
	return oluo
}

// SetUserID sets the "user_id" field.
func (oluo *OperationLogUpdateOne) SetUserID(i int) *OperationLogUpdateOne {
	oluo.mutation.SetUserID(i)
	return oluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableUserID(i *int) *OperationLogUpdateOne {
	if i != nil {
		oluo.SetUserID(*i)
	}
	return oluo
}

// SetType sets the "type" field.
func (oluo *OperationLogUpdateOne) SetType(s string) *OperationLogUpdateOne {
	oluo.mutation.SetType(s)
	return oluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableType(s *string) *OperationLogUpdateOne {
	if s != nil {
		oluo.SetType(*s)
	}
	return oluo
}

// SetContent sets the "content" field.
func (oluo *OperationLogUpdateOne) SetContent(s string) *OperationLogUpdateOne {
	oluo.mutation.SetContent(s)
	return oluo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (oluo *OperationLogUpdateOne) SetNillableContent(s *string) *OperationLogUpdateOne {
	if s != nil {
		oluo.SetContent(*s)
	}
	return oluo
}

// SetMetadata sets the "metadata" field.
func (oluo *OperationLogUpdateOne) SetMetadata(m map[string]interface{}) *OperationLogUpdateOne {
	oluo.mutation.SetMetadata(m)
	return oluo
}

// SetUser sets the "user" edge to the User entity.
func (oluo *OperationLogUpdateOne) SetUser(u *User) *OperationLogUpdateOne {
	return oluo.SetUserID(u.ID)
}

// Mutation returns the OperationLogMutation object of the builder.
func (oluo *OperationLogUpdateOne) Mutation() *OperationLogMutation {
	return oluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (oluo *OperationLogUpdateOne) ClearUser() *OperationLogUpdateOne {
	oluo.mutation.ClearUser()
	return oluo
}

// Where appends a list predicates to the OperationLogUpdate builder.
func (oluo *OperationLogUpdateOne) Where(ps ...predicate.OperationLog) *OperationLogUpdateOne {
	oluo.mutation.Where(ps...)
	return oluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oluo *OperationLogUpdateOne) Select(field string, fields ...string) *OperationLogUpdateOne {
	oluo.fields = append([]string{field}, fields...)
	return oluo
}

// Save executes the query and returns the updated OperationLog entity.
func (oluo *OperationLogUpdateOne) Save(ctx context.Context) (*OperationLog, error) {
	oluo.defaults()
	return withHooks(ctx, oluo.sqlSave, oluo.mutation, oluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oluo *OperationLogUpdateOne) SaveX(ctx context.Context) *OperationLog {
	node, err := oluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oluo *OperationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := oluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oluo *OperationLogUpdateOne) ExecX(ctx context.Context) {
	if err := oluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oluo *OperationLogUpdateOne) defaults() {
	if _, ok := oluo.mutation.UpdatedAt(); !ok && !oluo.mutation.UpdatedAtCleared() {
		v := operationlog.UpdateDefaultUpdatedAt()
		oluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oluo *OperationLogUpdateOne) check() error {
	if oluo.mutation.UserCleared() && len(oluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OperationLog.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oluo *OperationLogUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OperationLogUpdateOne {
	oluo.modifiers = append(oluo.modifiers, modifiers...)
	return oluo
}

func (oluo *OperationLogUpdateOne) sqlSave(ctx context.Context) (_node *OperationLog, err error) {
	if err := oluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operationlog.Table, operationlog.Columns, sqlgraph.NewFieldSpec(operationlog.FieldID, field.TypeInt))
	id, ok := oluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperationLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operationlog.FieldID)
		for _, f := range fields {
			if !operationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oluo.mutation.CreatedAtCleared() {
		_spec.ClearField(operationlog.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oluo.mutation.UpdatedAt(); ok {
		_spec.SetField(operationlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if oluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(operationlog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oluo.mutation.GetType(); ok {
		_spec.SetField(operationlog.FieldType, field.TypeString, value)
	}
	if value, ok := oluo.mutation.Content(); ok {
		_spec.SetField(operationlog.FieldContent, field.TypeString, value)
	}
	if value, ok := oluo.mutation.Metadata(); ok {
		_spec.SetField(operationlog.FieldMetadata, field.TypeJSON, value)
	}
	if oluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.UserTable,
			Columns: []string{operationlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.UserTable,
			Columns: []string{operationlog.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oluo.modifiers...)
	_node = &OperationLog{config: oluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oluo.mutation.done = true
	return _node, nil
}
