// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/go-keg/monorepo/internal/data/account/ent/organization"
	"github.com/go-keg/monorepo/internal/data/account/ent/permission"
	"github.com/go-keg/monorepo/internal/data/account/ent/user"
)

// CreateMembershipInput represents a mutation input for creating memberships.
type CreateMembershipInput struct {
	IsLeader       *bool
	TenantUserID   int
	OrganizationID int
}

// Mutate applies the CreateMembershipInput on the MembershipMutation builder.
func (i *CreateMembershipInput) Mutate(m *MembershipMutation) {
	if v := i.IsLeader; v != nil {
		m.SetIsLeader(*v)
	}
	m.SetTenantUserID(i.TenantUserID)
	m.SetOrganizationID(i.OrganizationID)
}

// SetInput applies the change-set in the CreateMembershipInput on the MembershipCreate builder.
func (c *MembershipCreate) SetInput(i CreateMembershipInput) *MembershipCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMembershipInput represents a mutation input for updating memberships.
type UpdateMembershipInput struct {
	IsLeader *bool
}

// Mutate applies the UpdateMembershipInput on the MembershipMutation builder.
func (i *UpdateMembershipInput) Mutate(m *MembershipMutation) {
	if v := i.IsLeader; v != nil {
		m.SetIsLeader(*v)
	}
}

// SetInput applies the change-set in the UpdateMembershipInput on the MembershipUpdate builder.
func (c *MembershipUpdate) SetInput(i UpdateMembershipInput) *MembershipUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMembershipInput on the MembershipUpdateOne builder.
func (c *MembershipUpdateOne) SetInput(i UpdateMembershipInput) *MembershipUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	Name string
	Type *organization.Type
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	m.SetName(i.Name)
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	Name *string
	Type *organization.Type
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePermissionInput represents a mutation input for creating permissions.
type CreatePermissionInput struct {
	Name        string
	Key         *string
	Type        permission.Type
	Path        *string
	Description *string
	Sort        *int
	Attrs       map[string]interface{}
	IsSystem    *bool
	ParentID    *int
	ChildIDs    []int
}

// Mutate applies the CreatePermissionInput on the PermissionMutation builder.
func (i *CreatePermissionInput) Mutate(m *PermissionMutation) {
	m.SetName(i.Name)
	if v := i.Key; v != nil {
		m.SetKey(*v)
	}
	m.SetType(i.Type)
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.Attrs; v != nil {
		m.SetAttrs(v)
	}
	if v := i.IsSystem; v != nil {
		m.SetIsSystem(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePermissionInput on the PermissionCreate builder.
func (c *PermissionCreate) SetInput(i CreatePermissionInput) *PermissionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePermissionInput represents a mutation input for updating permissions.
type UpdatePermissionInput struct {
	Name             *string
	ClearKey         bool
	Key              *string
	Type             *permission.Type
	ClearPath        bool
	Path             *string
	ClearDescription bool
	Description      *string
	Sort             *int
	ClearAttrs       bool
	Attrs            map[string]interface{}
	IsSystem         *bool
	ClearParent      bool
	ParentID         *int
	ClearChildren    bool
	AddChildIDs      []int
	RemoveChildIDs   []int
}

// Mutate applies the UpdatePermissionInput on the PermissionMutation builder.
func (i *UpdatePermissionInput) Mutate(m *PermissionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearKey {
		m.ClearKey()
	}
	if v := i.Key; v != nil {
		m.SetKey(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearPath {
		m.ClearPath()
	}
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearAttrs {
		m.ClearAttrs()
	}
	if v := i.Attrs; v != nil {
		m.SetAttrs(v)
	}
	if v := i.IsSystem; v != nil {
		m.SetIsSystem(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdate builder.
func (c *PermissionUpdate) SetInput(i UpdatePermissionInput) *PermissionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdateOne builder.
func (c *PermissionUpdateOne) SetInput(i UpdatePermissionInput) *PermissionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTenantInput represents a mutation input for creating tenants.
type CreateTenantInput struct {
	Name     string
	MaxUsers *int
	Features []string
}

// Mutate applies the CreateTenantInput on the TenantMutation builder.
func (i *CreateTenantInput) Mutate(m *TenantMutation) {
	m.SetName(i.Name)
	if v := i.MaxUsers; v != nil {
		m.SetMaxUsers(*v)
	}
	if v := i.Features; v != nil {
		m.SetFeatures(v)
	}
}

// SetInput applies the change-set in the CreateTenantInput on the TenantCreate builder.
func (c *TenantCreate) SetInput(i CreateTenantInput) *TenantCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTenantInput represents a mutation input for updating tenants.
type UpdateTenantInput struct {
	Name           *string
	MaxUsers       *int
	ClearFeatures  bool
	Features       []string
	AppendFeatures []string
}

// Mutate applies the UpdateTenantInput on the TenantMutation builder.
func (i *UpdateTenantInput) Mutate(m *TenantMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.MaxUsers; v != nil {
		m.SetMaxUsers(*v)
	}
	if i.ClearFeatures {
		m.ClearFeatures()
	}
	if v := i.Features; v != nil {
		m.SetFeatures(v)
	}
	if i.AppendFeatures != nil {
		m.AppendFeatures(i.Features)
	}
}

// SetInput applies the change-set in the UpdateTenantInput on the TenantUpdate builder.
func (c *TenantUpdate) SetInput(i UpdateTenantInput) *TenantUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTenantInput on the TenantUpdateOne builder.
func (c *TenantUpdateOne) SetInput(i UpdateTenantInput) *TenantUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTenantRoleInput represents a mutation input for creating tenantroles.
type CreateTenantRoleInput struct {
	Name          string
	Description   *string
	Sort          *int
	PermissionIDs []int
}

// Mutate applies the CreateTenantRoleInput on the TenantRoleMutation builder.
func (i *CreateTenantRoleInput) Mutate(m *TenantRoleMutation) {
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.PermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTenantRoleInput on the TenantRoleCreate builder.
func (c *TenantRoleCreate) SetInput(i CreateTenantRoleInput) *TenantRoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTenantRoleInput represents a mutation input for updating tenantroles.
type UpdateTenantRoleInput struct {
	Name                *string
	ClearDescription    bool
	Description         *string
	Sort                *int
	ClearPermissions    bool
	AddPermissionIDs    []int
	RemovePermissionIDs []int
}

// Mutate applies the UpdateTenantRoleInput on the TenantRoleMutation builder.
func (i *UpdateTenantRoleInput) Mutate(m *TenantRoleMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearPermissions {
		m.ClearPermissions()
	}
	if v := i.AddPermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
	if v := i.RemovePermissionIDs; len(v) > 0 {
		m.RemovePermissionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTenantRoleInput on the TenantRoleUpdate builder.
func (c *TenantRoleUpdate) SetInput(i UpdateTenantRoleInput) *TenantRoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTenantRoleInput on the TenantRoleUpdateOne builder.
func (c *TenantRoleUpdateOne) SetInput(i UpdateTenantRoleInput) *TenantRoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email           string
	Nickname        string
	Avatar          *string
	Password        *string
	Status          *user.Status
	IsAdmin         *bool
	OauthAccountIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetEmail(i.Email)
	m.SetNickname(i.Nickname)
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if v := i.OauthAccountIDs; len(v) > 0 {
		m.AddOauthAccountIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Email                 *string
	Nickname              *string
	ClearAvatar           bool
	Avatar                *string
	ClearPassword         bool
	Password              *string
	Status                *user.Status
	IsAdmin               *bool
	ClearOauthAccounts    bool
	AddOauthAccountIDs    []int
	RemoveOauthAccountIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Nickname; v != nil {
		m.SetNickname(*v)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.IsAdmin; v != nil {
		m.SetIsAdmin(*v)
	}
	if i.ClearOauthAccounts {
		m.ClearOauthAccounts()
	}
	if v := i.AddOauthAccountIDs; len(v) > 0 {
		m.AddOauthAccountIDs(v...)
	}
	if v := i.RemoveOauthAccountIDs; len(v) > 0 {
		m.RemoveOauthAccountIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
