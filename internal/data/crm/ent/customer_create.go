// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contact"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CustomerCreate) SetCreatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCreatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CustomerCreate) SetUpdatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUpdatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *CustomerCreate) SetCreatedBy(i int) *CustomerCreate {
	cc.mutation.SetCreatedBy(i)
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *CustomerCreate) SetUpdatedBy(i int) *CustomerCreate {
	cc.mutation.SetUpdatedBy(i)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUpdatedBy(i *int) *CustomerCreate {
	if i != nil {
		cc.SetUpdatedBy(*i)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CustomerCreate) SetName(s string) *CustomerCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetIndustry sets the "industry" field.
func (cc *CustomerCreate) SetIndustry(s string) *CustomerCreate {
	cc.mutation.SetIndustry(s)
	return cc
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableIndustry(s *string) *CustomerCreate {
	if s != nil {
		cc.SetIndustry(*s)
	}
	return cc
}

// SetSource sets the "source" field.
func (cc *CustomerCreate) SetSource(s string) *CustomerCreate {
	cc.mutation.SetSource(s)
	return cc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableSource(s *string) *CustomerCreate {
	if s != nil {
		cc.SetSource(*s)
	}
	return cc
}

// SetLevel sets the "level" field.
func (cc *CustomerCreate) SetLevel(s string) *CustomerCreate {
	cc.mutation.SetLevel(s)
	return cc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableLevel(s *string) *CustomerCreate {
	if s != nil {
		cc.SetLevel(*s)
	}
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *CustomerCreate) SetMetadata(m map[string]interface{}) *CustomerCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (cc *CustomerCreate) AddContactIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddContactIDs(ids...)
	return cc
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (cc *CustomerCreate) AddContacts(c ...*Contact) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddContactIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (cc *CustomerCreate) AddContractIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddContractIDs(ids...)
	return cc
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (cc *CustomerCreate) AddContracts(c ...*Contract) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddContractIDs(ids...)
}

// AddFollowUpIDs adds the "follow_ups" edge to the FollowUp entity by IDs.
func (cc *CustomerCreate) AddFollowUpIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddFollowUpIDs(ids...)
	return cc
}

// AddFollowUps adds the "follow_ups" edges to the FollowUp entity.
func (cc *CustomerCreate) AddFollowUps(f ...*FollowUp) *CustomerCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cc.AddFollowUpIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := customer.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := customer.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Customer.created_by"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Customer.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Customer.name": %w`, err)}
		}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(customer.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(customer.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Industry(); ok {
		_spec.SetField(customer.FieldIndustry, field.TypeString, value)
		_node.Industry = value
	}
	if value, ok := cc.mutation.Source(); ok {
		_spec.SetField(customer.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := cc.mutation.Level(); ok {
		_spec.SetField(customer.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := cc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContactsTable,
			Columns: []string{customer.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.ContractsTable,
			Columns: []string{customer.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FollowUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.FollowUpsTable,
			Columns: []string{customer.FollowUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	cc.conflict = opts
	return &CustomerUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: cc,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsert) SetUpdatedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUpdatedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *CustomerUpsert) ClearUpdatedAt() *CustomerUpsert {
	u.SetNull(customer.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CustomerUpsert) SetUpdatedBy(v int) *CustomerUpsert {
	u.Set(customer.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUpdatedBy() *CustomerUpsert {
	u.SetExcluded(customer.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CustomerUpsert) AddUpdatedBy(v int) *CustomerUpsert {
	u.Add(customer.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *CustomerUpsert) ClearUpdatedBy() *CustomerUpsert {
	u.SetNull(customer.FieldUpdatedBy)
	return u
}

// SetName sets the "name" field.
func (u *CustomerUpsert) SetName(v string) *CustomerUpsert {
	u.Set(customer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateName() *CustomerUpsert {
	u.SetExcluded(customer.FieldName)
	return u
}

// SetIndustry sets the "industry" field.
func (u *CustomerUpsert) SetIndustry(v string) *CustomerUpsert {
	u.Set(customer.FieldIndustry, v)
	return u
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateIndustry() *CustomerUpsert {
	u.SetExcluded(customer.FieldIndustry)
	return u
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerUpsert) ClearIndustry() *CustomerUpsert {
	u.SetNull(customer.FieldIndustry)
	return u
}

// SetSource sets the "source" field.
func (u *CustomerUpsert) SetSource(v string) *CustomerUpsert {
	u.Set(customer.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateSource() *CustomerUpsert {
	u.SetExcluded(customer.FieldSource)
	return u
}

// ClearSource clears the value of the "source" field.
func (u *CustomerUpsert) ClearSource() *CustomerUpsert {
	u.SetNull(customer.FieldSource)
	return u
}

// SetLevel sets the "level" field.
func (u *CustomerUpsert) SetLevel(v string) *CustomerUpsert {
	u.Set(customer.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateLevel() *CustomerUpsert {
	u.SetExcluded(customer.FieldLevel)
	return u
}

// ClearLevel clears the value of the "level" field.
func (u *CustomerUpsert) ClearLevel() *CustomerUpsert {
	u.SetNull(customer.FieldLevel)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsert) SetMetadata(v map[string]interface{}) *CustomerUpsert {
	u.Set(customer.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateMetadata() *CustomerUpsert {
	u.SetExcluded(customer.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsert) ClearMetadata() *CustomerUpsert {
	u.SetNull(customer.FieldMetadata)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customer.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(customer.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertOne) SetUpdatedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUpdatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *CustomerUpsertOne) ClearUpdatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CustomerUpsertOne) SetUpdatedBy(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CustomerUpsertOne) AddUpdatedBy(v int) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUpdatedBy() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *CustomerUpsertOne) ClearUpdatedBy() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertOne) SetName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetIndustry sets the "industry" field.
func (u *CustomerUpsertOne) SetIndustry(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateIndustry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerUpsertOne) ClearIndustry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearIndustry()
	})
}

// SetSource sets the "source" field.
func (u *CustomerUpsertOne) SetSource(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateSource() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *CustomerUpsertOne) ClearSource() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSource()
	})
}

// SetLevel sets the "level" field.
func (u *CustomerUpsertOne) SetLevel(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateLevel() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *CustomerUpsertOne) ClearLevel() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearLevel()
	})
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertOne) SetMetadata(v map[string]interface{}) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertOne) ClearMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	ccb.conflict = opts
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customer.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(customer.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertBulk) SetUpdatedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUpdatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *CustomerUpsertBulk) ClearUpdatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *CustomerUpsertBulk) SetUpdatedBy(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *CustomerUpsertBulk) AddUpdatedBy(v int) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUpdatedBy() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *CustomerUpsertBulk) ClearUpdatedBy() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetName sets the "name" field.
func (u *CustomerUpsertBulk) SetName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetIndustry sets the "industry" field.
func (u *CustomerUpsertBulk) SetIndustry(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetIndustry(v)
	})
}

// UpdateIndustry sets the "industry" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateIndustry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateIndustry()
	})
}

// ClearIndustry clears the value of the "industry" field.
func (u *CustomerUpsertBulk) ClearIndustry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearIndustry()
	})
}

// SetSource sets the "source" field.
func (u *CustomerUpsertBulk) SetSource(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateSource() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateSource()
	})
}

// ClearSource clears the value of the "source" field.
func (u *CustomerUpsertBulk) ClearSource() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearSource()
	})
}

// SetLevel sets the "level" field.
func (u *CustomerUpsertBulk) SetLevel(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateLevel() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateLevel()
	})
}

// ClearLevel clears the value of the "level" field.
func (u *CustomerUpsertBulk) ClearLevel() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearLevel()
	})
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertBulk) SetMetadata(v map[string]interface{}) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertBulk) ClearMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
