// Code generated by ent, DO NOT EDIT.

package tenantuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldTenantID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldUserID, v))
}

// IsOwner applies equality check predicate on the "is_owner" field. It's identical to IsOwnerEQ.
func IsOwner(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldIsOwner, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldIsActive, v))
}

// LastLoginTenant applies equality check predicate on the "last_login_tenant" field. It's identical to LastLoginTenantEQ.
func LastLoginTenant(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldLastLoginTenant, v))
}

// LastLoginAt applies equality check predicate on the "last_login_at" field. It's identical to LastLoginAtEQ.
func LastLoginAt(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldLastLoginAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNotIn(FieldTenantID, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNotIn(FieldUserID, vs...))
}

// IsOwnerEQ applies the EQ predicate on the "is_owner" field.
func IsOwnerEQ(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldIsOwner, v))
}

// IsOwnerNEQ applies the NEQ predicate on the "is_owner" field.
func IsOwnerNEQ(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldIsOwner, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldIsActive, v))
}

// LastLoginTenantEQ applies the EQ predicate on the "last_login_tenant" field.
func LastLoginTenantEQ(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldLastLoginTenant, v))
}

// LastLoginTenantNEQ applies the NEQ predicate on the "last_login_tenant" field.
func LastLoginTenantNEQ(v bool) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldLastLoginTenant, v))
}

// LastLoginAtEQ applies the EQ predicate on the "last_login_at" field.
func LastLoginAtEQ(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldEQ(FieldLastLoginAt, v))
}

// LastLoginAtNEQ applies the NEQ predicate on the "last_login_at" field.
func LastLoginAtNEQ(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNEQ(FieldLastLoginAt, v))
}

// LastLoginAtIn applies the In predicate on the "last_login_at" field.
func LastLoginAtIn(vs ...time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldIn(FieldLastLoginAt, vs...))
}

// LastLoginAtNotIn applies the NotIn predicate on the "last_login_at" field.
func LastLoginAtNotIn(vs ...time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNotIn(FieldLastLoginAt, vs...))
}

// LastLoginAtGT applies the GT predicate on the "last_login_at" field.
func LastLoginAtGT(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldGT(FieldLastLoginAt, v))
}

// LastLoginAtGTE applies the GTE predicate on the "last_login_at" field.
func LastLoginAtGTE(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldGTE(FieldLastLoginAt, v))
}

// LastLoginAtLT applies the LT predicate on the "last_login_at" field.
func LastLoginAtLT(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldLT(FieldLastLoginAt, v))
}

// LastLoginAtLTE applies the LTE predicate on the "last_login_at" field.
func LastLoginAtLTE(v time.Time) predicate.TenantUser {
	return predicate.TenantUser(sql.FieldLTE(FieldLastLoginAt, v))
}

// LastLoginAtIsNil applies the IsNil predicate on the "last_login_at" field.
func LastLoginAtIsNil() predicate.TenantUser {
	return predicate.TenantUser(sql.FieldIsNull(FieldLastLoginAt))
}

// LastLoginAtNotNil applies the NotNil predicate on the "last_login_at" field.
func LastLoginAtNotNil() predicate.TenantUser {
	return predicate.TenantUser(sql.FieldNotNull(FieldLastLoginAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.TenantRole) predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := newRolesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberships applies the HasEdge predicate on the "memberships" edge.
func HasMemberships() predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembershipsTable, MembershipsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembershipsWith applies the HasEdge predicate on the "memberships" edge with a given conditions (other predicates).
func HasMembershipsWith(preds ...predicate.Membership) predicate.TenantUser {
	return predicate.TenantUser(func(s *sql.Selector) {
		step := newMembershipsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TenantUser) predicate.TenantUser {
	return predicate.TenantUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TenantUser) predicate.TenantUser {
	return predicate.TenantUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TenantUser) predicate.TenantUser {
	return predicate.TenantUser(sql.NotPredicates(p))
}
