package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70-dev

import (
	"context"

	"github.com/go-keg/keg/contrib/gql"
	"github.com/go-keg/monorepo/internal/app/account/biz"
	"github.com/go-keg/monorepo/internal/app/account/server/auth"
	"github.com/go-keg/monorepo/internal/app/account/service/graphql/model"
	"github.com/go-keg/monorepo/internal/data/account/ent"
)

// LinkGoogleAccount is the resolver for the linkGoogleAccount field.
func (r *mutationResolver) LinkGoogleAccount(ctx context.Context, state string, code string) (bool, error) {
	info, err := r.oauth.GoogleUserInfo(ctx, code)
	if err != nil {
		return false, gql.Error(err.Error())
	}
	err = r.userRepo.BindOAuthAccount(ctx, ent.OAuthAccount{
		UserID:         auth.GetUserID(ctx),
		Provider:       biz.OAuthProviderGoogle,
		ProviderUserID: info.ID,
		Profile:        info.Map(),
	})
	if err != nil {
		return false, gql.Error("failed to link google account")
	}
	return true, nil
}

// UnlinkGoogleAccount is the resolver for the unlinkGoogleAccount field.
func (r *mutationResolver) UnlinkGoogleAccount(ctx context.Context) (bool, error) {
	err := r.userRepo.UnBindOAuthAccount(ctx, auth.GetUserID(ctx), biz.OAuthProviderGoogle)
	if err != nil {
		return false, err
	}
	return true, nil
}

// GoogleOAuthLogin is the resolver for the googleOAuthLogin field.
func (r *queryResolver) GoogleOAuthLogin(ctx context.Context, state string, code string) (*model.LoginReply, error) {
	info, err := r.oauth.GoogleUserInfo(ctx, code)
	if err != nil {
		return nil, gql.Error(err.Error())
	}
	user, err := r.userRepo.FindUserByOAuth(ctx, biz.OAuthProviderGoogle, info.ID)
	if ent.IsNotFound(err) {
		return nil, gql.Error("failed to find user")
	} else if err != nil {
		return nil, err
	}
	return r.LoginReply(ctx, user)
}

// GoogleOAuthRegister is the resolver for the googleOAuthRegister field.
func (r *queryResolver) GoogleOAuthRegister(ctx context.Context, state string, code string) (*model.LoginReply, error) {
	info, err := r.oauth.GoogleUserInfo(ctx, code)
	if err != nil {
		return nil, gql.Error(err.Error())
	}
	_, err = r.userRepo.FindUserByEmail(ctx, info.Email)
	if ent.IsNotFound(err) {
		// 创建新用户并绑定
		user, err := r.userRepo.CreateUser(ctx, ent.User{
			Email:    info.Email,
			Nickname: info.Name,
			Avatar:   info.Picture,
		})
		if err != nil {
			return nil, err
		}
		return r.LoginReply(ctx, user)
	} else if err != nil {
		return nil, err
	}
	return nil, gql.Error("failed to register user")
}
