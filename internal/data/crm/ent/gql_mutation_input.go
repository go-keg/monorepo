// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
)

// CreateContactInput represents a mutation input for creating contacts.
type CreateContactInput struct {
	Name       string
	Position   *string
	Phone      *string
	Email      *string
	CustomerID int
}

// Mutate applies the CreateContactInput on the ContactMutation builder.
func (i *CreateContactInput) Mutate(m *ContactMutation) {
	m.SetName(i.Name)
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	m.SetCustomerID(i.CustomerID)
}

// SetInput applies the change-set in the CreateContactInput on the ContactCreate builder.
func (c *ContactCreate) SetInput(i CreateContactInput) *ContactCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateContactInput represents a mutation input for updating contacts.
type UpdateContactInput struct {
	Name          *string
	ClearPosition bool
	Position      *string
	ClearPhone    bool
	Phone         *string
	ClearEmail    bool
	Email         *string
}

// Mutate applies the UpdateContactInput on the ContactMutation builder.
func (i *UpdateContactInput) Mutate(m *ContactMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearPosition {
		m.ClearPosition()
	}
	if v := i.Position; v != nil {
		m.SetPosition(*v)
	}
	if i.ClearPhone {
		m.ClearPhone()
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
}

// SetInput applies the change-set in the UpdateContactInput on the ContactUpdate builder.
func (c *ContactUpdate) SetInput(i UpdateContactInput) *ContactUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateContactInput on the ContactUpdateOne builder.
func (c *ContactUpdateOne) SetInput(i UpdateContactInput) *ContactUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateContractInput represents a mutation input for creating contracts.
type CreateContractInput struct {
	ContractNo string
	Amount     *float64
	SignedAt   *time.Time
	EndAt      *time.Time
	CustomerID int
	PaymentIDs []int
}

// Mutate applies the CreateContractInput on the ContractMutation builder.
func (i *CreateContractInput) Mutate(m *ContractMutation) {
	m.SetContractNo(i.ContractNo)
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.SignedAt; v != nil {
		m.SetSignedAt(*v)
	}
	if v := i.EndAt; v != nil {
		m.SetEndAt(*v)
	}
	m.SetCustomerID(i.CustomerID)
	if v := i.PaymentIDs; len(v) > 0 {
		m.AddPaymentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateContractInput on the ContractCreate builder.
func (c *ContractCreate) SetInput(i CreateContractInput) *ContractCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateContractInput represents a mutation input for updating contracts.
type UpdateContractInput struct {
	ContractNo       *string
	Amount           *float64
	ClearSignedAt    bool
	SignedAt         *time.Time
	ClearEndAt       bool
	EndAt            *time.Time
	ClearPayments    bool
	AddPaymentIDs    []int
	RemovePaymentIDs []int
}

// Mutate applies the UpdateContractInput on the ContractMutation builder.
func (i *UpdateContractInput) Mutate(m *ContractMutation) {
	if v := i.ContractNo; v != nil {
		m.SetContractNo(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if i.ClearSignedAt {
		m.ClearSignedAt()
	}
	if v := i.SignedAt; v != nil {
		m.SetSignedAt(*v)
	}
	if i.ClearEndAt {
		m.ClearEndAt()
	}
	if v := i.EndAt; v != nil {
		m.SetEndAt(*v)
	}
	if i.ClearPayments {
		m.ClearPayments()
	}
	if v := i.AddPaymentIDs; len(v) > 0 {
		m.AddPaymentIDs(v...)
	}
	if v := i.RemovePaymentIDs; len(v) > 0 {
		m.RemovePaymentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateContractInput on the ContractUpdate builder.
func (c *ContractUpdate) SetInput(i UpdateContractInput) *ContractUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateContractInput on the ContractUpdateOne builder.
func (c *ContractUpdateOne) SetInput(i UpdateContractInput) *ContractUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Name     string
	Industry *string
	Source   *string
	Level    *string
	Metadata map[string]interface{}
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetName(i.Name)
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	Name          *string
	ClearIndustry bool
	Industry      *string
	ClearSource   bool
	Source        *string
	ClearLevel    bool
	Level         *string
	ClearMetadata bool
	Metadata      map[string]interface{}
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearIndustry {
		m.ClearIndustry()
	}
	if v := i.Industry; v != nil {
		m.SetIndustry(*v)
	}
	if i.ClearSource {
		m.ClearSource()
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if i.ClearLevel {
		m.ClearLevel()
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFollowUpInput represents a mutation input for creating followups.
type CreateFollowUpInput struct {
	Type       *followup.Type
	Content    string
	FollowedAt *time.Time
	CustomerID int
}

// Mutate applies the CreateFollowUpInput on the FollowUpMutation builder.
func (i *CreateFollowUpInput) Mutate(m *FollowUpMutation) {
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	m.SetContent(i.Content)
	if v := i.FollowedAt; v != nil {
		m.SetFollowedAt(*v)
	}
	m.SetCustomerID(i.CustomerID)
}

// SetInput applies the change-set in the CreateFollowUpInput on the FollowUpCreate builder.
func (c *FollowUpCreate) SetInput(i CreateFollowUpInput) *FollowUpCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFollowUpInput represents a mutation input for updating followups.
type UpdateFollowUpInput struct {
	Type       *followup.Type
	Content    *string
	FollowedAt *time.Time
}

// Mutate applies the UpdateFollowUpInput on the FollowUpMutation builder.
func (i *UpdateFollowUpInput) Mutate(m *FollowUpMutation) {
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.FollowedAt; v != nil {
		m.SetFollowedAt(*v)
	}
}

// SetInput applies the change-set in the UpdateFollowUpInput on the FollowUpUpdate builder.
func (c *FollowUpUpdate) SetInput(i UpdateFollowUpInput) *FollowUpUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFollowUpInput on the FollowUpUpdateOne builder.
func (c *FollowUpUpdateOne) SetInput(i UpdateFollowUpInput) *FollowUpUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePaymentInput represents a mutation input for creating payments.
type CreatePaymentInput struct {
	Amount     *float64
	ReceivedAt *time.Time
	ContractID int
}

// Mutate applies the CreatePaymentInput on the PaymentMutation builder.
func (i *CreatePaymentInput) Mutate(m *PaymentMutation) {
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if v := i.ReceivedAt; v != nil {
		m.SetReceivedAt(*v)
	}
	m.SetContractID(i.ContractID)
}

// SetInput applies the change-set in the CreatePaymentInput on the PaymentCreate builder.
func (c *PaymentCreate) SetInput(i CreatePaymentInput) *PaymentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePaymentInput represents a mutation input for updating payments.
type UpdatePaymentInput struct {
	Amount          *float64
	ClearReceivedAt bool
	ReceivedAt      *time.Time
}

// Mutate applies the UpdatePaymentInput on the PaymentMutation builder.
func (i *UpdatePaymentInput) Mutate(m *PaymentMutation) {
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if i.ClearReceivedAt {
		m.ClearReceivedAt()
	}
	if v := i.ReceivedAt; v != nil {
		m.SetReceivedAt(*v)
	}
}

// SetInput applies the change-set in the UpdatePaymentInput on the PaymentUpdate builder.
func (c *PaymentUpdate) SetInput(i UpdatePaymentInput) *PaymentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePaymentInput on the PaymentUpdateOne builder.
func (c *PaymentUpdateOne) SetInput(i UpdatePaymentInput) *PaymentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
