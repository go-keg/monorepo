// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/go-keg/monorepo/internal/data/account/ent/membership"
	"github.com/go-keg/monorepo/internal/data/account/ent/oauthaccount"
	"github.com/go-keg/monorepo/internal/data/account/ent/oauthprovider"
	"github.com/go-keg/monorepo/internal/data/account/ent/organization"
	"github.com/go-keg/monorepo/internal/data/account/ent/permission"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
	"github.com/go-keg/monorepo/internal/data/account/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodesField      = "nodes"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// MembershipEdge is the edge representation of Membership.
type MembershipEdge struct {
	Node   *Membership `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// MembershipConnection is the connection containing edges to Membership.
type MembershipConnection struct {
	Edges      []*MembershipEdge `json:"edges"`
	Nodes      []*Membership     `json:"nodes"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *MembershipConnection) build(nodes []*Membership, pager *membershipPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Membership
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Membership {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Membership {
			return nodes[i]
		}
	}
	c.Edges = make([]*MembershipEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MembershipEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MembershipPaginateOption enables pagination customization.
type MembershipPaginateOption func(*membershipPager) error

// WithMembershipOrder configures pagination ordering.
func WithMembershipOrder(order *MembershipOrder) MembershipPaginateOption {
	if order == nil {
		order = DefaultMembershipOrder
	}
	o := *order
	return func(pager *membershipPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMembershipOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMembershipFilter configures pagination filter.
func WithMembershipFilter(filter func(*MembershipQuery) (*MembershipQuery, error)) MembershipPaginateOption {
	return func(pager *membershipPager) error {
		if filter == nil {
			return errors.New("MembershipQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type membershipPager struct {
	reverse bool
	order   *MembershipOrder
	filter  func(*MembershipQuery) (*MembershipQuery, error)
}

func newMembershipPager(opts []MembershipPaginateOption, reverse bool) (*membershipPager, error) {
	pager := &membershipPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMembershipOrder
	}
	return pager, nil
}

func (p *membershipPager) applyFilter(query *MembershipQuery) (*MembershipQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *membershipPager) toCursor(m *Membership) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *membershipPager) applyCursors(query *MembershipQuery, after, before *Cursor) (*MembershipQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMembershipOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *membershipPager) applyOrder(query *MembershipQuery) *MembershipQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMembershipOrder.Field {
		query = query.Order(DefaultMembershipOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *membershipPager) orderExpr(query *MembershipQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMembershipOrder.Field {
			b.Comma().Ident(DefaultMembershipOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Membership.
func (m *MembershipQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MembershipPaginateOption,
) (*MembershipConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMembershipPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MembershipConnection{Edges: []*MembershipEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MembershipOrderFieldCreatedAt orders Membership by created_at.
	MembershipOrderFieldCreatedAt = &MembershipOrderField{
		Value: func(m *Membership) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: membership.FieldCreatedAt,
		toTerm: membership.ByCreatedAt,
		toCursor: func(m *Membership) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
	// MembershipOrderFieldUpdatedAt orders Membership by updated_at.
	MembershipOrderFieldUpdatedAt = &MembershipOrderField{
		Value: func(m *Membership) (ent.Value, error) {
			return m.UpdatedAt, nil
		},
		column: membership.FieldUpdatedAt,
		toTerm: membership.ByUpdatedAt,
		toCursor: func(m *Membership) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MembershipOrderField) String() string {
	var str string
	switch f.column {
	case MembershipOrderFieldCreatedAt.column:
		str = "createdAt"
	case MembershipOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MembershipOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MembershipOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MembershipOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *MembershipOrderFieldCreatedAt
	case "updatedAt":
		*f = *MembershipOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MembershipOrderField", str)
	}
	return nil
}

// MembershipOrderField defines the ordering field of Membership.
type MembershipOrderField struct {
	// Value extracts the ordering value from the given Membership.
	Value    func(*Membership) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) membership.OrderOption
	toCursor func(*Membership) Cursor
}

// MembershipOrder defines the ordering of Membership.
type MembershipOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *MembershipOrderField `json:"field"`
}

// DefaultMembershipOrder is the default ordering of Membership.
var DefaultMembershipOrder = &MembershipOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MembershipOrderField{
		Value: func(m *Membership) (ent.Value, error) {
			return m.ID, nil
		},
		column: membership.FieldID,
		toTerm: membership.ByID,
		toCursor: func(m *Membership) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Membership into MembershipEdge.
func (m *Membership) ToEdge(order *MembershipOrder) *MembershipEdge {
	if order == nil {
		order = DefaultMembershipOrder
	}
	return &MembershipEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// OAuthAccountEdge is the edge representation of OAuthAccount.
type OAuthAccountEdge struct {
	Node   *OAuthAccount `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OAuthAccountConnection is the connection containing edges to OAuthAccount.
type OAuthAccountConnection struct {
	Edges      []*OAuthAccountEdge `json:"edges"`
	Nodes      []*OAuthAccount     `json:"nodes"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *OAuthAccountConnection) build(nodes []*OAuthAccount, pager *oauthaccountPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthAccount
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthAccount {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthAccount {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthAccountEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthAccountEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthAccountPaginateOption enables pagination customization.
type OAuthAccountPaginateOption func(*oauthaccountPager) error

// WithOAuthAccountOrder configures pagination ordering.
func WithOAuthAccountOrder(order *OAuthAccountOrder) OAuthAccountPaginateOption {
	if order == nil {
		order = DefaultOAuthAccountOrder
	}
	o := *order
	return func(pager *oauthaccountPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthAccountOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthAccountFilter configures pagination filter.
func WithOAuthAccountFilter(filter func(*OAuthAccountQuery) (*OAuthAccountQuery, error)) OAuthAccountPaginateOption {
	return func(pager *oauthaccountPager) error {
		if filter == nil {
			return errors.New("OAuthAccountQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthaccountPager struct {
	reverse bool
	order   *OAuthAccountOrder
	filter  func(*OAuthAccountQuery) (*OAuthAccountQuery, error)
}

func newOAuthAccountPager(opts []OAuthAccountPaginateOption, reverse bool) (*oauthaccountPager, error) {
	pager := &oauthaccountPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthAccountOrder
	}
	return pager, nil
}

func (p *oauthaccountPager) applyFilter(query *OAuthAccountQuery) (*OAuthAccountQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthaccountPager) toCursor(oa *OAuthAccount) Cursor {
	return p.order.Field.toCursor(oa)
}

func (p *oauthaccountPager) applyCursors(query *OAuthAccountQuery, after, before *Cursor) (*OAuthAccountQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOAuthAccountOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *oauthaccountPager) applyOrder(query *OAuthAccountQuery) *OAuthAccountQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOAuthAccountOrder.Field {
		query = query.Order(DefaultOAuthAccountOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *oauthaccountPager) orderExpr(query *OAuthAccountQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthAccountOrder.Field {
			b.Comma().Ident(DefaultOAuthAccountOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthAccount.
func (oa *OAuthAccountQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthAccountPaginateOption,
) (*OAuthAccountConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthAccountPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if oa, err = pager.applyFilter(oa); err != nil {
		return nil, err
	}
	conn := &OAuthAccountConnection{Edges: []*OAuthAccountEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := oa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if oa, err = pager.applyCursors(oa, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		oa.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := oa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	oa = pager.applyOrder(oa)
	nodes, err := oa.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OAuthAccountOrderFieldCreatedAt orders OAuthAccount by created_at.
	OAuthAccountOrderFieldCreatedAt = &OAuthAccountOrderField{
		Value: func(oa *OAuthAccount) (ent.Value, error) {
			return oa.CreatedAt, nil
		},
		column: oauthaccount.FieldCreatedAt,
		toTerm: oauthaccount.ByCreatedAt,
		toCursor: func(oa *OAuthAccount) Cursor {
			return Cursor{
				ID:    oa.ID,
				Value: oa.CreatedAt,
			}
		},
	}
	// OAuthAccountOrderFieldUpdatedAt orders OAuthAccount by updated_at.
	OAuthAccountOrderFieldUpdatedAt = &OAuthAccountOrderField{
		Value: func(oa *OAuthAccount) (ent.Value, error) {
			return oa.UpdatedAt, nil
		},
		column: oauthaccount.FieldUpdatedAt,
		toTerm: oauthaccount.ByUpdatedAt,
		toCursor: func(oa *OAuthAccount) Cursor {
			return Cursor{
				ID:    oa.ID,
				Value: oa.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OAuthAccountOrderField) String() string {
	var str string
	switch f.column {
	case OAuthAccountOrderFieldCreatedAt.column:
		str = "createdAt"
	case OAuthAccountOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OAuthAccountOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OAuthAccountOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OAuthAccountOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OAuthAccountOrderFieldCreatedAt
	case "updatedAt":
		*f = *OAuthAccountOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid OAuthAccountOrderField", str)
	}
	return nil
}

// OAuthAccountOrderField defines the ordering field of OAuthAccount.
type OAuthAccountOrderField struct {
	// Value extracts the ordering value from the given OAuthAccount.
	Value    func(*OAuthAccount) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) oauthaccount.OrderOption
	toCursor func(*OAuthAccount) Cursor
}

// OAuthAccountOrder defines the ordering of OAuthAccount.
type OAuthAccountOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OAuthAccountOrderField `json:"field"`
}

// DefaultOAuthAccountOrder is the default ordering of OAuthAccount.
var DefaultOAuthAccountOrder = &OAuthAccountOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OAuthAccountOrderField{
		Value: func(oa *OAuthAccount) (ent.Value, error) {
			return oa.ID, nil
		},
		column: oauthaccount.FieldID,
		toTerm: oauthaccount.ByID,
		toCursor: func(oa *OAuthAccount) Cursor {
			return Cursor{ID: oa.ID}
		},
	},
}

// ToEdge converts OAuthAccount into OAuthAccountEdge.
func (oa *OAuthAccount) ToEdge(order *OAuthAccountOrder) *OAuthAccountEdge {
	if order == nil {
		order = DefaultOAuthAccountOrder
	}
	return &OAuthAccountEdge{
		Node:   oa,
		Cursor: order.Field.toCursor(oa),
	}
}

// OAuthProviderEdge is the edge representation of OAuthProvider.
type OAuthProviderEdge struct {
	Node   *OAuthProvider `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// OAuthProviderConnection is the connection containing edges to OAuthProvider.
type OAuthProviderConnection struct {
	Edges      []*OAuthProviderEdge `json:"edges"`
	Nodes      []*OAuthProvider     `json:"nodes"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *OAuthProviderConnection) build(nodes []*OAuthProvider, pager *oauthproviderPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *OAuthProvider
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *OAuthProvider {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *OAuthProvider {
			return nodes[i]
		}
	}
	c.Edges = make([]*OAuthProviderEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OAuthProviderEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OAuthProviderPaginateOption enables pagination customization.
type OAuthProviderPaginateOption func(*oauthproviderPager) error

// WithOAuthProviderOrder configures pagination ordering.
func WithOAuthProviderOrder(order *OAuthProviderOrder) OAuthProviderPaginateOption {
	if order == nil {
		order = DefaultOAuthProviderOrder
	}
	o := *order
	return func(pager *oauthproviderPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOAuthProviderOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOAuthProviderFilter configures pagination filter.
func WithOAuthProviderFilter(filter func(*OAuthProviderQuery) (*OAuthProviderQuery, error)) OAuthProviderPaginateOption {
	return func(pager *oauthproviderPager) error {
		if filter == nil {
			return errors.New("OAuthProviderQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type oauthproviderPager struct {
	reverse bool
	order   *OAuthProviderOrder
	filter  func(*OAuthProviderQuery) (*OAuthProviderQuery, error)
}

func newOAuthProviderPager(opts []OAuthProviderPaginateOption, reverse bool) (*oauthproviderPager, error) {
	pager := &oauthproviderPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOAuthProviderOrder
	}
	return pager, nil
}

func (p *oauthproviderPager) applyFilter(query *OAuthProviderQuery) (*OAuthProviderQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *oauthproviderPager) toCursor(op *OAuthProvider) Cursor {
	return p.order.Field.toCursor(op)
}

func (p *oauthproviderPager) applyCursors(query *OAuthProviderQuery, after, before *Cursor) (*OAuthProviderQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOAuthProviderOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *oauthproviderPager) applyOrder(query *OAuthProviderQuery) *OAuthProviderQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOAuthProviderOrder.Field {
		query = query.Order(DefaultOAuthProviderOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *oauthproviderPager) orderExpr(query *OAuthProviderQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOAuthProviderOrder.Field {
			b.Comma().Ident(DefaultOAuthProviderOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to OAuthProvider.
func (op *OAuthProviderQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OAuthProviderPaginateOption,
) (*OAuthProviderConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOAuthProviderPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if op, err = pager.applyFilter(op); err != nil {
		return nil, err
	}
	conn := &OAuthProviderConnection{Edges: []*OAuthProviderEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := op.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if op, err = pager.applyCursors(op, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		op.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := op.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := op.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	op = pager.applyOrder(op)
	nodes, err := op.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OAuthProviderOrderField defines the ordering field of OAuthProvider.
type OAuthProviderOrderField struct {
	// Value extracts the ordering value from the given OAuthProvider.
	Value    func(*OAuthProvider) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) oauthprovider.OrderOption
	toCursor func(*OAuthProvider) Cursor
}

// OAuthProviderOrder defines the ordering of OAuthProvider.
type OAuthProviderOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *OAuthProviderOrderField `json:"field"`
}

// DefaultOAuthProviderOrder is the default ordering of OAuthProvider.
var DefaultOAuthProviderOrder = &OAuthProviderOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OAuthProviderOrderField{
		Value: func(op *OAuthProvider) (ent.Value, error) {
			return op.ID, nil
		},
		column: oauthprovider.FieldID,
		toTerm: oauthprovider.ByID,
		toCursor: func(op *OAuthProvider) Cursor {
			return Cursor{ID: op.ID}
		},
	},
}

// ToEdge converts OAuthProvider into OAuthProviderEdge.
func (op *OAuthProvider) ToEdge(order *OAuthProviderOrder) *OAuthProviderEdge {
	if order == nil {
		order = DefaultOAuthProviderOrder
	}
	return &OAuthProviderEdge{
		Node:   op,
		Cursor: order.Field.toCursor(op),
	}
}

// OrganizationEdge is the edge representation of Organization.
type OrganizationEdge struct {
	Node   *Organization `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// OrganizationConnection is the connection containing edges to Organization.
type OrganizationConnection struct {
	Edges      []*OrganizationEdge `json:"edges"`
	Nodes      []*Organization     `json:"nodes"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *OrganizationConnection) build(nodes []*Organization, pager *organizationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Organization
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Organization {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Organization {
			return nodes[i]
		}
	}
	c.Edges = make([]*OrganizationEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OrganizationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OrganizationPaginateOption enables pagination customization.
type OrganizationPaginateOption func(*organizationPager) error

// WithOrganizationOrder configures pagination ordering.
func WithOrganizationOrder(order *OrganizationOrder) OrganizationPaginateOption {
	if order == nil {
		order = DefaultOrganizationOrder
	}
	o := *order
	return func(pager *organizationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOrganizationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOrganizationFilter configures pagination filter.
func WithOrganizationFilter(filter func(*OrganizationQuery) (*OrganizationQuery, error)) OrganizationPaginateOption {
	return func(pager *organizationPager) error {
		if filter == nil {
			return errors.New("OrganizationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type organizationPager struct {
	reverse bool
	order   *OrganizationOrder
	filter  func(*OrganizationQuery) (*OrganizationQuery, error)
}

func newOrganizationPager(opts []OrganizationPaginateOption, reverse bool) (*organizationPager, error) {
	pager := &organizationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOrganizationOrder
	}
	return pager, nil
}

func (p *organizationPager) applyFilter(query *OrganizationQuery) (*OrganizationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *organizationPager) toCursor(o *Organization) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *organizationPager) applyCursors(query *OrganizationQuery, after, before *Cursor) (*OrganizationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOrganizationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *organizationPager) applyOrder(query *OrganizationQuery) *OrganizationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOrganizationOrder.Field {
		query = query.Order(DefaultOrganizationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *organizationPager) orderExpr(query *OrganizationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOrganizationOrder.Field {
			b.Comma().Ident(DefaultOrganizationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Organization.
func (o *OrganizationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OrganizationPaginateOption,
) (*OrganizationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOrganizationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OrganizationConnection{Edges: []*OrganizationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if o, err = pager.applyCursors(o, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	o = pager.applyOrder(o)
	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// OrganizationOrderFieldCreatedAt orders Organization by created_at.
	OrganizationOrderFieldCreatedAt = &OrganizationOrderField{
		Value: func(o *Organization) (ent.Value, error) {
			return o.CreatedAt, nil
		},
		column: organization.FieldCreatedAt,
		toTerm: organization.ByCreatedAt,
		toCursor: func(o *Organization) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.CreatedAt,
			}
		},
	}
	// OrganizationOrderFieldUpdatedAt orders Organization by updated_at.
	OrganizationOrderFieldUpdatedAt = &OrganizationOrderField{
		Value: func(o *Organization) (ent.Value, error) {
			return o.UpdatedAt, nil
		},
		column: organization.FieldUpdatedAt,
		toTerm: organization.ByUpdatedAt,
		toCursor: func(o *Organization) Cursor {
			return Cursor{
				ID:    o.ID,
				Value: o.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f OrganizationOrderField) String() string {
	var str string
	switch f.column {
	case OrganizationOrderFieldCreatedAt.column:
		str = "createdAt"
	case OrganizationOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f OrganizationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *OrganizationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("OrganizationOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *OrganizationOrderFieldCreatedAt
	case "updatedAt":
		*f = *OrganizationOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid OrganizationOrderField", str)
	}
	return nil
}

// OrganizationOrderField defines the ordering field of Organization.
type OrganizationOrderField struct {
	// Value extracts the ordering value from the given Organization.
	Value    func(*Organization) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) organization.OrderOption
	toCursor func(*Organization) Cursor
}

// OrganizationOrder defines the ordering of Organization.
type OrganizationOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *OrganizationOrderField `json:"field"`
}

// DefaultOrganizationOrder is the default ordering of Organization.
var DefaultOrganizationOrder = &OrganizationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OrganizationOrderField{
		Value: func(o *Organization) (ent.Value, error) {
			return o.ID, nil
		},
		column: organization.FieldID,
		toTerm: organization.ByID,
		toCursor: func(o *Organization) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Organization into OrganizationEdge.
func (o *Organization) ToEdge(order *OrganizationOrder) *OrganizationEdge {
	if order == nil {
		order = DefaultOrganizationOrder
	}
	return &OrganizationEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}

// PermissionEdge is the edge representation of Permission.
type PermissionEdge struct {
	Node   *Permission `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// PermissionConnection is the connection containing edges to Permission.
type PermissionConnection struct {
	Edges      []*PermissionEdge `json:"edges"`
	Nodes      []*Permission     `json:"nodes"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *PermissionConnection) build(nodes []*Permission, pager *permissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Permission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Permission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Permission {
			return nodes[i]
		}
	}
	c.Edges = make([]*PermissionEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PermissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PermissionPaginateOption enables pagination customization.
type PermissionPaginateOption func(*permissionPager) error

// WithPermissionOrder configures pagination ordering.
func WithPermissionOrder(order *PermissionOrder) PermissionPaginateOption {
	if order == nil {
		order = DefaultPermissionOrder
	}
	o := *order
	return func(pager *permissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPermissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPermissionFilter configures pagination filter.
func WithPermissionFilter(filter func(*PermissionQuery) (*PermissionQuery, error)) PermissionPaginateOption {
	return func(pager *permissionPager) error {
		if filter == nil {
			return errors.New("PermissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type permissionPager struct {
	reverse bool
	order   *PermissionOrder
	filter  func(*PermissionQuery) (*PermissionQuery, error)
}

func newPermissionPager(opts []PermissionPaginateOption, reverse bool) (*permissionPager, error) {
	pager := &permissionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPermissionOrder
	}
	return pager, nil
}

func (p *permissionPager) applyFilter(query *PermissionQuery) (*PermissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *permissionPager) toCursor(pe *Permission) Cursor {
	return p.order.Field.toCursor(pe)
}

func (p *permissionPager) applyCursors(query *PermissionQuery, after, before *Cursor) (*PermissionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPermissionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *permissionPager) applyOrder(query *PermissionQuery) *PermissionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPermissionOrder.Field {
		query = query.Order(DefaultPermissionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *permissionPager) orderExpr(query *PermissionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPermissionOrder.Field {
			b.Comma().Ident(DefaultPermissionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Permission.
func (pe *PermissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PermissionPaginateOption,
) (*PermissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPermissionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pe, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PermissionConnection{Edges: []*PermissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pe, err = pager.applyCursors(pe, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pe.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	pe = pager.applyOrder(pe)
	nodes, err := pe.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PermissionOrderFieldCreatedAt orders Permission by created_at.
	PermissionOrderFieldCreatedAt = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.CreatedAt, nil
		},
		column: permission.FieldCreatedAt,
		toTerm: permission.ByCreatedAt,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.CreatedAt,
			}
		},
	}
	// PermissionOrderFieldUpdatedAt orders Permission by updated_at.
	PermissionOrderFieldUpdatedAt = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.UpdatedAt, nil
		},
		column: permission.FieldUpdatedAt,
		toTerm: permission.ByUpdatedAt,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.UpdatedAt,
			}
		},
	}
	// PermissionOrderFieldName orders Permission by name.
	PermissionOrderFieldName = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.Name, nil
		},
		column: permission.FieldName,
		toTerm: permission.ByName,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.Name,
			}
		},
	}
	// PermissionOrderFieldSort orders Permission by sort.
	PermissionOrderFieldSort = &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.Sort, nil
		},
		column: permission.FieldSort,
		toTerm: permission.BySort,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{
				ID:    pe.ID,
				Value: pe.Sort,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PermissionOrderField) String() string {
	var str string
	switch f.column {
	case PermissionOrderFieldCreatedAt.column:
		str = "createdAt"
	case PermissionOrderFieldUpdatedAt.column:
		str = "updatedAt"
	case PermissionOrderFieldName.column:
		str = "name"
	case PermissionOrderFieldSort.column:
		str = "sort"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PermissionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PermissionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PermissionOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *PermissionOrderFieldCreatedAt
	case "updatedAt":
		*f = *PermissionOrderFieldUpdatedAt
	case "name":
		*f = *PermissionOrderFieldName
	case "sort":
		*f = *PermissionOrderFieldSort
	default:
		return fmt.Errorf("%s is not a valid PermissionOrderField", str)
	}
	return nil
}

// PermissionOrderField defines the ordering field of Permission.
type PermissionOrderField struct {
	// Value extracts the ordering value from the given Permission.
	Value    func(*Permission) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) permission.OrderOption
	toCursor func(*Permission) Cursor
}

// PermissionOrder defines the ordering of Permission.
type PermissionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *PermissionOrderField `json:"field"`
}

// DefaultPermissionOrder is the default ordering of Permission.
var DefaultPermissionOrder = &PermissionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PermissionOrderField{
		Value: func(pe *Permission) (ent.Value, error) {
			return pe.ID, nil
		},
		column: permission.FieldID,
		toTerm: permission.ByID,
		toCursor: func(pe *Permission) Cursor {
			return Cursor{ID: pe.ID}
		},
	},
}

// ToEdge converts Permission into PermissionEdge.
func (pe *Permission) ToEdge(order *PermissionOrder) *PermissionEdge {
	if order == nil {
		order = DefaultPermissionOrder
	}
	return &PermissionEdge{
		Node:   pe,
		Cursor: order.Field.toCursor(pe),
	}
}

// TenantEdge is the edge representation of Tenant.
type TenantEdge struct {
	Node   *Tenant `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TenantConnection is the connection containing edges to Tenant.
type TenantConnection struct {
	Edges      []*TenantEdge `json:"edges"`
	Nodes      []*Tenant     `json:"nodes"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TenantConnection) build(nodes []*Tenant, pager *tenantPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tenant
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tenant {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tenant {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenantEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenantEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenantPaginateOption enables pagination customization.
type TenantPaginateOption func(*tenantPager) error

// WithTenantOrder configures pagination ordering.
func WithTenantOrder(order *TenantOrder) TenantPaginateOption {
	if order == nil {
		order = DefaultTenantOrder
	}
	o := *order
	return func(pager *tenantPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTenantOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTenantFilter configures pagination filter.
func WithTenantFilter(filter func(*TenantQuery) (*TenantQuery, error)) TenantPaginateOption {
	return func(pager *tenantPager) error {
		if filter == nil {
			return errors.New("TenantQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenantPager struct {
	reverse bool
	order   *TenantOrder
	filter  func(*TenantQuery) (*TenantQuery, error)
}

func newTenantPager(opts []TenantPaginateOption, reverse bool) (*tenantPager, error) {
	pager := &tenantPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTenantOrder
	}
	return pager, nil
}

func (p *tenantPager) applyFilter(query *TenantQuery) (*TenantQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenantPager) toCursor(t *Tenant) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tenantPager) applyCursors(query *TenantQuery, after, before *Cursor) (*TenantQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTenantOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenantPager) applyOrder(query *TenantQuery) *TenantQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTenantOrder.Field {
		query = query.Order(DefaultTenantOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tenantPager) orderExpr(query *TenantQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTenantOrder.Field {
			b.Comma().Ident(DefaultTenantOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tenant.
func (t *TenantQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenantPaginateOption,
) (*TenantConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenantPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TenantConnection{Edges: []*TenantEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenantOrderFieldCreatedAt orders Tenant by created_at.
	TenantOrderFieldCreatedAt = &TenantOrderField{
		Value: func(t *Tenant) (ent.Value, error) {
			return t.CreatedAt, nil
		},
		column: tenant.FieldCreatedAt,
		toTerm: tenant.ByCreatedAt,
		toCursor: func(t *Tenant) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TenantOrderFieldUpdatedAt orders Tenant by updated_at.
	TenantOrderFieldUpdatedAt = &TenantOrderField{
		Value: func(t *Tenant) (ent.Value, error) {
			return t.UpdatedAt, nil
		},
		column: tenant.FieldUpdatedAt,
		toTerm: tenant.ByUpdatedAt,
		toCursor: func(t *Tenant) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenantOrderField) String() string {
	var str string
	switch f.column {
	case TenantOrderFieldCreatedAt.column:
		str = "createdAt"
	case TenantOrderFieldUpdatedAt.column:
		str = "updatedAt"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenantOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenantOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenantOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *TenantOrderFieldCreatedAt
	case "updatedAt":
		*f = *TenantOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TenantOrderField", str)
	}
	return nil
}

// TenantOrderField defines the ordering field of Tenant.
type TenantOrderField struct {
	// Value extracts the ordering value from the given Tenant.
	Value    func(*Tenant) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tenant.OrderOption
	toCursor func(*Tenant) Cursor
}

// TenantOrder defines the ordering of Tenant.
type TenantOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TenantOrderField `json:"field"`
}

// DefaultTenantOrder is the default ordering of Tenant.
var DefaultTenantOrder = &TenantOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenantOrderField{
		Value: func(t *Tenant) (ent.Value, error) {
			return t.ID, nil
		},
		column: tenant.FieldID,
		toTerm: tenant.ByID,
		toCursor: func(t *Tenant) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Tenant into TenantEdge.
func (t *Tenant) ToEdge(order *TenantOrder) *TenantEdge {
	if order == nil {
		order = DefaultTenantOrder
	}
	return &TenantEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TenantRoleEdge is the edge representation of TenantRole.
type TenantRoleEdge struct {
	Node   *TenantRole `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// TenantRoleConnection is the connection containing edges to TenantRole.
type TenantRoleConnection struct {
	Edges      []*TenantRoleEdge `json:"edges"`
	Nodes      []*TenantRole     `json:"nodes"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *TenantRoleConnection) build(nodes []*TenantRole, pager *tenantrolePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TenantRole
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TenantRole {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TenantRole {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenantRoleEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenantRoleEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenantRolePaginateOption enables pagination customization.
type TenantRolePaginateOption func(*tenantrolePager) error

// WithTenantRoleOrder configures pagination ordering.
func WithTenantRoleOrder(order *TenantRoleOrder) TenantRolePaginateOption {
	if order == nil {
		order = DefaultTenantRoleOrder
	}
	o := *order
	return func(pager *tenantrolePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTenantRoleOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTenantRoleFilter configures pagination filter.
func WithTenantRoleFilter(filter func(*TenantRoleQuery) (*TenantRoleQuery, error)) TenantRolePaginateOption {
	return func(pager *tenantrolePager) error {
		if filter == nil {
			return errors.New("TenantRoleQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenantrolePager struct {
	reverse bool
	order   *TenantRoleOrder
	filter  func(*TenantRoleQuery) (*TenantRoleQuery, error)
}

func newTenantRolePager(opts []TenantRolePaginateOption, reverse bool) (*tenantrolePager, error) {
	pager := &tenantrolePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTenantRoleOrder
	}
	return pager, nil
}

func (p *tenantrolePager) applyFilter(query *TenantRoleQuery) (*TenantRoleQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenantrolePager) toCursor(tr *TenantRole) Cursor {
	return p.order.Field.toCursor(tr)
}

func (p *tenantrolePager) applyCursors(query *TenantRoleQuery, after, before *Cursor) (*TenantRoleQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTenantRoleOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenantrolePager) applyOrder(query *TenantRoleQuery) *TenantRoleQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTenantRoleOrder.Field {
		query = query.Order(DefaultTenantRoleOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tenantrolePager) orderExpr(query *TenantRoleQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTenantRoleOrder.Field {
			b.Comma().Ident(DefaultTenantRoleOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TenantRole.
func (tr *TenantRoleQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenantRolePaginateOption,
) (*TenantRoleConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenantRolePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if tr, err = pager.applyFilter(tr); err != nil {
		return nil, err
	}
	conn := &TenantRoleConnection{Edges: []*TenantRoleEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := tr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if tr, err = pager.applyCursors(tr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		tr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := tr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	tr = pager.applyOrder(tr)
	nodes, err := tr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenantRoleOrderFieldCreatedAt orders TenantRole by created_at.
	TenantRoleOrderFieldCreatedAt = &TenantRoleOrderField{
		Value: func(tr *TenantRole) (ent.Value, error) {
			return tr.CreatedAt, nil
		},
		column: tenantrole.FieldCreatedAt,
		toTerm: tenantrole.ByCreatedAt,
		toCursor: func(tr *TenantRole) Cursor {
			return Cursor{
				ID:    tr.ID,
				Value: tr.CreatedAt,
			}
		},
	}
	// TenantRoleOrderFieldUpdatedAt orders TenantRole by updated_at.
	TenantRoleOrderFieldUpdatedAt = &TenantRoleOrderField{
		Value: func(tr *TenantRole) (ent.Value, error) {
			return tr.UpdatedAt, nil
		},
		column: tenantrole.FieldUpdatedAt,
		toTerm: tenantrole.ByUpdatedAt,
		toCursor: func(tr *TenantRole) Cursor {
			return Cursor{
				ID:    tr.ID,
				Value: tr.UpdatedAt,
			}
		},
	}
	// TenantRoleOrderFieldName orders TenantRole by name.
	TenantRoleOrderFieldName = &TenantRoleOrderField{
		Value: func(tr *TenantRole) (ent.Value, error) {
			return tr.Name, nil
		},
		column: tenantrole.FieldName,
		toTerm: tenantrole.ByName,
		toCursor: func(tr *TenantRole) Cursor {
			return Cursor{
				ID:    tr.ID,
				Value: tr.Name,
			}
		},
	}
	// TenantRoleOrderFieldSort orders TenantRole by sort.
	TenantRoleOrderFieldSort = &TenantRoleOrderField{
		Value: func(tr *TenantRole) (ent.Value, error) {
			return tr.Sort, nil
		},
		column: tenantrole.FieldSort,
		toTerm: tenantrole.BySort,
		toCursor: func(tr *TenantRole) Cursor {
			return Cursor{
				ID:    tr.ID,
				Value: tr.Sort,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenantRoleOrderField) String() string {
	var str string
	switch f.column {
	case TenantRoleOrderFieldCreatedAt.column:
		str = "createdAt"
	case TenantRoleOrderFieldUpdatedAt.column:
		str = "updatedAt"
	case TenantRoleOrderFieldName.column:
		str = "name"
	case TenantRoleOrderFieldSort.column:
		str = "sort"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenantRoleOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenantRoleOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenantRoleOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *TenantRoleOrderFieldCreatedAt
	case "updatedAt":
		*f = *TenantRoleOrderFieldUpdatedAt
	case "name":
		*f = *TenantRoleOrderFieldName
	case "sort":
		*f = *TenantRoleOrderFieldSort
	default:
		return fmt.Errorf("%s is not a valid TenantRoleOrderField", str)
	}
	return nil
}

// TenantRoleOrderField defines the ordering field of TenantRole.
type TenantRoleOrderField struct {
	// Value extracts the ordering value from the given TenantRole.
	Value    func(*TenantRole) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tenantrole.OrderOption
	toCursor func(*TenantRole) Cursor
}

// TenantRoleOrder defines the ordering of TenantRole.
type TenantRoleOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *TenantRoleOrderField `json:"field"`
}

// DefaultTenantRoleOrder is the default ordering of TenantRole.
var DefaultTenantRoleOrder = &TenantRoleOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenantRoleOrderField{
		Value: func(tr *TenantRole) (ent.Value, error) {
			return tr.ID, nil
		},
		column: tenantrole.FieldID,
		toTerm: tenantrole.ByID,
		toCursor: func(tr *TenantRole) Cursor {
			return Cursor{ID: tr.ID}
		},
	},
}

// ToEdge converts TenantRole into TenantRoleEdge.
func (tr *TenantRole) ToEdge(order *TenantRoleOrder) *TenantRoleEdge {
	if order == nil {
		order = DefaultTenantRoleOrder
	}
	return &TenantRoleEdge{
		Node:   tr,
		Cursor: order.Field.toCursor(tr),
	}
}

// TenantUserEdge is the edge representation of TenantUser.
type TenantUserEdge struct {
	Node   *TenantUser `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// TenantUserConnection is the connection containing edges to TenantUser.
type TenantUserConnection struct {
	Edges      []*TenantUserEdge `json:"edges"`
	Nodes      []*TenantUser     `json:"nodes"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *TenantUserConnection) build(nodes []*TenantUser, pager *tenantuserPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TenantUser
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TenantUser {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TenantUser {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenantUserEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenantUserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenantUserPaginateOption enables pagination customization.
type TenantUserPaginateOption func(*tenantuserPager) error

// WithTenantUserOrder configures pagination ordering.
func WithTenantUserOrder(order *TenantUserOrder) TenantUserPaginateOption {
	if order == nil {
		order = DefaultTenantUserOrder
	}
	o := *order
	return func(pager *tenantuserPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTenantUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTenantUserFilter configures pagination filter.
func WithTenantUserFilter(filter func(*TenantUserQuery) (*TenantUserQuery, error)) TenantUserPaginateOption {
	return func(pager *tenantuserPager) error {
		if filter == nil {
			return errors.New("TenantUserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenantuserPager struct {
	reverse bool
	order   *TenantUserOrder
	filter  func(*TenantUserQuery) (*TenantUserQuery, error)
}

func newTenantUserPager(opts []TenantUserPaginateOption, reverse bool) (*tenantuserPager, error) {
	pager := &tenantuserPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTenantUserOrder
	}
	return pager, nil
}

func (p *tenantuserPager) applyFilter(query *TenantUserQuery) (*TenantUserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenantuserPager) toCursor(tu *TenantUser) Cursor {
	return p.order.Field.toCursor(tu)
}

func (p *tenantuserPager) applyCursors(query *TenantUserQuery, after, before *Cursor) (*TenantUserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTenantUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenantuserPager) applyOrder(query *TenantUserQuery) *TenantUserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTenantUserOrder.Field {
		query = query.Order(DefaultTenantUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tenantuserPager) orderExpr(query *TenantUserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTenantUserOrder.Field {
			b.Comma().Ident(DefaultTenantUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TenantUser.
func (tu *TenantUserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenantUserPaginateOption,
) (*TenantUserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenantUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if tu, err = pager.applyFilter(tu); err != nil {
		return nil, err
	}
	conn := &TenantUserConnection{Edges: []*TenantUserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := tu.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if tu, err = pager.applyCursors(tu, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		tu.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := tu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	tu = pager.applyOrder(tu)
	nodes, err := tu.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// TenantUserOrderField defines the ordering field of TenantUser.
type TenantUserOrderField struct {
	// Value extracts the ordering value from the given TenantUser.
	Value    func(*TenantUser) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tenantuser.OrderOption
	toCursor func(*TenantUser) Cursor
}

// TenantUserOrder defines the ordering of TenantUser.
type TenantUserOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *TenantUserOrderField `json:"field"`
}

// DefaultTenantUserOrder is the default ordering of TenantUser.
var DefaultTenantUserOrder = &TenantUserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenantUserOrderField{
		Value: func(tu *TenantUser) (ent.Value, error) {
			return tu.ID, nil
		},
		column: tenantuser.FieldID,
		toTerm: tenantuser.ByID,
		toCursor: func(tu *TenantUser) Cursor {
			return Cursor{ID: tu.ID}
		},
	},
}

// ToEdge converts TenantUser into TenantUserEdge.
func (tu *TenantUser) ToEdge(order *TenantUserOrder) *TenantUserEdge {
	if order == nil {
		order = DefaultTenantUserOrder
	}
	return &TenantUserEdge{
		Node:   tu,
		Cursor: order.Field.toCursor(tu),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	Nodes      []*User     `json:"nodes"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	c.Nodes = nodes
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, nodesField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.UpdatedAt, nil
		},
		column: user.FieldUpdatedAt,
		toTerm: user.ByUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
	// UserOrderFieldEmail orders User by email.
	UserOrderFieldEmail = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Email, nil
		},
		column: user.FieldEmail,
		toTerm: user.ByEmail,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Email,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldCreatedAt.column:
		str = "createdAt"
	case UserOrderFieldUpdatedAt.column:
		str = "updatedAt"
	case UserOrderFieldEmail.column:
		str = "email"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "createdAt":
		*f = *UserOrderFieldCreatedAt
	case "updatedAt":
		*f = *UserOrderFieldUpdatedAt
	case "email":
		*f = *UserOrderFieldEmail
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
