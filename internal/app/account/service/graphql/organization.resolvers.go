package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70-dev

import (
	"context"

	"github.com/go-keg/monorepo/internal/app/account/server/auth"
	"github.com/go-keg/monorepo/internal/app/account/service/graphql/dataloader"
	"github.com/go-keg/monorepo/internal/data/account/ent"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input ent.CreateOrganizationInput) (*ent.Organization, error) {
	return r.ent.Organization.Create().SetTenantID(auth.GetTenantID(ctx)).SetInput(input).Save(ctx)
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, id int, input ent.UpdateOrganizationInput) (*ent.Organization, error) {
	return r.ent.Organization.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id int) (bool, error) {
	err := r.ent.Organization.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateMembership is the resolver for the createMembership field.
func (r *mutationResolver) CreateMembership(ctx context.Context, input ent.CreateMembershipInput) (*ent.Membership, error) {
	return r.ent.Membership.Create().SetInput(input).Save(ctx)
}

// UpdateMembership is the resolver for the updateMembership field.
func (r *mutationResolver) UpdateMembership(ctx context.Context, id int, input ent.UpdateMembershipInput) (*ent.Membership, error) {
	return r.ent.Membership.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteMembership is the resolver for the deleteMembership field.
func (r *mutationResolver) DeleteMembership(ctx context.Context, id int) (bool, error) {
	err := r.ent.Membership.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// ChildrenCount is the resolver for the childrenCount field.
func (r *organizationResolver) ChildrenCount(ctx context.Context, obj *ent.Organization) (int, error) {
	return dataloader.For(ctx).GetOrgChildrenCount(ctx, obj.ID)
}

// MemberCount is the resolver for the memberCount field.
func (r *organizationResolver) MemberCount(ctx context.Context, obj *ent.Organization) (int, error) {
	return dataloader.For(ctx).GetOrgMemberCount(ctx, obj.ID)
}
