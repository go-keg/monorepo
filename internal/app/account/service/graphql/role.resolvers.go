package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70-dev

import (
	"context"

	"github.com/go-keg/monorepo/internal/app/account/server/auth"
	"github.com/go-keg/monorepo/internal/data/account/ent"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
)

// CreateTenantRole is the resolver for the createTenantRole field.
func (r *mutationResolver) CreateTenantRole(ctx context.Context, input ent.CreateTenantRoleInput) (*ent.TenantRole, error) {
	return r.ent.TenantRole.Create().SetTenantID(auth.GetTenantID(ctx)).SetInput(input).Save(ctx)
}

// UpdateTenantRole is the resolver for the updateTenantRole field.
func (r *mutationResolver) UpdateTenantRole(ctx context.Context, id int, input ent.UpdateTenantRoleInput) (*ent.TenantRole, error) {
	return r.ent.TenantRole.UpdateOneID(id).Where(
		tenantrole.TenantID(auth.GetTenantID(ctx)),
	).SetInput(input).Save(ctx)
}

// DeleteTenantRole is the resolver for the deleteTenantRole field.
func (r *mutationResolver) DeleteTenantRole(ctx context.Context, id int) (bool, error) {
	err := r.ent.TenantRole.DeleteOneID(id).Where(
		tenantrole.TenantID(auth.GetTenantID(ctx)),
	).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}
