// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
	"github.com/go-keg/monorepo/internal/data/crm/ent/predicate"
)

// FollowUpUpdate is the builder for updating FollowUp entities.
type FollowUpUpdate struct {
	config
	hooks     []Hook
	mutation  *FollowUpMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FollowUpUpdate builder.
func (fuu *FollowUpUpdate) Where(ps ...predicate.FollowUp) *FollowUpUpdate {
	fuu.mutation.Where(ps...)
	return fuu
}

// SetUpdatedAt sets the "updated_at" field.
func (fuu *FollowUpUpdate) SetUpdatedAt(t time.Time) *FollowUpUpdate {
	fuu.mutation.SetUpdatedAt(t)
	return fuu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fuu *FollowUpUpdate) ClearUpdatedAt() *FollowUpUpdate {
	fuu.mutation.ClearUpdatedAt()
	return fuu
}

// SetUpdatedBy sets the "updated_by" field.
func (fuu *FollowUpUpdate) SetUpdatedBy(i int) *FollowUpUpdate {
	fuu.mutation.ResetUpdatedBy()
	fuu.mutation.SetUpdatedBy(i)
	return fuu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuu *FollowUpUpdate) SetNillableUpdatedBy(i *int) *FollowUpUpdate {
	if i != nil {
		fuu.SetUpdatedBy(*i)
	}
	return fuu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fuu *FollowUpUpdate) AddUpdatedBy(i int) *FollowUpUpdate {
	fuu.mutation.AddUpdatedBy(i)
	return fuu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuu *FollowUpUpdate) ClearUpdatedBy() *FollowUpUpdate {
	fuu.mutation.ClearUpdatedBy()
	return fuu
}

// SetType sets the "type" field.
func (fuu *FollowUpUpdate) SetType(f followup.Type) *FollowUpUpdate {
	fuu.mutation.SetType(f)
	return fuu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuu *FollowUpUpdate) SetNillableType(f *followup.Type) *FollowUpUpdate {
	if f != nil {
		fuu.SetType(*f)
	}
	return fuu
}

// SetContent sets the "content" field.
func (fuu *FollowUpUpdate) SetContent(s string) *FollowUpUpdate {
	fuu.mutation.SetContent(s)
	return fuu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (fuu *FollowUpUpdate) SetNillableContent(s *string) *FollowUpUpdate {
	if s != nil {
		fuu.SetContent(*s)
	}
	return fuu
}

// SetFollowedAt sets the "followed_at" field.
func (fuu *FollowUpUpdate) SetFollowedAt(t time.Time) *FollowUpUpdate {
	fuu.mutation.SetFollowedAt(t)
	return fuu
}

// SetNillableFollowedAt sets the "followed_at" field if the given value is not nil.
func (fuu *FollowUpUpdate) SetNillableFollowedAt(t *time.Time) *FollowUpUpdate {
	if t != nil {
		fuu.SetFollowedAt(*t)
	}
	return fuu
}

// Mutation returns the FollowUpMutation object of the builder.
func (fuu *FollowUpUpdate) Mutation() *FollowUpMutation {
	return fuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fuu *FollowUpUpdate) Save(ctx context.Context) (int, error) {
	fuu.defaults()
	return withHooks(ctx, fuu.sqlSave, fuu.mutation, fuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuu *FollowUpUpdate) SaveX(ctx context.Context) int {
	affected, err := fuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fuu *FollowUpUpdate) Exec(ctx context.Context) error {
	_, err := fuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuu *FollowUpUpdate) ExecX(ctx context.Context) {
	if err := fuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuu *FollowUpUpdate) defaults() {
	if _, ok := fuu.mutation.UpdatedAt(); !ok && !fuu.mutation.UpdatedAtCleared() {
		v := followup.UpdateDefaultUpdatedAt()
		fuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuu *FollowUpUpdate) check() error {
	if v, ok := fuu.mutation.GetType(); ok {
		if err := followup.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FollowUp.type": %w`, err)}
		}
	}
	if v, ok := fuu.mutation.Content(); ok {
		if err := followup.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "FollowUp.content": %w`, err)}
		}
	}
	if fuu.mutation.CustomerCleared() && len(fuu.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FollowUp.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuu *FollowUpUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FollowUpUpdate {
	fuu.modifiers = append(fuu.modifiers, modifiers...)
	return fuu
}

func (fuu *FollowUpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(followup.Table, followup.Columns, sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt))
	if ps := fuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fuu.mutation.CreatedAtCleared() {
		_spec.ClearField(followup.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fuu.mutation.UpdatedAt(); ok {
		_spec.SetField(followup.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuu.mutation.UpdatedAtCleared() {
		_spec.ClearField(followup.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fuu.mutation.UpdatedBy(); ok {
		_spec.SetField(followup.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fuu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(followup.FieldUpdatedBy, field.TypeInt, value)
	}
	if fuu.mutation.UpdatedByCleared() {
		_spec.ClearField(followup.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := fuu.mutation.GetType(); ok {
		_spec.SetField(followup.FieldType, field.TypeEnum, value)
	}
	if value, ok := fuu.mutation.Content(); ok {
		_spec.SetField(followup.FieldContent, field.TypeString, value)
	}
	if value, ok := fuu.mutation.FollowedAt(); ok {
		_spec.SetField(followup.FieldFollowedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(fuu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fuu.mutation.done = true
	return n, nil
}

// FollowUpUpdateOne is the builder for updating a single FollowUp entity.
type FollowUpUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FollowUpMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuuo *FollowUpUpdateOne) SetUpdatedAt(t time.Time) *FollowUpUpdateOne {
	fuuo.mutation.SetUpdatedAt(t)
	return fuuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fuuo *FollowUpUpdateOne) ClearUpdatedAt() *FollowUpUpdateOne {
	fuuo.mutation.ClearUpdatedAt()
	return fuuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuuo *FollowUpUpdateOne) SetUpdatedBy(i int) *FollowUpUpdateOne {
	fuuo.mutation.ResetUpdatedBy()
	fuuo.mutation.SetUpdatedBy(i)
	return fuuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuuo *FollowUpUpdateOne) SetNillableUpdatedBy(i *int) *FollowUpUpdateOne {
	if i != nil {
		fuuo.SetUpdatedBy(*i)
	}
	return fuuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (fuuo *FollowUpUpdateOne) AddUpdatedBy(i int) *FollowUpUpdateOne {
	fuuo.mutation.AddUpdatedBy(i)
	return fuuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuuo *FollowUpUpdateOne) ClearUpdatedBy() *FollowUpUpdateOne {
	fuuo.mutation.ClearUpdatedBy()
	return fuuo
}

// SetType sets the "type" field.
func (fuuo *FollowUpUpdateOne) SetType(f followup.Type) *FollowUpUpdateOne {
	fuuo.mutation.SetType(f)
	return fuuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuuo *FollowUpUpdateOne) SetNillableType(f *followup.Type) *FollowUpUpdateOne {
	if f != nil {
		fuuo.SetType(*f)
	}
	return fuuo
}

// SetContent sets the "content" field.
func (fuuo *FollowUpUpdateOne) SetContent(s string) *FollowUpUpdateOne {
	fuuo.mutation.SetContent(s)
	return fuuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (fuuo *FollowUpUpdateOne) SetNillableContent(s *string) *FollowUpUpdateOne {
	if s != nil {
		fuuo.SetContent(*s)
	}
	return fuuo
}

// SetFollowedAt sets the "followed_at" field.
func (fuuo *FollowUpUpdateOne) SetFollowedAt(t time.Time) *FollowUpUpdateOne {
	fuuo.mutation.SetFollowedAt(t)
	return fuuo
}

// SetNillableFollowedAt sets the "followed_at" field if the given value is not nil.
func (fuuo *FollowUpUpdateOne) SetNillableFollowedAt(t *time.Time) *FollowUpUpdateOne {
	if t != nil {
		fuuo.SetFollowedAt(*t)
	}
	return fuuo
}

// Mutation returns the FollowUpMutation object of the builder.
func (fuuo *FollowUpUpdateOne) Mutation() *FollowUpMutation {
	return fuuo.mutation
}

// Where appends a list predicates to the FollowUpUpdate builder.
func (fuuo *FollowUpUpdateOne) Where(ps ...predicate.FollowUp) *FollowUpUpdateOne {
	fuuo.mutation.Where(ps...)
	return fuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuuo *FollowUpUpdateOne) Select(field string, fields ...string) *FollowUpUpdateOne {
	fuuo.fields = append([]string{field}, fields...)
	return fuuo
}

// Save executes the query and returns the updated FollowUp entity.
func (fuuo *FollowUpUpdateOne) Save(ctx context.Context) (*FollowUp, error) {
	fuuo.defaults()
	return withHooks(ctx, fuuo.sqlSave, fuuo.mutation, fuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuuo *FollowUpUpdateOne) SaveX(ctx context.Context) *FollowUp {
	node, err := fuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuuo *FollowUpUpdateOne) Exec(ctx context.Context) error {
	_, err := fuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuuo *FollowUpUpdateOne) ExecX(ctx context.Context) {
	if err := fuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuuo *FollowUpUpdateOne) defaults() {
	if _, ok := fuuo.mutation.UpdatedAt(); !ok && !fuuo.mutation.UpdatedAtCleared() {
		v := followup.UpdateDefaultUpdatedAt()
		fuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuuo *FollowUpUpdateOne) check() error {
	if v, ok := fuuo.mutation.GetType(); ok {
		if err := followup.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "FollowUp.type": %w`, err)}
		}
	}
	if v, ok := fuuo.mutation.Content(); ok {
		if err := followup.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "FollowUp.content": %w`, err)}
		}
	}
	if fuuo.mutation.CustomerCleared() && len(fuuo.mutation.CustomerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "FollowUp.customer"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuuo *FollowUpUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FollowUpUpdateOne {
	fuuo.modifiers = append(fuuo.modifiers, modifiers...)
	return fuuo
}

func (fuuo *FollowUpUpdateOne) sqlSave(ctx context.Context) (_node *FollowUp, err error) {
	if err := fuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(followup.Table, followup.Columns, sqlgraph.NewFieldSpec(followup.FieldID, field.TypeInt))
	id, ok := fuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FollowUp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, followup.FieldID)
		for _, f := range fields {
			if !followup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != followup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fuuo.mutation.CreatedAtCleared() {
		_spec.ClearField(followup.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(followup.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(followup.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := fuuo.mutation.UpdatedBy(); ok {
		_spec.SetField(followup.FieldUpdatedBy, field.TypeInt, value)
	}
	if value, ok := fuuo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(followup.FieldUpdatedBy, field.TypeInt, value)
	}
	if fuuo.mutation.UpdatedByCleared() {
		_spec.ClearField(followup.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := fuuo.mutation.GetType(); ok {
		_spec.SetField(followup.FieldType, field.TypeEnum, value)
	}
	if value, ok := fuuo.mutation.Content(); ok {
		_spec.SetField(followup.FieldContent, field.TypeString, value)
	}
	if value, ok := fuuo.mutation.FollowedAt(); ok {
		_spec.SetField(followup.FieldFollowedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(fuuo.modifiers...)
	_node = &FollowUp{config: fuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{followup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuuo.mutation.done = true
	return _node, nil
}
