// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/organization"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TenantUpdate) SetUpdatedAt(t time.Time) *TenantUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TenantUpdate) ClearUpdatedAt() *TenantUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetName sets the "name" field.
func (tu *TenantUpdate) SetName(s string) *TenantUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableName(s *string) *TenantUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetMaxUsers sets the "max_users" field.
func (tu *TenantUpdate) SetMaxUsers(i int) *TenantUpdate {
	tu.mutation.ResetMaxUsers()
	tu.mutation.SetMaxUsers(i)
	return tu
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableMaxUsers(i *int) *TenantUpdate {
	if i != nil {
		tu.SetMaxUsers(*i)
	}
	return tu
}

// AddMaxUsers adds i to the "max_users" field.
func (tu *TenantUpdate) AddMaxUsers(i int) *TenantUpdate {
	tu.mutation.AddMaxUsers(i)
	return tu
}

// SetFeatures sets the "features" field.
func (tu *TenantUpdate) SetFeatures(s []string) *TenantUpdate {
	tu.mutation.SetFeatures(s)
	return tu
}

// AppendFeatures appends s to the "features" field.
func (tu *TenantUpdate) AppendFeatures(s []string) *TenantUpdate {
	tu.mutation.AppendFeatures(s)
	return tu
}

// ClearFeatures clears the value of the "features" field.
func (tu *TenantUpdate) ClearFeatures() *TenantUpdate {
	tu.mutation.ClearFeatures()
	return tu
}

// AddTenantUserIDs adds the "tenant_users" edge to the TenantUser entity by IDs.
func (tu *TenantUpdate) AddTenantUserIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddTenantUserIDs(ids...)
	return tu
}

// AddTenantUsers adds the "tenant_users" edges to the TenantUser entity.
func (tu *TenantUpdate) AddTenantUsers(t ...*TenantUser) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTenantUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the TenantRole entity by IDs.
func (tu *TenantUpdate) AddRoleIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddRoleIDs(ids...)
	return tu
}

// AddRoles adds the "roles" edges to the TenantRole entity.
func (tu *TenantUpdate) AddRoles(t ...*TenantRole) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddRoleIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (tu *TenantUpdate) AddOrganizationIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddOrganizationIDs(ids...)
	return tu
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (tu *TenantUpdate) AddOrganizations(o ...*Organization) *TenantUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOrganizationIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearTenantUsers clears all "tenant_users" edges to the TenantUser entity.
func (tu *TenantUpdate) ClearTenantUsers() *TenantUpdate {
	tu.mutation.ClearTenantUsers()
	return tu
}

// RemoveTenantUserIDs removes the "tenant_users" edge to TenantUser entities by IDs.
func (tu *TenantUpdate) RemoveTenantUserIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveTenantUserIDs(ids...)
	return tu
}

// RemoveTenantUsers removes "tenant_users" edges to TenantUser entities.
func (tu *TenantUpdate) RemoveTenantUsers(t ...*TenantUser) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTenantUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the TenantRole entity.
func (tu *TenantUpdate) ClearRoles() *TenantUpdate {
	tu.mutation.ClearRoles()
	return tu
}

// RemoveRoleIDs removes the "roles" edge to TenantRole entities by IDs.
func (tu *TenantUpdate) RemoveRoleIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveRoleIDs(ids...)
	return tu
}

// RemoveRoles removes "roles" edges to TenantRole entities.
func (tu *TenantUpdate) RemoveRoles(t ...*TenantRole) *TenantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveRoleIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (tu *TenantUpdate) ClearOrganizations() *TenantUpdate {
	tu.mutation.ClearOrganizations()
	return tu
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (tu *TenantUpdate) RemoveOrganizationIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveOrganizationIDs(ids...)
	return tu
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (tu *TenantUpdate) RemoveOrganizations(o ...*Organization) *TenantUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOrganizationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TenantUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := tenant.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TenantUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TenantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(tenant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.MaxUsers(); ok {
		_spec.SetField(tenant.FieldMaxUsers, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedMaxUsers(); ok {
		_spec.AddField(tenant.FieldMaxUsers, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Features(); ok {
		_spec.SetField(tenant.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenant.FieldFeatures, value)
		})
	}
	if tu.mutation.FeaturesCleared() {
		_spec.ClearField(tenant.FieldFeatures, field.TypeJSON)
	}
	if tu.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TenantUsersTable,
			Columns: []string{tenant.TenantUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTenantUsersIDs(); len(nodes) > 0 && !tu.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TenantUsersTable,
			Columns: []string{tenant.TenantUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TenantUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TenantUsersTable,
			Columns: []string{tenant.TenantUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RolesTable,
			Columns: []string{tenant.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !tu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RolesTable,
			Columns: []string{tenant.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RolesTable,
			Columns: []string{tenant.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OrganizationsTable,
			Columns: []string{tenant.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !tu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OrganizationsTable,
			Columns: []string{tenant.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OrganizationsTable,
			Columns: []string{tenant.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TenantUpdateOne) SetUpdatedAt(t time.Time) *TenantUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TenantUpdateOne) ClearUpdatedAt() *TenantUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetName sets the "name" field.
func (tuo *TenantUpdateOne) SetName(s string) *TenantUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableName(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetMaxUsers sets the "max_users" field.
func (tuo *TenantUpdateOne) SetMaxUsers(i int) *TenantUpdateOne {
	tuo.mutation.ResetMaxUsers()
	tuo.mutation.SetMaxUsers(i)
	return tuo
}

// SetNillableMaxUsers sets the "max_users" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableMaxUsers(i *int) *TenantUpdateOne {
	if i != nil {
		tuo.SetMaxUsers(*i)
	}
	return tuo
}

// AddMaxUsers adds i to the "max_users" field.
func (tuo *TenantUpdateOne) AddMaxUsers(i int) *TenantUpdateOne {
	tuo.mutation.AddMaxUsers(i)
	return tuo
}

// SetFeatures sets the "features" field.
func (tuo *TenantUpdateOne) SetFeatures(s []string) *TenantUpdateOne {
	tuo.mutation.SetFeatures(s)
	return tuo
}

// AppendFeatures appends s to the "features" field.
func (tuo *TenantUpdateOne) AppendFeatures(s []string) *TenantUpdateOne {
	tuo.mutation.AppendFeatures(s)
	return tuo
}

// ClearFeatures clears the value of the "features" field.
func (tuo *TenantUpdateOne) ClearFeatures() *TenantUpdateOne {
	tuo.mutation.ClearFeatures()
	return tuo
}

// AddTenantUserIDs adds the "tenant_users" edge to the TenantUser entity by IDs.
func (tuo *TenantUpdateOne) AddTenantUserIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddTenantUserIDs(ids...)
	return tuo
}

// AddTenantUsers adds the "tenant_users" edges to the TenantUser entity.
func (tuo *TenantUpdateOne) AddTenantUsers(t ...*TenantUser) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTenantUserIDs(ids...)
}

// AddRoleIDs adds the "roles" edge to the TenantRole entity by IDs.
func (tuo *TenantUpdateOne) AddRoleIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddRoleIDs(ids...)
	return tuo
}

// AddRoles adds the "roles" edges to the TenantRole entity.
func (tuo *TenantUpdateOne) AddRoles(t ...*TenantRole) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddRoleIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (tuo *TenantUpdateOne) AddOrganizationIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddOrganizationIDs(ids...)
	return tuo
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (tuo *TenantUpdateOne) AddOrganizations(o ...*Organization) *TenantUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOrganizationIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearTenantUsers clears all "tenant_users" edges to the TenantUser entity.
func (tuo *TenantUpdateOne) ClearTenantUsers() *TenantUpdateOne {
	tuo.mutation.ClearTenantUsers()
	return tuo
}

// RemoveTenantUserIDs removes the "tenant_users" edge to TenantUser entities by IDs.
func (tuo *TenantUpdateOne) RemoveTenantUserIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveTenantUserIDs(ids...)
	return tuo
}

// RemoveTenantUsers removes "tenant_users" edges to TenantUser entities.
func (tuo *TenantUpdateOne) RemoveTenantUsers(t ...*TenantUser) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTenantUserIDs(ids...)
}

// ClearRoles clears all "roles" edges to the TenantRole entity.
func (tuo *TenantUpdateOne) ClearRoles() *TenantUpdateOne {
	tuo.mutation.ClearRoles()
	return tuo
}

// RemoveRoleIDs removes the "roles" edge to TenantRole entities by IDs.
func (tuo *TenantUpdateOne) RemoveRoleIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveRoleIDs(ids...)
	return tuo
}

// RemoveRoles removes "roles" edges to TenantRole entities.
func (tuo *TenantUpdateOne) RemoveRoles(t ...*TenantRole) *TenantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveRoleIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (tuo *TenantUpdateOne) ClearOrganizations() *TenantUpdateOne {
	tuo.mutation.ClearOrganizations()
	return tuo
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (tuo *TenantUpdateOne) RemoveOrganizationIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveOrganizationIDs(ids...)
	return tuo
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (tuo *TenantUpdateOne) RemoveOrganizations(o ...*Organization) *TenantUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOrganizationIDs(ids...)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tuo *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TenantUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := tenant.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TenantUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := tenant.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tenant.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TenantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tenant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(tenant.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.MaxUsers(); ok {
		_spec.SetField(tenant.FieldMaxUsers, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedMaxUsers(); ok {
		_spec.AddField(tenant.FieldMaxUsers, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Features(); ok {
		_spec.SetField(tenant.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tenant.FieldFeatures, value)
		})
	}
	if tuo.mutation.FeaturesCleared() {
		_spec.ClearField(tenant.FieldFeatures, field.TypeJSON)
	}
	if tuo.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TenantUsersTable,
			Columns: []string{tenant.TenantUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTenantUsersIDs(); len(nodes) > 0 && !tuo.mutation.TenantUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TenantUsersTable,
			Columns: []string{tenant.TenantUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TenantUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.TenantUsersTable,
			Columns: []string{tenant.TenantUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RolesTable,
			Columns: []string{tenant.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !tuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RolesTable,
			Columns: []string{tenant.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RolesTable,
			Columns: []string{tenant.RolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OrganizationsTable,
			Columns: []string{tenant.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !tuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OrganizationsTable,
			Columns: []string{tenant.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OrganizationsTable,
			Columns: []string{tenant.OrganizationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
