// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MembershipQuery) CustomCollectFields(ctx context.Context, path ...string) (*MembershipQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return m, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := m.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return m, nil
}

// AllCollectFields
func (m *MembershipQuery) AllCollectFields(ctx context.Context, path ...string) ([]*Membership, error) {
	_query, err := m.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (m *MembershipQuery) FirstCollectFields(ctx context.Context, path ...string) (*Membership, error) {
	_query, err := m.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*Membership.
func (m *MembershipQuery) List(ctx context.Context, offset, limit int, opts ...MembershipPaginateOption) (*MembershipConnection, error) {
	pager, err := newMembershipPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MembershipConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	m.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(m).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (oa *OAuthAccountQuery) CustomCollectFields(ctx context.Context, path ...string) (*OAuthAccountQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return oa, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := oa.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return oa, nil
}

// AllCollectFields
func (oa *OAuthAccountQuery) AllCollectFields(ctx context.Context, path ...string) ([]*OAuthAccount, error) {
	_query, err := oa.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (oa *OAuthAccountQuery) FirstCollectFields(ctx context.Context, path ...string) (*OAuthAccount, error) {
	_query, err := oa.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*OAuthAccount.
func (oa *OAuthAccountQuery) List(ctx context.Context, offset, limit int, opts ...OAuthAccountPaginateOption) (*OAuthAccountConnection, error) {
	pager, err := newOAuthAccountPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(oa); err != nil {
		return nil, err
	}
	conn := &OAuthAccountConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := oa.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	oa.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = oa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := oa.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(oa).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (op *OAuthProviderQuery) CustomCollectFields(ctx context.Context, path ...string) (*OAuthProviderQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return op, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := op.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return op, nil
}

// AllCollectFields
func (op *OAuthProviderQuery) AllCollectFields(ctx context.Context, path ...string) ([]*OAuthProvider, error) {
	_query, err := op.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (op *OAuthProviderQuery) FirstCollectFields(ctx context.Context, path ...string) (*OAuthProvider, error) {
	_query, err := op.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*OAuthProvider.
func (op *OAuthProviderQuery) List(ctx context.Context, offset, limit int, opts ...OAuthProviderPaginateOption) (*OAuthProviderConnection, error) {
	pager, err := newOAuthProviderPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(op); err != nil {
		return nil, err
	}
	conn := &OAuthProviderConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := op.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	op.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = op.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := op.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(op).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (o *OrganizationQuery) CustomCollectFields(ctx context.Context, path ...string) (*OrganizationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return o, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := o.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return o, nil
}

// AllCollectFields
func (o *OrganizationQuery) AllCollectFields(ctx context.Context, path ...string) ([]*Organization, error) {
	_query, err := o.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (o *OrganizationQuery) FirstCollectFields(ctx context.Context, path ...string) (*Organization, error) {
	_query, err := o.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*Organization.
func (o *OrganizationQuery) List(ctx context.Context, offset, limit int, opts ...OrganizationPaginateOption) (*OrganizationConnection, error) {
	pager, err := newOrganizationPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OrganizationConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	o.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(o).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pe *PermissionQuery) CustomCollectFields(ctx context.Context, path ...string) (*PermissionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pe, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := pe.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return pe, nil
}

// AllCollectFields
func (pe *PermissionQuery) AllCollectFields(ctx context.Context, path ...string) ([]*Permission, error) {
	_query, err := pe.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (pe *PermissionQuery) FirstCollectFields(ctx context.Context, path ...string) (*Permission, error) {
	_query, err := pe.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*Permission.
func (pe *PermissionQuery) List(ctx context.Context, offset, limit int, opts ...PermissionPaginateOption) (*PermissionConnection, error) {
	pager, err := newPermissionPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(pe); err != nil {
		return nil, err
	}
	conn := &PermissionConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := pe.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	pe.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pe.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(pe).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TenantQuery) CustomCollectFields(ctx context.Context, path ...string) (*TenantQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := t.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return t, nil
}

// AllCollectFields
func (t *TenantQuery) AllCollectFields(ctx context.Context, path ...string) ([]*Tenant, error) {
	_query, err := t.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (t *TenantQuery) FirstCollectFields(ctx context.Context, path ...string) (*Tenant, error) {
	_query, err := t.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*Tenant.
func (t *TenantQuery) List(ctx context.Context, offset, limit int, opts ...TenantPaginateOption) (*TenantConnection, error) {
	pager, err := newTenantPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TenantConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	t.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(t).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tr *TenantRoleQuery) CustomCollectFields(ctx context.Context, path ...string) (*TenantRoleQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return tr, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := tr.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return tr, nil
}

// AllCollectFields
func (tr *TenantRoleQuery) AllCollectFields(ctx context.Context, path ...string) ([]*TenantRole, error) {
	_query, err := tr.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (tr *TenantRoleQuery) FirstCollectFields(ctx context.Context, path ...string) (*TenantRole, error) {
	_query, err := tr.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*TenantRole.
func (tr *TenantRoleQuery) List(ctx context.Context, offset, limit int, opts ...TenantRolePaginateOption) (*TenantRoleConnection, error) {
	pager, err := newTenantRolePager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(tr); err != nil {
		return nil, err
	}
	conn := &TenantRoleConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := tr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	tr.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = tr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(tr).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (tu *TenantUserQuery) CustomCollectFields(ctx context.Context, path ...string) (*TenantUserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return tu, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := tu.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return tu, nil
}

// AllCollectFields
func (tu *TenantUserQuery) AllCollectFields(ctx context.Context, path ...string) ([]*TenantUser, error) {
	_query, err := tu.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (tu *TenantUserQuery) FirstCollectFields(ctx context.Context, path ...string) (*TenantUser, error) {
	_query, err := tu.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*TenantUser.
func (tu *TenantUserQuery) List(ctx context.Context, offset, limit int, opts ...TenantUserPaginateOption) (*TenantUserConnection, error) {
	pager, err := newTenantUserPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(tu); err != nil {
		return nil, err
	}
	conn := &TenantUserConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := tu.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	tu.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = tu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tu.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(tu).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CustomCollectFields(ctx context.Context, path ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if field := collectedField(ctx, path...); field != nil {
		if err := u.collectField(ctx, true, graphql.GetOperationContext(ctx), *field, path); err != nil {
			return nil, err
		}
	}
	return u, nil
}

// AllCollectFields
func (u *UserQuery) AllCollectFields(ctx context.Context, path ...string) ([]*User, error) {
	_query, err := u.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.All(ctx)
}

// FirstCollectFields
func (u *UserQuery) FirstCollectFields(ctx context.Context, path ...string) (*User, error) {
	_query, err := u.CustomCollectFields(ctx, path...)
	if err != nil {
		return nil, err
	}
	return _query.First(ctx)
}

// List executes the query and returns totalCount and nodes []*User.
func (u *UserQuery) List(ctx context.Context, offset, limit int, opts ...UserPaginateOption) (*UserConnection, error) {
	pager, err := newUserPager(opts, false)
	if err != nil {
		return nil, err
	}
	if _, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{}
	ignoredNodes := !hasCollectedField(ctx, edgesField, nodeField) && !hasCollectedField(ctx, nodesField)
	if hasCollectedField(ctx, totalCountField) {
		hasPagination := limit != 0
		if hasPagination || ignoredNodes {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
		}
	}
	if ignoredNodes || (limit == 0) {
		return conn, nil
	}
	u.Offset(offset).Limit(limit)
	if field := collectedField(ctx, nodesField); field != nil {
		if err = u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{nodesField}); err != nil {
			return nil, err
		}
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	conn.Nodes, err = pager.applyOrder(u).All(ctx)
	if err != nil {
		return nil, err
	}
	return conn, nil
}
