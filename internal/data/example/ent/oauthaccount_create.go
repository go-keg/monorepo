// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/example/ent/oauthaccount"
	"github.com/go-keg/monorepo/internal/data/example/ent/user"
)

// OAuthAccountCreate is the builder for creating a OAuthAccount entity.
type OAuthAccountCreate struct {
	config
	mutation *OAuthAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (oac *OAuthAccountCreate) SetUserID(i int) *OAuthAccountCreate {
	oac.mutation.SetUserID(i)
	return oac
}

// SetProvider sets the "provider" field.
func (oac *OAuthAccountCreate) SetProvider(s string) *OAuthAccountCreate {
	oac.mutation.SetProvider(s)
	return oac
}

// SetProviderUserID sets the "provider_user_id" field.
func (oac *OAuthAccountCreate) SetProviderUserID(s string) *OAuthAccountCreate {
	oac.mutation.SetProviderUserID(s)
	return oac
}

// SetAccessToken sets the "access_token" field.
func (oac *OAuthAccountCreate) SetAccessToken(s string) *OAuthAccountCreate {
	oac.mutation.SetAccessToken(s)
	return oac
}

// SetNillableAccessToken sets the "access_token" field if the given value is not nil.
func (oac *OAuthAccountCreate) SetNillableAccessToken(s *string) *OAuthAccountCreate {
	if s != nil {
		oac.SetAccessToken(*s)
	}
	return oac
}

// SetRefreshToken sets the "refresh_token" field.
func (oac *OAuthAccountCreate) SetRefreshToken(s string) *OAuthAccountCreate {
	oac.mutation.SetRefreshToken(s)
	return oac
}

// SetNillableRefreshToken sets the "refresh_token" field if the given value is not nil.
func (oac *OAuthAccountCreate) SetNillableRefreshToken(s *string) *OAuthAccountCreate {
	if s != nil {
		oac.SetRefreshToken(*s)
	}
	return oac
}

// SetTokenExpiry sets the "token_expiry" field.
func (oac *OAuthAccountCreate) SetTokenExpiry(t time.Time) *OAuthAccountCreate {
	oac.mutation.SetTokenExpiry(t)
	return oac
}

// SetNillableTokenExpiry sets the "token_expiry" field if the given value is not nil.
func (oac *OAuthAccountCreate) SetNillableTokenExpiry(t *time.Time) *OAuthAccountCreate {
	if t != nil {
		oac.SetTokenExpiry(*t)
	}
	return oac
}

// SetProfile sets the "profile" field.
func (oac *OAuthAccountCreate) SetProfile(m map[string]interface{}) *OAuthAccountCreate {
	oac.mutation.SetProfile(m)
	return oac
}

// SetUser sets the "user" edge to the User entity.
func (oac *OAuthAccountCreate) SetUser(u *User) *OAuthAccountCreate {
	return oac.SetUserID(u.ID)
}

// Mutation returns the OAuthAccountMutation object of the builder.
func (oac *OAuthAccountCreate) Mutation() *OAuthAccountMutation {
	return oac.mutation
}

// Save creates the OAuthAccount in the database.
func (oac *OAuthAccountCreate) Save(ctx context.Context) (*OAuthAccount, error) {
	return withHooks(ctx, oac.sqlSave, oac.mutation, oac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OAuthAccountCreate) SaveX(ctx context.Context) *OAuthAccount {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OAuthAccountCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OAuthAccountCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oac *OAuthAccountCreate) check() error {
	if _, ok := oac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "OAuthAccount.user_id"`)}
	}
	if _, ok := oac.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "OAuthAccount.provider"`)}
	}
	if _, ok := oac.mutation.ProviderUserID(); !ok {
		return &ValidationError{Name: "provider_user_id", err: errors.New(`ent: missing required field "OAuthAccount.provider_user_id"`)}
	}
	if len(oac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "OAuthAccount.user"`)}
	}
	return nil
}

func (oac *OAuthAccountCreate) sqlSave(ctx context.Context) (*OAuthAccount, error) {
	if err := oac.check(); err != nil {
		return nil, err
	}
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oac.mutation.id = &_node.ID
	oac.mutation.done = true
	return _node, nil
}

func (oac *OAuthAccountCreate) createSpec() (*OAuthAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthAccount{config: oac.config}
		_spec = sqlgraph.NewCreateSpec(oauthaccount.Table, sqlgraph.NewFieldSpec(oauthaccount.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oac.conflict
	if value, ok := oac.mutation.Provider(); ok {
		_spec.SetField(oauthaccount.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := oac.mutation.ProviderUserID(); ok {
		_spec.SetField(oauthaccount.FieldProviderUserID, field.TypeString, value)
		_node.ProviderUserID = value
	}
	if value, ok := oac.mutation.AccessToken(); ok {
		_spec.SetField(oauthaccount.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := oac.mutation.RefreshToken(); ok {
		_spec.SetField(oauthaccount.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	if value, ok := oac.mutation.TokenExpiry(); ok {
		_spec.SetField(oauthaccount.FieldTokenExpiry, field.TypeTime, value)
		_node.TokenExpiry = value
	}
	if value, ok := oac.mutation.Profile(); ok {
		_spec.SetField(oauthaccount.FieldProfile, field.TypeJSON, value)
		_node.Profile = value
	}
	if nodes := oac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthaccount.UserTable,
			Columns: []string{oauthaccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthAccount.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (oac *OAuthAccountCreate) OnConflict(opts ...sql.ConflictOption) *OAuthAccountUpsertOne {
	oac.conflict = opts
	return &OAuthAccountUpsertOne{
		create: oac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oac *OAuthAccountCreate) OnConflictColumns(columns ...string) *OAuthAccountUpsertOne {
	oac.conflict = append(oac.conflict, sql.ConflictColumns(columns...))
	return &OAuthAccountUpsertOne{
		create: oac,
	}
}

type (
	// OAuthAccountUpsertOne is the builder for "upsert"-ing
	//  one OAuthAccount node.
	OAuthAccountUpsertOne struct {
		create *OAuthAccountCreate
	}

	// OAuthAccountUpsert is the "OnConflict" setter.
	OAuthAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *OAuthAccountUpsert) SetUserID(v int) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateUserID() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldUserID)
	return u
}

// SetProvider sets the "provider" field.
func (u *OAuthAccountUpsert) SetProvider(v string) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateProvider() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldProvider)
	return u
}

// SetProviderUserID sets the "provider_user_id" field.
func (u *OAuthAccountUpsert) SetProviderUserID(v string) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldProviderUserID, v)
	return u
}

// UpdateProviderUserID sets the "provider_user_id" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateProviderUserID() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldProviderUserID)
	return u
}

// SetAccessToken sets the "access_token" field.
func (u *OAuthAccountUpsert) SetAccessToken(v string) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldAccessToken, v)
	return u
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateAccessToken() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldAccessToken)
	return u
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *OAuthAccountUpsert) ClearAccessToken() *OAuthAccountUpsert {
	u.SetNull(oauthaccount.FieldAccessToken)
	return u
}

// SetRefreshToken sets the "refresh_token" field.
func (u *OAuthAccountUpsert) SetRefreshToken(v string) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldRefreshToken, v)
	return u
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateRefreshToken() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldRefreshToken)
	return u
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *OAuthAccountUpsert) ClearRefreshToken() *OAuthAccountUpsert {
	u.SetNull(oauthaccount.FieldRefreshToken)
	return u
}

// SetTokenExpiry sets the "token_expiry" field.
func (u *OAuthAccountUpsert) SetTokenExpiry(v time.Time) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldTokenExpiry, v)
	return u
}

// UpdateTokenExpiry sets the "token_expiry" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateTokenExpiry() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldTokenExpiry)
	return u
}

// ClearTokenExpiry clears the value of the "token_expiry" field.
func (u *OAuthAccountUpsert) ClearTokenExpiry() *OAuthAccountUpsert {
	u.SetNull(oauthaccount.FieldTokenExpiry)
	return u
}

// SetProfile sets the "profile" field.
func (u *OAuthAccountUpsert) SetProfile(v map[string]interface{}) *OAuthAccountUpsert {
	u.Set(oauthaccount.FieldProfile, v)
	return u
}

// UpdateProfile sets the "profile" field to the value that was provided on create.
func (u *OAuthAccountUpsert) UpdateProfile() *OAuthAccountUpsert {
	u.SetExcluded(oauthaccount.FieldProfile)
	return u
}

// ClearProfile clears the value of the "profile" field.
func (u *OAuthAccountUpsert) ClearProfile() *OAuthAccountUpsert {
	u.SetNull(oauthaccount.FieldProfile)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OAuthAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OAuthAccountUpsertOne) UpdateNewValues() *OAuthAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthAccountUpsertOne) Ignore() *OAuthAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthAccountUpsertOne) DoNothing() *OAuthAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthAccountCreate.OnConflict
// documentation for more info.
func (u *OAuthAccountUpsertOne) Update(set func(*OAuthAccountUpsert)) *OAuthAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *OAuthAccountUpsertOne) SetUserID(v int) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateUserID() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetProvider sets the "provider" field.
func (u *OAuthAccountUpsertOne) SetProvider(v string) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateProvider() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateProvider()
	})
}

// SetProviderUserID sets the "provider_user_id" field.
func (u *OAuthAccountUpsertOne) SetProviderUserID(v string) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetProviderUserID(v)
	})
}

// UpdateProviderUserID sets the "provider_user_id" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateProviderUserID() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateProviderUserID()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *OAuthAccountUpsertOne) SetAccessToken(v string) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateAccessToken() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateAccessToken()
	})
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *OAuthAccountUpsertOne) ClearAccessToken() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *OAuthAccountUpsertOne) SetRefreshToken(v string) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateRefreshToken() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateRefreshToken()
	})
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *OAuthAccountUpsertOne) ClearRefreshToken() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearRefreshToken()
	})
}

// SetTokenExpiry sets the "token_expiry" field.
func (u *OAuthAccountUpsertOne) SetTokenExpiry(v time.Time) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetTokenExpiry(v)
	})
}

// UpdateTokenExpiry sets the "token_expiry" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateTokenExpiry() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateTokenExpiry()
	})
}

// ClearTokenExpiry clears the value of the "token_expiry" field.
func (u *OAuthAccountUpsertOne) ClearTokenExpiry() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearTokenExpiry()
	})
}

// SetProfile sets the "profile" field.
func (u *OAuthAccountUpsertOne) SetProfile(v map[string]interface{}) *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetProfile(v)
	})
}

// UpdateProfile sets the "profile" field to the value that was provided on create.
func (u *OAuthAccountUpsertOne) UpdateProfile() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateProfile()
	})
}

// ClearProfile clears the value of the "profile" field.
func (u *OAuthAccountUpsertOne) ClearProfile() *OAuthAccountUpsertOne {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearProfile()
	})
}

// Exec executes the query.
func (u *OAuthAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthAccountUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthAccountUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthAccountCreateBulk is the builder for creating many OAuthAccount entities in bulk.
type OAuthAccountCreateBulk struct {
	config
	err      error
	builders []*OAuthAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthAccount entities in the database.
func (oacb *OAuthAccountCreateBulk) Save(ctx context.Context) ([]*OAuthAccount, error) {
	if oacb.err != nil {
		return nil, oacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OAuthAccount, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OAuthAccountCreateBulk) SaveX(ctx context.Context) []*OAuthAccount {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OAuthAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OAuthAccountCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (oacb *OAuthAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthAccountUpsertBulk {
	oacb.conflict = opts
	return &OAuthAccountUpsertBulk{
		create: oacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oacb *OAuthAccountCreateBulk) OnConflictColumns(columns ...string) *OAuthAccountUpsertBulk {
	oacb.conflict = append(oacb.conflict, sql.ConflictColumns(columns...))
	return &OAuthAccountUpsertBulk{
		create: oacb,
	}
}

// OAuthAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthAccount nodes.
type OAuthAccountUpsertBulk struct {
	create *OAuthAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OAuthAccountUpsertBulk) UpdateNewValues() *OAuthAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthAccountUpsertBulk) Ignore() *OAuthAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthAccountUpsertBulk) DoNothing() *OAuthAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthAccountCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthAccountUpsertBulk) Update(set func(*OAuthAccountUpsert)) *OAuthAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *OAuthAccountUpsertBulk) SetUserID(v int) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateUserID() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetProvider sets the "provider" field.
func (u *OAuthAccountUpsertBulk) SetProvider(v string) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateProvider() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateProvider()
	})
}

// SetProviderUserID sets the "provider_user_id" field.
func (u *OAuthAccountUpsertBulk) SetProviderUserID(v string) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetProviderUserID(v)
	})
}

// UpdateProviderUserID sets the "provider_user_id" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateProviderUserID() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateProviderUserID()
	})
}

// SetAccessToken sets the "access_token" field.
func (u *OAuthAccountUpsertBulk) SetAccessToken(v string) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetAccessToken(v)
	})
}

// UpdateAccessToken sets the "access_token" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateAccessToken() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateAccessToken()
	})
}

// ClearAccessToken clears the value of the "access_token" field.
func (u *OAuthAccountUpsertBulk) ClearAccessToken() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearAccessToken()
	})
}

// SetRefreshToken sets the "refresh_token" field.
func (u *OAuthAccountUpsertBulk) SetRefreshToken(v string) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetRefreshToken(v)
	})
}

// UpdateRefreshToken sets the "refresh_token" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateRefreshToken() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateRefreshToken()
	})
}

// ClearRefreshToken clears the value of the "refresh_token" field.
func (u *OAuthAccountUpsertBulk) ClearRefreshToken() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearRefreshToken()
	})
}

// SetTokenExpiry sets the "token_expiry" field.
func (u *OAuthAccountUpsertBulk) SetTokenExpiry(v time.Time) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetTokenExpiry(v)
	})
}

// UpdateTokenExpiry sets the "token_expiry" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateTokenExpiry() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateTokenExpiry()
	})
}

// ClearTokenExpiry clears the value of the "token_expiry" field.
func (u *OAuthAccountUpsertBulk) ClearTokenExpiry() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearTokenExpiry()
	})
}

// SetProfile sets the "profile" field.
func (u *OAuthAccountUpsertBulk) SetProfile(v map[string]interface{}) *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.SetProfile(v)
	})
}

// UpdateProfile sets the "profile" field to the value that was provided on create.
func (u *OAuthAccountUpsertBulk) UpdateProfile() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.UpdateProfile()
	})
}

// ClearProfile clears the value of the "profile" field.
func (u *OAuthAccountUpsertBulk) ClearProfile() *OAuthAccountUpsertBulk {
	return u.Update(func(s *OAuthAccountUpsert) {
		s.ClearProfile()
	})
}

// Exec executes the query.
func (u *OAuthAccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OAuthAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
