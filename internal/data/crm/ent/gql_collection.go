// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contact"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
	"github.com/go-keg/monorepo/internal/data/crm/ent/payment"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cq *ContactQuery) CollectFields(ctx context.Context, satisfies ...string) (*ContactQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return cq, nil
	}
	if err := cq.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return cq, nil
}

func (cq *ContactQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(contact.Columns))
		selectedFields = []string{contact.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: cq.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
				return err
			}
			cq.withCustomer = query
		case "createdAt":
			if _, ok := fieldSeen[contact.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, contact.FieldCreatedAt)
				fieldSeen[contact.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[contact.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, contact.FieldUpdatedAt)
				fieldSeen[contact.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[contact.FieldName]; !ok {
				selectedFields = append(selectedFields, contact.FieldName)
				fieldSeen[contact.FieldName] = struct{}{}
			}
		case "position":
			if _, ok := fieldSeen[contact.FieldPosition]; !ok {
				selectedFields = append(selectedFields, contact.FieldPosition)
				fieldSeen[contact.FieldPosition] = struct{}{}
			}
		case "phone":
			if _, ok := fieldSeen[contact.FieldPhone]; !ok {
				selectedFields = append(selectedFields, contact.FieldPhone)
				fieldSeen[contact.FieldPhone] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[contact.FieldEmail]; !ok {
				selectedFields = append(selectedFields, contact.FieldEmail)
				fieldSeen[contact.FieldEmail] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[contact.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, contact.FieldCreatedBy)
				fieldSeen[contact.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[contact.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, contact.FieldUpdatedBy)
				fieldSeen[contact.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		cq.Select(selectedFields...)
	}
	return nil
}

type contactPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ContactPaginateOption
}

func newContactPaginateArgs(rv map[string]any) *contactPaginateArgs {
	args := &contactPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ContactOrder{Field: &ContactOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithContactOrder(order))
			}
		case *ContactOrder:
			if v != nil {
				args.opts = append(args.opts, WithContactOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ContactWhereInput); ok {
		args.opts = append(args.opts, WithContactFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cq *ContractQuery) CollectFields(ctx context.Context, satisfies ...string) (*ContractQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return cq, nil
	}
	if err := cq.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return cq, nil
}

func (cq *ContractQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(contract.Columns))
		selectedFields = []string{contract.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: cq.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
				return err
			}
			cq.withCustomer = query

		case "payments":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PaymentClient{config: cq.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, paymentImplementors)...); err != nil {
				return err
			}
			cq.WithNamedPayments(alias, func(wq *PaymentQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[contract.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, contract.FieldCreatedAt)
				fieldSeen[contract.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[contract.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, contract.FieldUpdatedAt)
				fieldSeen[contract.FieldUpdatedAt] = struct{}{}
			}
		case "contractNo":
			if _, ok := fieldSeen[contract.FieldContractNo]; !ok {
				selectedFields = append(selectedFields, contract.FieldContractNo)
				fieldSeen[contract.FieldContractNo] = struct{}{}
			}
		case "amount":
			if _, ok := fieldSeen[contract.FieldAmount]; !ok {
				selectedFields = append(selectedFields, contract.FieldAmount)
				fieldSeen[contract.FieldAmount] = struct{}{}
			}
		case "signedAt":
			if _, ok := fieldSeen[contract.FieldSignedAt]; !ok {
				selectedFields = append(selectedFields, contract.FieldSignedAt)
				fieldSeen[contract.FieldSignedAt] = struct{}{}
			}
		case "endAt":
			if _, ok := fieldSeen[contract.FieldEndAt]; !ok {
				selectedFields = append(selectedFields, contract.FieldEndAt)
				fieldSeen[contract.FieldEndAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[contract.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, contract.FieldCreatedBy)
				fieldSeen[contract.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[contract.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, contract.FieldUpdatedBy)
				fieldSeen[contract.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		cq.Select(selectedFields...)
	}
	return nil
}

type contractPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ContractPaginateOption
}

func newContractPaginateArgs(rv map[string]any) *contractPaginateArgs {
	args := &contractPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &ContractOrder{Field: &ContractOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithContractOrder(order))
			}
		case *ContractOrder:
			if v != nil {
				args.opts = append(args.opts, WithContractOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*ContractWhereInput); ok {
		args.opts = append(args.opts, WithContractFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cq *CustomerQuery) CollectFields(ctx context.Context, satisfies ...string) (*CustomerQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return cq, nil
	}
	if err := cq.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return cq, nil
}

func (cq *CustomerQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(customer.Columns))
		selectedFields = []string{customer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "contacts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ContactClient{config: cq.config}).Query()
			)
			args := newContactPaginateArgs(fieldArgs(ctx, new(ContactWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newContactPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					cq.loadTotal = append(cq.loadTotal, func(ctx context.Context, nodes []*Customer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"customer_contacts"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(customer.ContactsColumn), ids...))
						})
						if err := query.GroupBy(customer.ContactsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					cq.loadTotal = append(cq.loadTotal, func(_ context.Context, nodes []*Customer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Contacts)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, contactImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(customer.ContactsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			cq.WithNamedContacts(alias, func(wq *ContactQuery) {
				*wq = *query
			})

		case "contracts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ContractClient{config: cq.config}).Query()
			)
			args := newContractPaginateArgs(fieldArgs(ctx, new(ContractWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newContractPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					cq.loadTotal = append(cq.loadTotal, func(ctx context.Context, nodes []*Customer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"customer_contracts"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(customer.ContractsColumn), ids...))
						})
						if err := query.GroupBy(customer.ContractsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					cq.loadTotal = append(cq.loadTotal, func(_ context.Context, nodes []*Customer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Contracts)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, contractImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(customer.ContractsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			cq.WithNamedContracts(alias, func(wq *ContractQuery) {
				*wq = *query
			})

		case "followUps":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FollowUpClient{config: cq.config}).Query()
			)
			args := newFollowUpPaginateArgs(fieldArgs(ctx, new(FollowUpWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newFollowUpPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					cq.loadTotal = append(cq.loadTotal, func(ctx context.Context, nodes []*Customer) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"customer_follow_ups"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(customer.FollowUpsColumn), ids...))
						})
						if err := query.GroupBy(customer.FollowUpsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				} else {
					cq.loadTotal = append(cq.loadTotal, func(_ context.Context, nodes []*Customer) error {
						for i := range nodes {
							n := len(nodes[i].Edges.FollowUps)
							if nodes[i].Edges.totalCount[2] == nil {
								nodes[i].Edges.totalCount[2] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[2][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, followupImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(customer.FollowUpsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			cq.WithNamedFollowUps(alias, func(wq *FollowUpQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[customer.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedAt)
				fieldSeen[customer.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[customer.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, customer.FieldUpdatedAt)
				fieldSeen[customer.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[customer.FieldName]; !ok {
				selectedFields = append(selectedFields, customer.FieldName)
				fieldSeen[customer.FieldName] = struct{}{}
			}
		case "industry":
			if _, ok := fieldSeen[customer.FieldIndustry]; !ok {
				selectedFields = append(selectedFields, customer.FieldIndustry)
				fieldSeen[customer.FieldIndustry] = struct{}{}
			}
		case "source":
			if _, ok := fieldSeen[customer.FieldSource]; !ok {
				selectedFields = append(selectedFields, customer.FieldSource)
				fieldSeen[customer.FieldSource] = struct{}{}
			}
		case "level":
			if _, ok := fieldSeen[customer.FieldLevel]; !ok {
				selectedFields = append(selectedFields, customer.FieldLevel)
				fieldSeen[customer.FieldLevel] = struct{}{}
			}
		case "metadata":
			if _, ok := fieldSeen[customer.FieldMetadata]; !ok {
				selectedFields = append(selectedFields, customer.FieldMetadata)
				fieldSeen[customer.FieldMetadata] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[customer.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, customer.FieldCreatedBy)
				fieldSeen[customer.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[customer.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, customer.FieldUpdatedBy)
				fieldSeen[customer.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		cq.Select(selectedFields...)
	}
	return nil
}

type customerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CustomerPaginateOption
}

func newCustomerPaginateArgs(rv map[string]any) *customerPaginateArgs {
	args := &customerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &CustomerOrder{Field: &CustomerOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithCustomerOrder(order))
			}
		case *CustomerOrder:
			if v != nil {
				args.opts = append(args.opts, WithCustomerOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*CustomerWhereInput); ok {
		args.opts = append(args.opts, WithCustomerFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fuq *FollowUpQuery) CollectFields(ctx context.Context, satisfies ...string) (*FollowUpQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return fuq, nil
	}
	if err := fuq.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return fuq, nil
}

func (fuq *FollowUpQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(followup.Columns))
		selectedFields = []string{followup.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "customer":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CustomerClient{config: fuq.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, customerImplementors)...); err != nil {
				return err
			}
			fuq.withCustomer = query
		case "createdAt":
			if _, ok := fieldSeen[followup.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, followup.FieldCreatedAt)
				fieldSeen[followup.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[followup.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, followup.FieldUpdatedAt)
				fieldSeen[followup.FieldUpdatedAt] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[followup.FieldType]; !ok {
				selectedFields = append(selectedFields, followup.FieldType)
				fieldSeen[followup.FieldType] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[followup.FieldContent]; !ok {
				selectedFields = append(selectedFields, followup.FieldContent)
				fieldSeen[followup.FieldContent] = struct{}{}
			}
		case "followedAt":
			if _, ok := fieldSeen[followup.FieldFollowedAt]; !ok {
				selectedFields = append(selectedFields, followup.FieldFollowedAt)
				fieldSeen[followup.FieldFollowedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[followup.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, followup.FieldCreatedBy)
				fieldSeen[followup.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[followup.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, followup.FieldUpdatedBy)
				fieldSeen[followup.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		fuq.Select(selectedFields...)
	}
	return nil
}

type followupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FollowUpPaginateOption
}

func newFollowUpPaginateArgs(rv map[string]any) *followupPaginateArgs {
	args := &followupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &FollowUpOrder{Field: &FollowUpOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithFollowUpOrder(order))
			}
		case *FollowUpOrder:
			if v != nil {
				args.opts = append(args.opts, WithFollowUpOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*FollowUpWhereInput); ok {
		args.opts = append(args.opts, WithFollowUpFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pq *PaymentQuery) CollectFields(ctx context.Context, satisfies ...string) (*PaymentQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pq, nil
	}
	if err := pq.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pq, nil
}

func (pq *PaymentQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(payment.Columns))
		selectedFields = []string{payment.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "contract":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ContractClient{config: pq.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, contractImplementors)...); err != nil {
				return err
			}
			pq.withContract = query
		case "createdAt":
			if _, ok := fieldSeen[payment.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, payment.FieldCreatedAt)
				fieldSeen[payment.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[payment.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, payment.FieldUpdatedAt)
				fieldSeen[payment.FieldUpdatedAt] = struct{}{}
			}
		case "amount":
			if _, ok := fieldSeen[payment.FieldAmount]; !ok {
				selectedFields = append(selectedFields, payment.FieldAmount)
				fieldSeen[payment.FieldAmount] = struct{}{}
			}
		case "receivedAt":
			if _, ok := fieldSeen[payment.FieldReceivedAt]; !ok {
				selectedFields = append(selectedFields, payment.FieldReceivedAt)
				fieldSeen[payment.FieldReceivedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[payment.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, payment.FieldCreatedBy)
				fieldSeen[payment.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[payment.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, payment.FieldUpdatedBy)
				fieldSeen[payment.FieldUpdatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pq.Select(selectedFields...)
	}
	return nil
}

type paymentPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PaymentPaginateOption
}

func newPaymentPaginateArgs(rv map[string]any) *paymentPaginateArgs {
	args := &paymentPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PaymentOrder{Field: &PaymentOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPaymentOrder(order))
			}
		case *PaymentOrder:
			if v != nil {
				args.opts = append(args.opts, WithPaymentOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PaymentWhereInput); ok {
		args.opts = append(args.opts, WithPaymentFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok || v == nil {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
