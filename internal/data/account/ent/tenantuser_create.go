// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/membership"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
	"github.com/go-keg/monorepo/internal/data/account/ent/user"
)

// TenantUserCreate is the builder for creating a TenantUser entity.
type TenantUserCreate struct {
	config
	mutation *TenantUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (tuc *TenantUserCreate) SetTenantID(i int) *TenantUserCreate {
	tuc.mutation.SetTenantID(i)
	return tuc
}

// SetUserID sets the "user_id" field.
func (tuc *TenantUserCreate) SetUserID(i int) *TenantUserCreate {
	tuc.mutation.SetUserID(i)
	return tuc
}

// SetIsOwner sets the "is_owner" field.
func (tuc *TenantUserCreate) SetIsOwner(b bool) *TenantUserCreate {
	tuc.mutation.SetIsOwner(b)
	return tuc
}

// SetNillableIsOwner sets the "is_owner" field if the given value is not nil.
func (tuc *TenantUserCreate) SetNillableIsOwner(b *bool) *TenantUserCreate {
	if b != nil {
		tuc.SetIsOwner(*b)
	}
	return tuc
}

// SetIsActive sets the "is_active" field.
func (tuc *TenantUserCreate) SetIsActive(b bool) *TenantUserCreate {
	tuc.mutation.SetIsActive(b)
	return tuc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuc *TenantUserCreate) SetNillableIsActive(b *bool) *TenantUserCreate {
	if b != nil {
		tuc.SetIsActive(*b)
	}
	return tuc
}

// SetLastLoginTenant sets the "last_login_tenant" field.
func (tuc *TenantUserCreate) SetLastLoginTenant(b bool) *TenantUserCreate {
	tuc.mutation.SetLastLoginTenant(b)
	return tuc
}

// SetNillableLastLoginTenant sets the "last_login_tenant" field if the given value is not nil.
func (tuc *TenantUserCreate) SetNillableLastLoginTenant(b *bool) *TenantUserCreate {
	if b != nil {
		tuc.SetLastLoginTenant(*b)
	}
	return tuc
}

// SetLastLoginAt sets the "last_login_at" field.
func (tuc *TenantUserCreate) SetLastLoginAt(t time.Time) *TenantUserCreate {
	tuc.mutation.SetLastLoginAt(t)
	return tuc
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (tuc *TenantUserCreate) SetNillableLastLoginAt(t *time.Time) *TenantUserCreate {
	if t != nil {
		tuc.SetLastLoginAt(*t)
	}
	return tuc
}

// SetID sets the "id" field.
func (tuc *TenantUserCreate) SetID(i int) *TenantUserCreate {
	tuc.mutation.SetID(i)
	return tuc
}

// SetUser sets the "user" edge to the User entity.
func (tuc *TenantUserCreate) SetUser(u *User) *TenantUserCreate {
	return tuc.SetUserID(u.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (tuc *TenantUserCreate) SetTenant(t *Tenant) *TenantUserCreate {
	return tuc.SetTenantID(t.ID)
}

// AddRoleIDs adds the "roles" edge to the TenantRole entity by IDs.
func (tuc *TenantUserCreate) AddRoleIDs(ids ...int) *TenantUserCreate {
	tuc.mutation.AddRoleIDs(ids...)
	return tuc
}

// AddRoles adds the "roles" edges to the TenantRole entity.
func (tuc *TenantUserCreate) AddRoles(t ...*TenantRole) *TenantUserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuc.AddRoleIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (tuc *TenantUserCreate) AddMembershipIDs(ids ...int) *TenantUserCreate {
	tuc.mutation.AddMembershipIDs(ids...)
	return tuc
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (tuc *TenantUserCreate) AddMemberships(m ...*Membership) *TenantUserCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuc.AddMembershipIDs(ids...)
}

// Mutation returns the TenantUserMutation object of the builder.
func (tuc *TenantUserCreate) Mutation() *TenantUserMutation {
	return tuc.mutation
}

// Save creates the TenantUser in the database.
func (tuc *TenantUserCreate) Save(ctx context.Context) (*TenantUser, error) {
	tuc.defaults()
	return withHooks(ctx, tuc.sqlSave, tuc.mutation, tuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TenantUserCreate) SaveX(ctx context.Context) *TenantUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TenantUserCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TenantUserCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuc *TenantUserCreate) defaults() {
	if _, ok := tuc.mutation.IsOwner(); !ok {
		v := tenantuser.DefaultIsOwner
		tuc.mutation.SetIsOwner(v)
	}
	if _, ok := tuc.mutation.IsActive(); !ok {
		v := tenantuser.DefaultIsActive
		tuc.mutation.SetIsActive(v)
	}
	if _, ok := tuc.mutation.LastLoginTenant(); !ok {
		v := tenantuser.DefaultLastLoginTenant
		tuc.mutation.SetLastLoginTenant(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TenantUserCreate) check() error {
	if _, ok := tuc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TenantUser.tenant_id"`)}
	}
	if _, ok := tuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TenantUser.user_id"`)}
	}
	if _, ok := tuc.mutation.IsOwner(); !ok {
		return &ValidationError{Name: "is_owner", err: errors.New(`ent: missing required field "TenantUser.is_owner"`)}
	}
	if _, ok := tuc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "TenantUser.is_active"`)}
	}
	if _, ok := tuc.mutation.LastLoginTenant(); !ok {
		return &ValidationError{Name: "last_login_tenant", err: errors.New(`ent: missing required field "TenantUser.last_login_tenant"`)}
	}
	if len(tuc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TenantUser.user"`)}
	}
	if len(tuc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "TenantUser.tenant"`)}
	}
	return nil
}

func (tuc *TenantUserCreate) sqlSave(ctx context.Context) (*TenantUser, error) {
	if err := tuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tuc.mutation.id = &_node.ID
	tuc.mutation.done = true
	return _node, nil
}

func (tuc *TenantUserCreate) createSpec() (*TenantUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TenantUser{config: tuc.config}
		_spec = sqlgraph.NewCreateSpec(tenantuser.Table, sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tuc.conflict
	if id, ok := tuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tuc.mutation.IsOwner(); ok {
		_spec.SetField(tenantuser.FieldIsOwner, field.TypeBool, value)
		_node.IsOwner = value
	}
	if value, ok := tuc.mutation.IsActive(); ok {
		_spec.SetField(tenantuser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tuc.mutation.LastLoginTenant(); ok {
		_spec.SetField(tenantuser.FieldLastLoginTenant, field.TypeBool, value)
		_node.LastLoginTenant = value
	}
	if value, ok := tuc.mutation.LastLoginAt(); ok {
		_spec.SetField(tenantuser.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = value
	}
	if nodes := tuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenantuser.UserTable,
			Columns: []string{tenantuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenantuser.TenantTable,
			Columns: []string{tenantuser.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenantUser.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUserUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (tuc *TenantUserCreate) OnConflict(opts ...sql.ConflictOption) *TenantUserUpsertOne {
	tuc.conflict = opts
	return &TenantUserUpsertOne{
		create: tuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenantUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tuc *TenantUserCreate) OnConflictColumns(columns ...string) *TenantUserUpsertOne {
	tuc.conflict = append(tuc.conflict, sql.ConflictColumns(columns...))
	return &TenantUserUpsertOne{
		create: tuc,
	}
}

type (
	// TenantUserUpsertOne is the builder for "upsert"-ing
	//  one TenantUser node.
	TenantUserUpsertOne struct {
		create *TenantUserCreate
	}

	// TenantUserUpsert is the "OnConflict" setter.
	TenantUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsOwner sets the "is_owner" field.
func (u *TenantUserUpsert) SetIsOwner(v bool) *TenantUserUpsert {
	u.Set(tenantuser.FieldIsOwner, v)
	return u
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *TenantUserUpsert) UpdateIsOwner() *TenantUserUpsert {
	u.SetExcluded(tenantuser.FieldIsOwner)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *TenantUserUpsert) SetIsActive(v bool) *TenantUserUpsert {
	u.Set(tenantuser.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TenantUserUpsert) UpdateIsActive() *TenantUserUpsert {
	u.SetExcluded(tenantuser.FieldIsActive)
	return u
}

// SetLastLoginTenant sets the "last_login_tenant" field.
func (u *TenantUserUpsert) SetLastLoginTenant(v bool) *TenantUserUpsert {
	u.Set(tenantuser.FieldLastLoginTenant, v)
	return u
}

// UpdateLastLoginTenant sets the "last_login_tenant" field to the value that was provided on create.
func (u *TenantUserUpsert) UpdateLastLoginTenant() *TenantUserUpsert {
	u.SetExcluded(tenantuser.FieldLastLoginTenant)
	return u
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *TenantUserUpsert) SetLastLoginAt(v time.Time) *TenantUserUpsert {
	u.Set(tenantuser.FieldLastLoginAt, v)
	return u
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *TenantUserUpsert) UpdateLastLoginAt() *TenantUserUpsert {
	u.SetExcluded(tenantuser.FieldLastLoginAt)
	return u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *TenantUserUpsert) ClearLastLoginAt() *TenantUserUpsert {
	u.SetNull(tenantuser.FieldLastLoginAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TenantUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenantuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUserUpsertOne) UpdateNewValues() *TenantUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tenantuser.FieldID)
		}
		if _, exists := u.create.mutation.TenantID(); exists {
			s.SetIgnore(tenantuser.FieldTenantID)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(tenantuser.FieldUserID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenantUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TenantUserUpsertOne) Ignore() *TenantUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUserUpsertOne) DoNothing() *TenantUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantUserCreate.OnConflict
// documentation for more info.
func (u *TenantUserUpsertOne) Update(set func(*TenantUserUpsert)) *TenantUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsOwner sets the "is_owner" field.
func (u *TenantUserUpsertOne) SetIsOwner(v bool) *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetIsOwner(v)
	})
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *TenantUserUpsertOne) UpdateIsOwner() *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateIsOwner()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TenantUserUpsertOne) SetIsActive(v bool) *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TenantUserUpsertOne) UpdateIsActive() *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetLastLoginTenant sets the "last_login_tenant" field.
func (u *TenantUserUpsertOne) SetLastLoginTenant(v bool) *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetLastLoginTenant(v)
	})
}

// UpdateLastLoginTenant sets the "last_login_tenant" field to the value that was provided on create.
func (u *TenantUserUpsertOne) UpdateLastLoginTenant() *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateLastLoginTenant()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *TenantUserUpsertOne) SetLastLoginAt(v time.Time) *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *TenantUserUpsertOne) UpdateLastLoginAt() *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *TenantUserUpsertOne) ClearLastLoginAt() *TenantUserUpsertOne {
	return u.Update(func(s *TenantUserUpsert) {
		s.ClearLastLoginAt()
	})
}

// Exec executes the query.
func (u *TenantUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TenantUserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TenantUserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TenantUserCreateBulk is the builder for creating many TenantUser entities in bulk.
type TenantUserCreateBulk struct {
	config
	err      error
	builders []*TenantUserCreate
	conflict []sql.ConflictOption
}

// Save creates the TenantUser entities in the database.
func (tucb *TenantUserCreateBulk) Save(ctx context.Context) ([]*TenantUser, error) {
	if tucb.err != nil {
		return nil, tucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TenantUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TenantUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TenantUserCreateBulk) SaveX(ctx context.Context) []*TenantUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TenantUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TenantUserCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TenantUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TenantUserUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (tucb *TenantUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *TenantUserUpsertBulk {
	tucb.conflict = opts
	return &TenantUserUpsertBulk{
		create: tucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TenantUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tucb *TenantUserCreateBulk) OnConflictColumns(columns ...string) *TenantUserUpsertBulk {
	tucb.conflict = append(tucb.conflict, sql.ConflictColumns(columns...))
	return &TenantUserUpsertBulk{
		create: tucb,
	}
}

// TenantUserUpsertBulk is the builder for "upsert"-ing
// a bulk of TenantUser nodes.
type TenantUserUpsertBulk struct {
	create *TenantUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TenantUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tenantuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TenantUserUpsertBulk) UpdateNewValues() *TenantUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tenantuser.FieldID)
			}
			if _, exists := b.mutation.TenantID(); exists {
				s.SetIgnore(tenantuser.FieldTenantID)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(tenantuser.FieldUserID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TenantUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TenantUserUpsertBulk) Ignore() *TenantUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TenantUserUpsertBulk) DoNothing() *TenantUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TenantUserCreateBulk.OnConflict
// documentation for more info.
func (u *TenantUserUpsertBulk) Update(set func(*TenantUserUpsert)) *TenantUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TenantUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsOwner sets the "is_owner" field.
func (u *TenantUserUpsertBulk) SetIsOwner(v bool) *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetIsOwner(v)
	})
}

// UpdateIsOwner sets the "is_owner" field to the value that was provided on create.
func (u *TenantUserUpsertBulk) UpdateIsOwner() *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateIsOwner()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TenantUserUpsertBulk) SetIsActive(v bool) *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TenantUserUpsertBulk) UpdateIsActive() *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetLastLoginTenant sets the "last_login_tenant" field.
func (u *TenantUserUpsertBulk) SetLastLoginTenant(v bool) *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetLastLoginTenant(v)
	})
}

// UpdateLastLoginTenant sets the "last_login_tenant" field to the value that was provided on create.
func (u *TenantUserUpsertBulk) UpdateLastLoginTenant() *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateLastLoginTenant()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *TenantUserUpsertBulk) SetLastLoginAt(v time.Time) *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *TenantUserUpsertBulk) UpdateLastLoginAt() *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *TenantUserUpsertBulk) ClearLastLoginAt() *TenantUserUpsertBulk {
	return u.Update(func(s *TenantUserUpsert) {
		s.ClearLastLoginAt()
	})
}

// Exec executes the query.
func (u *TenantUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TenantUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TenantUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TenantUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
