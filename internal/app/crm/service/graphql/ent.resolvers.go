package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70-dev

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/go-keg/monorepo/internal/data/crm/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.CustomerOrder, where *ent.CustomerWhereInput) (*ent.CustomerConnection, error) {
	return r.client.Customer.Query().Paginate(ctx, after, first, before, last, ent.WithCustomerFilter(where.Filter), ent.WithCustomerOrder(orderBy))
}

// CustomerList is the resolver for the customerList field.
func (r *queryResolver) CustomerList(ctx context.Context, offset int, limit int, orderBy *ent.CustomerOrder, where *ent.CustomerWhereInput) (*ent.CustomerConnection, error) {
	return r.client.Customer.Query().List(ctx, offset, limit, ent.WithCustomerFilter(where.Filter), ent.WithCustomerOrder(orderBy))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
