// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
	"github.com/go-keg/monorepo/internal/data/crm/ent/payment"
)

// ContractCreate is the builder for creating a Contract entity.
type ContractCreate struct {
	config
	mutation *ContractMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContractCreate) SetCreatedAt(t time.Time) *ContractCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableCreatedAt(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContractCreate) SetUpdatedAt(t time.Time) *ContractCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableUpdatedAt(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *ContractCreate) SetCreatedBy(i int) *ContractCreate {
	cc.mutation.SetCreatedBy(i)
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *ContractCreate) SetUpdatedBy(i int) *ContractCreate {
	cc.mutation.SetUpdatedBy(i)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *ContractCreate) SetNillableUpdatedBy(i *int) *ContractCreate {
	if i != nil {
		cc.SetUpdatedBy(*i)
	}
	return cc
}

// SetContractNo sets the "contract_no" field.
func (cc *ContractCreate) SetContractNo(s string) *ContractCreate {
	cc.mutation.SetContractNo(s)
	return cc
}

// SetAmount sets the "amount" field.
func (cc *ContractCreate) SetAmount(f float64) *ContractCreate {
	cc.mutation.SetAmount(f)
	return cc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cc *ContractCreate) SetNillableAmount(f *float64) *ContractCreate {
	if f != nil {
		cc.SetAmount(*f)
	}
	return cc
}

// SetSignedAt sets the "signed_at" field.
func (cc *ContractCreate) SetSignedAt(t time.Time) *ContractCreate {
	cc.mutation.SetSignedAt(t)
	return cc
}

// SetNillableSignedAt sets the "signed_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableSignedAt(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetSignedAt(*t)
	}
	return cc
}

// SetEndAt sets the "end_at" field.
func (cc *ContractCreate) SetEndAt(t time.Time) *ContractCreate {
	cc.mutation.SetEndAt(t)
	return cc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (cc *ContractCreate) SetNillableEndAt(t *time.Time) *ContractCreate {
	if t != nil {
		cc.SetEndAt(*t)
	}
	return cc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cc *ContractCreate) SetCustomerID(id int) *ContractCreate {
	cc.mutation.SetCustomerID(id)
	return cc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cc *ContractCreate) SetCustomer(c *Customer) *ContractCreate {
	return cc.SetCustomerID(c.ID)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cc *ContractCreate) AddPaymentIDs(ids ...int) *ContractCreate {
	cc.mutation.AddPaymentIDs(ids...)
	return cc
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cc *ContractCreate) AddPayments(p ...*Payment) *ContractCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPaymentIDs(ids...)
}

// Mutation returns the ContractMutation object of the builder.
func (cc *ContractCreate) Mutation() *ContractMutation {
	return cc.mutation
}

// Save creates the Contract in the database.
func (cc *ContractCreate) Save(ctx context.Context) (*Contract, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContractCreate) SaveX(ctx context.Context) *Contract {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContractCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContractCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContractCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := contract.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := contract.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Amount(); !ok {
		v := contract.DefaultAmount
		cc.mutation.SetAmount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContractCreate) check() error {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Contract.created_by"`)}
	}
	if _, ok := cc.mutation.ContractNo(); !ok {
		return &ValidationError{Name: "contract_no", err: errors.New(`ent: missing required field "Contract.contract_no"`)}
	}
	if v, ok := cc.mutation.ContractNo(); ok {
		if err := contract.ContractNoValidator(v); err != nil {
			return &ValidationError{Name: "contract_no", err: fmt.Errorf(`ent: validator failed for field "Contract.contract_no": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Contract.amount"`)}
	}
	if len(cc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Contract.customer"`)}
	}
	return nil
}

func (cc *ContractCreate) sqlSave(ctx context.Context) (*Contract, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContractCreate) createSpec() (*Contract, *sqlgraph.CreateSpec) {
	var (
		_node = &Contract{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contract.Table, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(contract.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(contract.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(contract.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.ContractNo(); ok {
		_spec.SetField(contract.FieldContractNo, field.TypeString, value)
		_node.ContractNo = value
	}
	if value, ok := cc.mutation.Amount(); ok {
		_spec.SetField(contract.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := cc.mutation.SignedAt(); ok {
		_spec.SetField(contract.FieldSignedAt, field.TypeTime, value)
		_node.SignedAt = value
	}
	if value, ok := cc.mutation.EndAt(); ok {
		_spec.SetField(contract.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if nodes := cc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.CustomerTable,
			Columns: []string{contract.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_contracts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   contract.PaymentsTable,
			Columns: []string{contract.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contract.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ContractCreate) OnConflict(opts ...sql.ConflictOption) *ContractUpsertOne {
	cc.conflict = opts
	return &ContractUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContractCreate) OnConflictColumns(columns ...string) *ContractUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContractUpsertOne{
		create: cc,
	}
}

type (
	// ContractUpsertOne is the builder for "upsert"-ing
	//  one Contract node.
	ContractUpsertOne struct {
		create *ContractCreate
	}

	// ContractUpsert is the "OnConflict" setter.
	ContractUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractUpsert) SetUpdatedAt(v time.Time) *ContractUpsert {
	u.Set(contract.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractUpsert) UpdateUpdatedAt() *ContractUpsert {
	u.SetExcluded(contract.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ContractUpsert) ClearUpdatedAt() *ContractUpsert {
	u.SetNull(contract.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ContractUpsert) SetUpdatedBy(v int) *ContractUpsert {
	u.Set(contract.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ContractUpsert) UpdateUpdatedBy() *ContractUpsert {
	u.SetExcluded(contract.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ContractUpsert) AddUpdatedBy(v int) *ContractUpsert {
	u.Add(contract.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ContractUpsert) ClearUpdatedBy() *ContractUpsert {
	u.SetNull(contract.FieldUpdatedBy)
	return u
}

// SetContractNo sets the "contract_no" field.
func (u *ContractUpsert) SetContractNo(v string) *ContractUpsert {
	u.Set(contract.FieldContractNo, v)
	return u
}

// UpdateContractNo sets the "contract_no" field to the value that was provided on create.
func (u *ContractUpsert) UpdateContractNo() *ContractUpsert {
	u.SetExcluded(contract.FieldContractNo)
	return u
}

// SetAmount sets the "amount" field.
func (u *ContractUpsert) SetAmount(v float64) *ContractUpsert {
	u.Set(contract.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ContractUpsert) UpdateAmount() *ContractUpsert {
	u.SetExcluded(contract.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *ContractUpsert) AddAmount(v float64) *ContractUpsert {
	u.Add(contract.FieldAmount, v)
	return u
}

// SetSignedAt sets the "signed_at" field.
func (u *ContractUpsert) SetSignedAt(v time.Time) *ContractUpsert {
	u.Set(contract.FieldSignedAt, v)
	return u
}

// UpdateSignedAt sets the "signed_at" field to the value that was provided on create.
func (u *ContractUpsert) UpdateSignedAt() *ContractUpsert {
	u.SetExcluded(contract.FieldSignedAt)
	return u
}

// ClearSignedAt clears the value of the "signed_at" field.
func (u *ContractUpsert) ClearSignedAt() *ContractUpsert {
	u.SetNull(contract.FieldSignedAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *ContractUpsert) SetEndAt(v time.Time) *ContractUpsert {
	u.Set(contract.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *ContractUpsert) UpdateEndAt() *ContractUpsert {
	u.SetExcluded(contract.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *ContractUpsert) ClearEndAt() *ContractUpsert {
	u.SetNull(contract.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContractUpsertOne) UpdateNewValues() *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(contract.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(contract.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contract.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContractUpsertOne) Ignore() *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContractUpsertOne) DoNothing() *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContractCreate.OnConflict
// documentation for more info.
func (u *ContractUpsertOne) Update(set func(*ContractUpsert)) *ContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractUpsertOne) SetUpdatedAt(v time.Time) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateUpdatedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ContractUpsertOne) ClearUpdatedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ContractUpsertOne) SetUpdatedBy(v int) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ContractUpsertOne) AddUpdatedBy(v int) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateUpdatedBy() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ContractUpsertOne) ClearUpdatedBy() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetContractNo sets the "contract_no" field.
func (u *ContractUpsertOne) SetContractNo(v string) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetContractNo(v)
	})
}

// UpdateContractNo sets the "contract_no" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateContractNo() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateContractNo()
	})
}

// SetAmount sets the "amount" field.
func (u *ContractUpsertOne) SetAmount(v float64) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ContractUpsertOne) AddAmount(v float64) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateAmount() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateAmount()
	})
}

// SetSignedAt sets the "signed_at" field.
func (u *ContractUpsertOne) SetSignedAt(v time.Time) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetSignedAt(v)
	})
}

// UpdateSignedAt sets the "signed_at" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateSignedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateSignedAt()
	})
}

// ClearSignedAt clears the value of the "signed_at" field.
func (u *ContractUpsertOne) ClearSignedAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearSignedAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *ContractUpsertOne) SetEndAt(v time.Time) *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *ContractUpsertOne) UpdateEndAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *ContractUpsertOne) ClearEndAt() *ContractUpsertOne {
	return u.Update(func(s *ContractUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *ContractUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContractCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContractUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContractUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContractUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContractCreateBulk is the builder for creating many Contract entities in bulk.
type ContractCreateBulk struct {
	config
	err      error
	builders []*ContractCreate
	conflict []sql.ConflictOption
}

// Save creates the Contract entities in the database.
func (ccb *ContractCreateBulk) Save(ctx context.Context) ([]*Contract, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contract, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContractCreateBulk) SaveX(ctx context.Context) []*Contract {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContractCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContractCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contract.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContractCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContractUpsertBulk {
	ccb.conflict = opts
	return &ContractUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContractCreateBulk) OnConflictColumns(columns ...string) *ContractUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContractUpsertBulk{
		create: ccb,
	}
}

// ContractUpsertBulk is the builder for "upsert"-ing
// a bulk of Contract nodes.
type ContractUpsertBulk struct {
	create *ContractCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContractUpsertBulk) UpdateNewValues() *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(contract.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(contract.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contract.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContractUpsertBulk) Ignore() *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContractUpsertBulk) DoNothing() *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContractCreateBulk.OnConflict
// documentation for more info.
func (u *ContractUpsertBulk) Update(set func(*ContractUpsert)) *ContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractUpsertBulk) SetUpdatedAt(v time.Time) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateUpdatedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ContractUpsertBulk) ClearUpdatedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ContractUpsertBulk) SetUpdatedBy(v int) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ContractUpsertBulk) AddUpdatedBy(v int) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateUpdatedBy() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ContractUpsertBulk) ClearUpdatedBy() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetContractNo sets the "contract_no" field.
func (u *ContractUpsertBulk) SetContractNo(v string) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetContractNo(v)
	})
}

// UpdateContractNo sets the "contract_no" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateContractNo() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateContractNo()
	})
}

// SetAmount sets the "amount" field.
func (u *ContractUpsertBulk) SetAmount(v float64) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *ContractUpsertBulk) AddAmount(v float64) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateAmount() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateAmount()
	})
}

// SetSignedAt sets the "signed_at" field.
func (u *ContractUpsertBulk) SetSignedAt(v time.Time) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetSignedAt(v)
	})
}

// UpdateSignedAt sets the "signed_at" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateSignedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateSignedAt()
	})
}

// ClearSignedAt clears the value of the "signed_at" field.
func (u *ContractUpsertBulk) ClearSignedAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearSignedAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *ContractUpsertBulk) SetEndAt(v time.Time) *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *ContractUpsertBulk) UpdateEndAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *ContractUpsertBulk) ClearEndAt() *ContractUpsertBulk {
	return u.Update(func(s *ContractUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *ContractUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContractCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContractCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContractUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
