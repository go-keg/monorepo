// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/oauthprovider"
)

// OAuthProviderCreate is the builder for creating a OAuthProvider entity.
type OAuthProviderCreate struct {
	config
	mutation *OAuthProviderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProvider sets the "provider" field.
func (opc *OAuthProviderCreate) SetProvider(s string) *OAuthProviderCreate {
	opc.mutation.SetProvider(s)
	return opc
}

// SetName sets the "name" field.
func (opc *OAuthProviderCreate) SetName(s string) *OAuthProviderCreate {
	opc.mutation.SetName(s)
	return opc
}

// SetClientID sets the "client_id" field.
func (opc *OAuthProviderCreate) SetClientID(s string) *OAuthProviderCreate {
	opc.mutation.SetClientID(s)
	return opc
}

// SetClientSecret sets the "client_secret" field.
func (opc *OAuthProviderCreate) SetClientSecret(s string) *OAuthProviderCreate {
	opc.mutation.SetClientSecret(s)
	return opc
}

// SetAuthURL sets the "auth_url" field.
func (opc *OAuthProviderCreate) SetAuthURL(s string) *OAuthProviderCreate {
	opc.mutation.SetAuthURL(s)
	return opc
}

// SetTokenURL sets the "token_url" field.
func (opc *OAuthProviderCreate) SetTokenURL(s string) *OAuthProviderCreate {
	opc.mutation.SetTokenURL(s)
	return opc
}

// SetUserInfoURL sets the "user_info_url" field.
func (opc *OAuthProviderCreate) SetUserInfoURL(s string) *OAuthProviderCreate {
	opc.mutation.SetUserInfoURL(s)
	return opc
}

// SetRedirectURI sets the "redirect_uri" field.
func (opc *OAuthProviderCreate) SetRedirectURI(s string) *OAuthProviderCreate {
	opc.mutation.SetRedirectURI(s)
	return opc
}

// SetScopes sets the "scopes" field.
func (opc *OAuthProviderCreate) SetScopes(s string) *OAuthProviderCreate {
	opc.mutation.SetScopes(s)
	return opc
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (opc *OAuthProviderCreate) SetNillableScopes(s *string) *OAuthProviderCreate {
	if s != nil {
		opc.SetScopes(*s)
	}
	return opc
}

// SetEnabled sets the "enabled" field.
func (opc *OAuthProviderCreate) SetEnabled(b bool) *OAuthProviderCreate {
	opc.mutation.SetEnabled(b)
	return opc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (opc *OAuthProviderCreate) SetNillableEnabled(b *bool) *OAuthProviderCreate {
	if b != nil {
		opc.SetEnabled(*b)
	}
	return opc
}

// Mutation returns the OAuthProviderMutation object of the builder.
func (opc *OAuthProviderCreate) Mutation() *OAuthProviderMutation {
	return opc.mutation
}

// Save creates the OAuthProvider in the database.
func (opc *OAuthProviderCreate) Save(ctx context.Context) (*OAuthProvider, error) {
	opc.defaults()
	return withHooks(ctx, opc.sqlSave, opc.mutation, opc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OAuthProviderCreate) SaveX(ctx context.Context) *OAuthProvider {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OAuthProviderCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OAuthProviderCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OAuthProviderCreate) defaults() {
	if _, ok := opc.mutation.Enabled(); !ok {
		v := oauthprovider.DefaultEnabled
		opc.mutation.SetEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opc *OAuthProviderCreate) check() error {
	if _, ok := opc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "OAuthProvider.provider"`)}
	}
	if _, ok := opc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OAuthProvider.name"`)}
	}
	if v, ok := opc.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.name": %w`, err)}
		}
	}
	if _, ok := opc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OAuthProvider.client_id"`)}
	}
	if v, ok := opc.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.client_id": %w`, err)}
		}
	}
	if _, ok := opc.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OAuthProvider.client_secret"`)}
	}
	if v, ok := opc.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.client_secret": %w`, err)}
		}
	}
	if _, ok := opc.mutation.AuthURL(); !ok {
		return &ValidationError{Name: "auth_url", err: errors.New(`ent: missing required field "OAuthProvider.auth_url"`)}
	}
	if v, ok := opc.mutation.AuthURL(); ok {
		if err := oauthprovider.AuthURLValidator(v); err != nil {
			return &ValidationError{Name: "auth_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.auth_url": %w`, err)}
		}
	}
	if _, ok := opc.mutation.TokenURL(); !ok {
		return &ValidationError{Name: "token_url", err: errors.New(`ent: missing required field "OAuthProvider.token_url"`)}
	}
	if v, ok := opc.mutation.TokenURL(); ok {
		if err := oauthprovider.TokenURLValidator(v); err != nil {
			return &ValidationError{Name: "token_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.token_url": %w`, err)}
		}
	}
	if _, ok := opc.mutation.UserInfoURL(); !ok {
		return &ValidationError{Name: "user_info_url", err: errors.New(`ent: missing required field "OAuthProvider.user_info_url"`)}
	}
	if v, ok := opc.mutation.UserInfoURL(); ok {
		if err := oauthprovider.UserInfoURLValidator(v); err != nil {
			return &ValidationError{Name: "user_info_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.user_info_url": %w`, err)}
		}
	}
	if _, ok := opc.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New(`ent: missing required field "OAuthProvider.redirect_uri"`)}
	}
	if v, ok := opc.mutation.RedirectURI(); ok {
		if err := oauthprovider.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.redirect_uri": %w`, err)}
		}
	}
	if _, ok := opc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "OAuthProvider.enabled"`)}
	}
	return nil
}

func (opc *OAuthProviderCreate) sqlSave(ctx context.Context) (*OAuthProvider, error) {
	if err := opc.check(); err != nil {
		return nil, err
	}
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	opc.mutation.id = &_node.ID
	opc.mutation.done = true
	return _node, nil
}

func (opc *OAuthProviderCreate) createSpec() (*OAuthProvider, *sqlgraph.CreateSpec) {
	var (
		_node = &OAuthProvider{config: opc.config}
		_spec = sqlgraph.NewCreateSpec(oauthprovider.Table, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeInt))
	)
	_spec.OnConflict = opc.conflict
	if value, ok := opc.mutation.Provider(); ok {
		_spec.SetField(oauthprovider.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := opc.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := opc.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := opc.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := opc.mutation.AuthURL(); ok {
		_spec.SetField(oauthprovider.FieldAuthURL, field.TypeString, value)
		_node.AuthURL = value
	}
	if value, ok := opc.mutation.TokenURL(); ok {
		_spec.SetField(oauthprovider.FieldTokenURL, field.TypeString, value)
		_node.TokenURL = value
	}
	if value, ok := opc.mutation.UserInfoURL(); ok {
		_spec.SetField(oauthprovider.FieldUserInfoURL, field.TypeString, value)
		_node.UserInfoURL = value
	}
	if value, ok := opc.mutation.RedirectURI(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	if value, ok := opc.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeString, value)
		_node.Scopes = value
	}
	if value, ok := opc.mutation.Enabled(); ok {
		_spec.SetField(oauthprovider.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthProvider.Create().
//		SetProvider(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthProviderUpsert) {
//			SetProvider(v+v).
//		}).
//		Exec(ctx)
func (opc *OAuthProviderCreate) OnConflict(opts ...sql.ConflictOption) *OAuthProviderUpsertOne {
	opc.conflict = opts
	return &OAuthProviderUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opc *OAuthProviderCreate) OnConflictColumns(columns ...string) *OAuthProviderUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OAuthProviderUpsertOne{
		create: opc,
	}
}

type (
	// OAuthProviderUpsertOne is the builder for "upsert"-ing
	//  one OAuthProvider node.
	OAuthProviderUpsertOne struct {
		create *OAuthProviderCreate
	}

	// OAuthProviderUpsert is the "OnConflict" setter.
	OAuthProviderUpsert struct {
		*sql.UpdateSet
	}
)

// SetProvider sets the "provider" field.
func (u *OAuthProviderUpsert) SetProvider(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateProvider() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldProvider)
	return u
}

// SetName sets the "name" field.
func (u *OAuthProviderUpsert) SetName(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateName() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldName)
	return u
}

// SetClientID sets the "client_id" field.
func (u *OAuthProviderUpsert) SetClientID(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateClientID() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *OAuthProviderUpsert) SetClientSecret(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateClientSecret() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldClientSecret)
	return u
}

// SetAuthURL sets the "auth_url" field.
func (u *OAuthProviderUpsert) SetAuthURL(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldAuthURL, v)
	return u
}

// UpdateAuthURL sets the "auth_url" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateAuthURL() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldAuthURL)
	return u
}

// SetTokenURL sets the "token_url" field.
func (u *OAuthProviderUpsert) SetTokenURL(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldTokenURL, v)
	return u
}

// UpdateTokenURL sets the "token_url" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateTokenURL() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldTokenURL)
	return u
}

// SetUserInfoURL sets the "user_info_url" field.
func (u *OAuthProviderUpsert) SetUserInfoURL(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldUserInfoURL, v)
	return u
}

// UpdateUserInfoURL sets the "user_info_url" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateUserInfoURL() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldUserInfoURL)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OAuthProviderUpsert) SetRedirectURI(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateRedirectURI() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldRedirectURI)
	return u
}

// SetScopes sets the "scopes" field.
func (u *OAuthProviderUpsert) SetScopes(v string) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldScopes, v)
	return u
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateScopes() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldScopes)
	return u
}

// ClearScopes clears the value of the "scopes" field.
func (u *OAuthProviderUpsert) ClearScopes() *OAuthProviderUpsert {
	u.SetNull(oauthprovider.FieldScopes)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *OAuthProviderUpsert) SetEnabled(v bool) *OAuthProviderUpsert {
	u.Set(oauthprovider.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *OAuthProviderUpsert) UpdateEnabled() *OAuthProviderUpsert {
	u.SetExcluded(oauthprovider.FieldEnabled)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OAuthProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OAuthProviderUpsertOne) UpdateNewValues() *OAuthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthProvider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OAuthProviderUpsertOne) Ignore() *OAuthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthProviderUpsertOne) DoNothing() *OAuthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthProviderCreate.OnConflict
// documentation for more info.
func (u *OAuthProviderUpsertOne) Update(set func(*OAuthProviderUpsert)) *OAuthProviderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetProvider sets the "provider" field.
func (u *OAuthProviderUpsertOne) SetProvider(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateProvider() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateProvider()
	})
}

// SetName sets the "name" field.
func (u *OAuthProviderUpsertOne) SetName(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateName() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateName()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthProviderUpsertOne) SetClientID(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateClientID() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OAuthProviderUpsertOne) SetClientSecret(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateClientSecret() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// SetAuthURL sets the "auth_url" field.
func (u *OAuthProviderUpsertOne) SetAuthURL(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetAuthURL(v)
	})
}

// UpdateAuthURL sets the "auth_url" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateAuthURL() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateAuthURL()
	})
}

// SetTokenURL sets the "token_url" field.
func (u *OAuthProviderUpsertOne) SetTokenURL(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetTokenURL(v)
	})
}

// UpdateTokenURL sets the "token_url" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateTokenURL() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateTokenURL()
	})
}

// SetUserInfoURL sets the "user_info_url" field.
func (u *OAuthProviderUpsertOne) SetUserInfoURL(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetUserInfoURL(v)
	})
}

// UpdateUserInfoURL sets the "user_info_url" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateUserInfoURL() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateUserInfoURL()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OAuthProviderUpsertOne) SetRedirectURI(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateRedirectURI() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateRedirectURI()
	})
}

// SetScopes sets the "scopes" field.
func (u *OAuthProviderUpsertOne) SetScopes(v string) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateScopes() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *OAuthProviderUpsertOne) ClearScopes() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.ClearScopes()
	})
}

// SetEnabled sets the "enabled" field.
func (u *OAuthProviderUpsertOne) SetEnabled(v bool) *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *OAuthProviderUpsertOne) UpdateEnabled() *OAuthProviderUpsertOne {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateEnabled()
	})
}

// Exec executes the query.
func (u *OAuthProviderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthProviderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthProviderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OAuthProviderUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OAuthProviderUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OAuthProviderCreateBulk is the builder for creating many OAuthProvider entities in bulk.
type OAuthProviderCreateBulk struct {
	config
	err      error
	builders []*OAuthProviderCreate
	conflict []sql.ConflictOption
}

// Save creates the OAuthProvider entities in the database.
func (opcb *OAuthProviderCreateBulk) Save(ctx context.Context) ([]*OAuthProvider, error) {
	if opcb.err != nil {
		return nil, opcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OAuthProvider, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OAuthProviderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OAuthProviderCreateBulk) SaveX(ctx context.Context) []*OAuthProvider {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OAuthProviderCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OAuthProviderCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OAuthProvider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OAuthProviderUpsert) {
//			SetProvider(v+v).
//		}).
//		Exec(ctx)
func (opcb *OAuthProviderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OAuthProviderUpsertBulk {
	opcb.conflict = opts
	return &OAuthProviderUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OAuthProvider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (opcb *OAuthProviderCreateBulk) OnConflictColumns(columns ...string) *OAuthProviderUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OAuthProviderUpsertBulk{
		create: opcb,
	}
}

// OAuthProviderUpsertBulk is the builder for "upsert"-ing
// a bulk of OAuthProvider nodes.
type OAuthProviderUpsertBulk struct {
	create *OAuthProviderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OAuthProvider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OAuthProviderUpsertBulk) UpdateNewValues() *OAuthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OAuthProvider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OAuthProviderUpsertBulk) Ignore() *OAuthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OAuthProviderUpsertBulk) DoNothing() *OAuthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OAuthProviderCreateBulk.OnConflict
// documentation for more info.
func (u *OAuthProviderUpsertBulk) Update(set func(*OAuthProviderUpsert)) *OAuthProviderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OAuthProviderUpsert{UpdateSet: update})
	}))
	return u
}

// SetProvider sets the "provider" field.
func (u *OAuthProviderUpsertBulk) SetProvider(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateProvider() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateProvider()
	})
}

// SetName sets the "name" field.
func (u *OAuthProviderUpsertBulk) SetName(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateName() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateName()
	})
}

// SetClientID sets the "client_id" field.
func (u *OAuthProviderUpsertBulk) SetClientID(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateClientID() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OAuthProviderUpsertBulk) SetClientSecret(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateClientSecret() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateClientSecret()
	})
}

// SetAuthURL sets the "auth_url" field.
func (u *OAuthProviderUpsertBulk) SetAuthURL(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetAuthURL(v)
	})
}

// UpdateAuthURL sets the "auth_url" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateAuthURL() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateAuthURL()
	})
}

// SetTokenURL sets the "token_url" field.
func (u *OAuthProviderUpsertBulk) SetTokenURL(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetTokenURL(v)
	})
}

// UpdateTokenURL sets the "token_url" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateTokenURL() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateTokenURL()
	})
}

// SetUserInfoURL sets the "user_info_url" field.
func (u *OAuthProviderUpsertBulk) SetUserInfoURL(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetUserInfoURL(v)
	})
}

// UpdateUserInfoURL sets the "user_info_url" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateUserInfoURL() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateUserInfoURL()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *OAuthProviderUpsertBulk) SetRedirectURI(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateRedirectURI() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateRedirectURI()
	})
}

// SetScopes sets the "scopes" field.
func (u *OAuthProviderUpsertBulk) SetScopes(v string) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateScopes() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *OAuthProviderUpsertBulk) ClearScopes() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.ClearScopes()
	})
}

// SetEnabled sets the "enabled" field.
func (u *OAuthProviderUpsertBulk) SetEnabled(v bool) *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *OAuthProviderUpsertBulk) UpdateEnabled() *OAuthProviderUpsertBulk {
	return u.Update(func(s *OAuthProviderUpsert) {
		s.UpdateEnabled()
	})
}

// Exec executes the query.
func (u *OAuthProviderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OAuthProviderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OAuthProviderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OAuthProviderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
