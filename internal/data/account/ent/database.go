// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
)

// Database is the client that holds all ent builders.
type Database struct {
	client *Client
}

// NewDatabase creates a new database configured with the given options.
func NewDatabase(opts ...Option) *Database {
	return &Database{client: NewClient(opts...)}
}

// InTx runs the given function f within a transaction.
func (db *Database) InTx(ctx context.Context, f func(context.Context) error) error {
	tx := TxFromContext(ctx)
	if tx != nil {
		return f(ctx)
	}

	tx, err := db.client.Tx(ctx)
	if err != nil {
		return fmt.Errorf("starting transaction: %w", err)
	}
	defer func() {
		if v := recover(); v != nil {
			_ = tx.Rollback()
			panic(v)
		}
	}()
	if err = f(NewTxContext(ctx, tx)); err != nil {
		if err2 := tx.Rollback(); err2 != nil {
			return fmt.Errorf("rolling back transaction: %v (original error: %w)", err2, err)
		}
		return err
	}
	return tx.Commit()
}

func (db *Database) loadClient(ctx context.Context) *Client {
	tx := TxFromContext(ctx)
	if tx != nil {
		return tx.Client()
	}
	return db.client
}

// Exec executes a query that doesn't return rows. For example, in SQL, INSERT or UPDATE.
func (db *Database) Exec(ctx context.Context, query string, args ...interface{}) (*sql.Result, error) {
	var res sql.Result
	err := db.loadClient(ctx).driver.Exec(ctx, query, args, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// Query executes a query that returns rows, typically a SELECT in SQL.
func (db *Database) Query(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var rows sql.Rows
	err := db.loadClient(ctx).driver.Query(ctx, query, args, &rows)
	if err != nil {
		return nil, err
	}
	return &rows, nil
}

// Close closes the database connection and prevents new queries from starting.
func (db *Database) Close() error {
	return db.client.Close()
}

// Membership is the client for interacting with the Membership builders.
func (db *Database) Membership(ctx context.Context) *MembershipClient {
	return db.loadClient(ctx).Membership
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *MembershipQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m MembershipMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// OAuthAccount is the client for interacting with the OAuthAccount builders.
func (db *Database) OAuthAccount(ctx context.Context) *OAuthAccountClient {
	return db.loadClient(ctx).OAuthAccount
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *OAuthAccountQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m OAuthAccountMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// OAuthProvider is the client for interacting with the OAuthProvider builders.
func (db *Database) OAuthProvider(ctx context.Context) *OAuthProviderClient {
	return db.loadClient(ctx).OAuthProvider
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *OAuthProviderQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m OAuthProviderMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// Organization is the client for interacting with the Organization builders.
func (db *Database) Organization(ctx context.Context) *OrganizationClient {
	return db.loadClient(ctx).Organization
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *OrganizationQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m OrganizationMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// Permission is the client for interacting with the Permission builders.
func (db *Database) Permission(ctx context.Context) *PermissionClient {
	return db.loadClient(ctx).Permission
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *PermissionQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m PermissionMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// Tenant is the client for interacting with the Tenant builders.
func (db *Database) Tenant(ctx context.Context) *TenantClient {
	return db.loadClient(ctx).Tenant
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *TenantQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m TenantMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// TenantRole is the client for interacting with the TenantRole builders.
func (db *Database) TenantRole(ctx context.Context) *TenantRoleClient {
	return db.loadClient(ctx).TenantRole
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *TenantRoleQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m TenantRoleMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// TenantUser is the client for interacting with the TenantUser builders.
func (db *Database) TenantUser(ctx context.Context) *TenantUserClient {
	return db.loadClient(ctx).TenantUser
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *TenantUserQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m TenantUserMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}

// User is the client for interacting with the User builders.
func (db *Database) User(ctx context.Context) *UserClient {
	return db.loadClient(ctx).User
}

// WhereP appends storage-level predicates to the query builder. Using this method, users
// can use type-assertion to append predicates that do not depend on any generated package.
func (q *UserQuery) WhereP(ps ...func(*sql.Selector)) {
	for i := range ps {
		q.predicates = append(q.predicates, ps[i])
	}
}

func (m UserMutation) Mutate(ctx context.Context, mu Mutation) (Value, error) {
	return m.Client().Mutate(ctx, mu)
}
