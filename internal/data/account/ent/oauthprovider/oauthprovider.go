// Code generated by ent, DO NOT EDIT.

package oauthprovider

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the oauthprovider type in the database.
	Label = "oauth_provider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldAuthURL holds the string denoting the auth_url field in the database.
	FieldAuthURL = "auth_url"
	// FieldTokenURL holds the string denoting the token_url field in the database.
	FieldTokenURL = "token_url"
	// FieldUserInfoURL holds the string denoting the user_info_url field in the database.
	FieldUserInfoURL = "user_info_url"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// Table holds the table name of the oauthprovider in the database.
	Table = "oauth_providers"
)

// Columns holds all SQL columns for oauthprovider fields.
var Columns = []string{
	FieldID,
	FieldProvider,
	FieldName,
	FieldClientID,
	FieldClientSecret,
	FieldAuthURL,
	FieldTokenURL,
	FieldUserInfoURL,
	FieldRedirectURI,
	FieldScopes,
	FieldEnabled,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// ClientSecretValidator is a validator for the "client_secret" field. It is called by the builders before save.
	ClientSecretValidator func(string) error
	// AuthURLValidator is a validator for the "auth_url" field. It is called by the builders before save.
	AuthURLValidator func(string) error
	// TokenURLValidator is a validator for the "token_url" field. It is called by the builders before save.
	TokenURLValidator func(string) error
	// UserInfoURLValidator is a validator for the "user_info_url" field. It is called by the builders before save.
	UserInfoURLValidator func(string) error
	// RedirectURIValidator is a validator for the "redirect_uri" field. It is called by the builders before save.
	RedirectURIValidator func(string) error
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
)

// OrderOption defines the ordering options for the OAuthProvider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByClientSecret orders the results by the client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByAuthURL orders the results by the auth_url field.
func ByAuthURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthURL, opts...).ToFunc()
}

// ByTokenURL orders the results by the token_url field.
func ByTokenURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenURL, opts...).ToFunc()
}

// ByUserInfoURL orders the results by the user_info_url field.
func ByUserInfoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserInfoURL, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByScopes orders the results by the scopes field.
func ByScopes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopes, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}
