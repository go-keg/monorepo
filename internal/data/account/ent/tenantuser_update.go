// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/membership"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantrole"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
)

// TenantUserUpdate is the builder for updating TenantUser entities.
type TenantUserUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantUserUpdate builder.
func (tuu *TenantUserUpdate) Where(ps ...predicate.TenantUser) *TenantUserUpdate {
	tuu.mutation.Where(ps...)
	return tuu
}

// SetIsOwner sets the "is_owner" field.
func (tuu *TenantUserUpdate) SetIsOwner(b bool) *TenantUserUpdate {
	tuu.mutation.SetIsOwner(b)
	return tuu
}

// SetNillableIsOwner sets the "is_owner" field if the given value is not nil.
func (tuu *TenantUserUpdate) SetNillableIsOwner(b *bool) *TenantUserUpdate {
	if b != nil {
		tuu.SetIsOwner(*b)
	}
	return tuu
}

// SetIsActive sets the "is_active" field.
func (tuu *TenantUserUpdate) SetIsActive(b bool) *TenantUserUpdate {
	tuu.mutation.SetIsActive(b)
	return tuu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuu *TenantUserUpdate) SetNillableIsActive(b *bool) *TenantUserUpdate {
	if b != nil {
		tuu.SetIsActive(*b)
	}
	return tuu
}

// SetLastLoginTenant sets the "last_login_tenant" field.
func (tuu *TenantUserUpdate) SetLastLoginTenant(b bool) *TenantUserUpdate {
	tuu.mutation.SetLastLoginTenant(b)
	return tuu
}

// SetNillableLastLoginTenant sets the "last_login_tenant" field if the given value is not nil.
func (tuu *TenantUserUpdate) SetNillableLastLoginTenant(b *bool) *TenantUserUpdate {
	if b != nil {
		tuu.SetLastLoginTenant(*b)
	}
	return tuu
}

// SetLastLoginAt sets the "last_login_at" field.
func (tuu *TenantUserUpdate) SetLastLoginAt(t time.Time) *TenantUserUpdate {
	tuu.mutation.SetLastLoginAt(t)
	return tuu
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (tuu *TenantUserUpdate) SetNillableLastLoginAt(t *time.Time) *TenantUserUpdate {
	if t != nil {
		tuu.SetLastLoginAt(*t)
	}
	return tuu
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (tuu *TenantUserUpdate) ClearLastLoginAt() *TenantUserUpdate {
	tuu.mutation.ClearLastLoginAt()
	return tuu
}

// AddRoleIDs adds the "roles" edge to the TenantRole entity by IDs.
func (tuu *TenantUserUpdate) AddRoleIDs(ids ...int) *TenantUserUpdate {
	tuu.mutation.AddRoleIDs(ids...)
	return tuu
}

// AddRoles adds the "roles" edges to the TenantRole entity.
func (tuu *TenantUserUpdate) AddRoles(t ...*TenantRole) *TenantUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.AddRoleIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (tuu *TenantUserUpdate) AddMembershipIDs(ids ...int) *TenantUserUpdate {
	tuu.mutation.AddMembershipIDs(ids...)
	return tuu
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (tuu *TenantUserUpdate) AddMemberships(m ...*Membership) *TenantUserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuu.AddMembershipIDs(ids...)
}

// Mutation returns the TenantUserMutation object of the builder.
func (tuu *TenantUserUpdate) Mutation() *TenantUserMutation {
	return tuu.mutation
}

// ClearRoles clears all "roles" edges to the TenantRole entity.
func (tuu *TenantUserUpdate) ClearRoles() *TenantUserUpdate {
	tuu.mutation.ClearRoles()
	return tuu
}

// RemoveRoleIDs removes the "roles" edge to TenantRole entities by IDs.
func (tuu *TenantUserUpdate) RemoveRoleIDs(ids ...int) *TenantUserUpdate {
	tuu.mutation.RemoveRoleIDs(ids...)
	return tuu
}

// RemoveRoles removes "roles" edges to TenantRole entities.
func (tuu *TenantUserUpdate) RemoveRoles(t ...*TenantRole) *TenantUserUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.RemoveRoleIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (tuu *TenantUserUpdate) ClearMemberships() *TenantUserUpdate {
	tuu.mutation.ClearMemberships()
	return tuu
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (tuu *TenantUserUpdate) RemoveMembershipIDs(ids ...int) *TenantUserUpdate {
	tuu.mutation.RemoveMembershipIDs(ids...)
	return tuu
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (tuu *TenantUserUpdate) RemoveMemberships(m ...*Membership) *TenantUserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuu.RemoveMembershipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TenantUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tuu.sqlSave, tuu.mutation, tuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TenantUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TenantUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TenantUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuu *TenantUserUpdate) check() error {
	if tuu.mutation.UserCleared() && len(tuu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenantUser.user"`)
	}
	if tuu.mutation.TenantCleared() && len(tuu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenantUser.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuu *TenantUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUserUpdate {
	tuu.modifiers = append(tuu.modifiers, modifiers...)
	return tuu
}

func (tuu *TenantUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantuser.Table, tenantuser.Columns, sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt))
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.IsOwner(); ok {
		_spec.SetField(tenantuser.FieldIsOwner, field.TypeBool, value)
	}
	if value, ok := tuu.mutation.IsActive(); ok {
		_spec.SetField(tenantuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuu.mutation.LastLoginTenant(); ok {
		_spec.SetField(tenantuser.FieldLastLoginTenant, field.TypeBool, value)
	}
	if value, ok := tuu.mutation.LastLoginAt(); ok {
		_spec.SetField(tenantuser.FieldLastLoginAt, field.TypeTime, value)
	}
	if tuu.mutation.LastLoginAtCleared() {
		_spec.ClearField(tenantuser.FieldLastLoginAt, field.TypeTime)
	}
	if tuu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !tuu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !tuu.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tuu.mutation.done = true
	return n, nil
}

// TenantUserUpdateOne is the builder for updating a single TenantUser entity.
type TenantUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsOwner sets the "is_owner" field.
func (tuuo *TenantUserUpdateOne) SetIsOwner(b bool) *TenantUserUpdateOne {
	tuuo.mutation.SetIsOwner(b)
	return tuuo
}

// SetNillableIsOwner sets the "is_owner" field if the given value is not nil.
func (tuuo *TenantUserUpdateOne) SetNillableIsOwner(b *bool) *TenantUserUpdateOne {
	if b != nil {
		tuuo.SetIsOwner(*b)
	}
	return tuuo
}

// SetIsActive sets the "is_active" field.
func (tuuo *TenantUserUpdateOne) SetIsActive(b bool) *TenantUserUpdateOne {
	tuuo.mutation.SetIsActive(b)
	return tuuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuuo *TenantUserUpdateOne) SetNillableIsActive(b *bool) *TenantUserUpdateOne {
	if b != nil {
		tuuo.SetIsActive(*b)
	}
	return tuuo
}

// SetLastLoginTenant sets the "last_login_tenant" field.
func (tuuo *TenantUserUpdateOne) SetLastLoginTenant(b bool) *TenantUserUpdateOne {
	tuuo.mutation.SetLastLoginTenant(b)
	return tuuo
}

// SetNillableLastLoginTenant sets the "last_login_tenant" field if the given value is not nil.
func (tuuo *TenantUserUpdateOne) SetNillableLastLoginTenant(b *bool) *TenantUserUpdateOne {
	if b != nil {
		tuuo.SetLastLoginTenant(*b)
	}
	return tuuo
}

// SetLastLoginAt sets the "last_login_at" field.
func (tuuo *TenantUserUpdateOne) SetLastLoginAt(t time.Time) *TenantUserUpdateOne {
	tuuo.mutation.SetLastLoginAt(t)
	return tuuo
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (tuuo *TenantUserUpdateOne) SetNillableLastLoginAt(t *time.Time) *TenantUserUpdateOne {
	if t != nil {
		tuuo.SetLastLoginAt(*t)
	}
	return tuuo
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (tuuo *TenantUserUpdateOne) ClearLastLoginAt() *TenantUserUpdateOne {
	tuuo.mutation.ClearLastLoginAt()
	return tuuo
}

// AddRoleIDs adds the "roles" edge to the TenantRole entity by IDs.
func (tuuo *TenantUserUpdateOne) AddRoleIDs(ids ...int) *TenantUserUpdateOne {
	tuuo.mutation.AddRoleIDs(ids...)
	return tuuo
}

// AddRoles adds the "roles" edges to the TenantRole entity.
func (tuuo *TenantUserUpdateOne) AddRoles(t ...*TenantRole) *TenantUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.AddRoleIDs(ids...)
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (tuuo *TenantUserUpdateOne) AddMembershipIDs(ids ...int) *TenantUserUpdateOne {
	tuuo.mutation.AddMembershipIDs(ids...)
	return tuuo
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (tuuo *TenantUserUpdateOne) AddMemberships(m ...*Membership) *TenantUserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuuo.AddMembershipIDs(ids...)
}

// Mutation returns the TenantUserMutation object of the builder.
func (tuuo *TenantUserUpdateOne) Mutation() *TenantUserMutation {
	return tuuo.mutation
}

// ClearRoles clears all "roles" edges to the TenantRole entity.
func (tuuo *TenantUserUpdateOne) ClearRoles() *TenantUserUpdateOne {
	tuuo.mutation.ClearRoles()
	return tuuo
}

// RemoveRoleIDs removes the "roles" edge to TenantRole entities by IDs.
func (tuuo *TenantUserUpdateOne) RemoveRoleIDs(ids ...int) *TenantUserUpdateOne {
	tuuo.mutation.RemoveRoleIDs(ids...)
	return tuuo
}

// RemoveRoles removes "roles" edges to TenantRole entities.
func (tuuo *TenantUserUpdateOne) RemoveRoles(t ...*TenantRole) *TenantUserUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.RemoveRoleIDs(ids...)
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (tuuo *TenantUserUpdateOne) ClearMemberships() *TenantUserUpdateOne {
	tuuo.mutation.ClearMemberships()
	return tuuo
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (tuuo *TenantUserUpdateOne) RemoveMembershipIDs(ids ...int) *TenantUserUpdateOne {
	tuuo.mutation.RemoveMembershipIDs(ids...)
	return tuuo
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (tuuo *TenantUserUpdateOne) RemoveMemberships(m ...*Membership) *TenantUserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuuo.RemoveMembershipIDs(ids...)
}

// Where appends a list predicates to the TenantUserUpdate builder.
func (tuuo *TenantUserUpdateOne) Where(ps ...predicate.TenantUser) *TenantUserUpdateOne {
	tuuo.mutation.Where(ps...)
	return tuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TenantUserUpdateOne) Select(field string, fields ...string) *TenantUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TenantUser entity.
func (tuuo *TenantUserUpdateOne) Save(ctx context.Context) (*TenantUser, error) {
	return withHooks(ctx, tuuo.sqlSave, tuuo.mutation, tuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TenantUserUpdateOne) SaveX(ctx context.Context) *TenantUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TenantUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TenantUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuuo *TenantUserUpdateOne) check() error {
	if tuuo.mutation.UserCleared() && len(tuuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenantUser.user"`)
	}
	if tuuo.mutation.TenantCleared() && len(tuuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TenantUser.tenant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuuo *TenantUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUserUpdateOne {
	tuuo.modifiers = append(tuuo.modifiers, modifiers...)
	return tuuo
}

func (tuuo *TenantUserUpdateOne) sqlSave(ctx context.Context) (_node *TenantUser, err error) {
	if err := tuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenantuser.Table, tenantuser.Columns, sqlgraph.NewFieldSpec(tenantuser.FieldID, field.TypeInt))
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TenantUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenantuser.FieldID)
		for _, f := range fields {
			if !tenantuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenantuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.IsOwner(); ok {
		_spec.SetField(tenantuser.FieldIsOwner, field.TypeBool, value)
	}
	if value, ok := tuuo.mutation.IsActive(); ok {
		_spec.SetField(tenantuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuuo.mutation.LastLoginTenant(); ok {
		_spec.SetField(tenantuser.FieldLastLoginTenant, field.TypeBool, value)
	}
	if value, ok := tuuo.mutation.LastLoginAt(); ok {
		_spec.SetField(tenantuser.FieldLastLoginAt, field.TypeTime, value)
	}
	if tuuo.mutation.LastLoginAtCleared() {
		_spec.ClearField(tenantuser.FieldLastLoginAt, field.TypeTime)
	}
	if tuuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !tuuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenantuser.RolesTable,
			Columns: tenantuser.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenantrole.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !tuuo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenantuser.MembershipsTable,
			Columns: []string{tenantuser.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuuo.modifiers...)
	_node = &TenantUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenantuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuuo.mutation.done = true
	return _node, nil
}
