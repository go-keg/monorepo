package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70-dev

import (
	"context"

	"github.com/go-keg/monorepo/internal/data/crm/ent"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contact"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contract"
	"github.com/go-keg/monorepo/internal/data/crm/ent/followup"
	"github.com/go-keg/monorepo/internal/data/crm/ent/payment"
)

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input ent.CreateCustomerInput) (*ent.Customer, error) {
	return r.client.Customer.Create().
		SetInput(input).
		SetCreatedBy(r.TenantUserID(ctx)).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// UpdateCustomer is the resolver for the updateCustomer field.
func (r *mutationResolver) UpdateCustomer(ctx context.Context, id int, input ent.UpdateCustomerInput) (*ent.Customer, error) {
	return r.client.Customer.UpdateOneID(id).
		SetInput(input).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// CreateContact is the resolver for the createContact field.
func (r *mutationResolver) CreateContact(ctx context.Context, input ent.CreateContactInput) (*ent.Contact, error) {
	return r.client.Contact.Create().
		SetInput(input).
		SetCreatedBy(r.TenantUserID(ctx)).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// UpdateContact is the resolver for the updateContact field.
func (r *mutationResolver) UpdateContact(ctx context.Context, id int, input ent.UpdateContactInput) (*ent.Contact, error) {
	return r.client.Contact.UpdateOneID(id).
		SetInput(input).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// DeleteContact is the resolver for the deleteContact field.
func (r *mutationResolver) DeleteContact(ctx context.Context, id int) (bool, error) {
	err := r.client.Contact.DeleteOneID(id).Where(contact.CreatedBy(r.TenantUserID(ctx))).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateContract is the resolver for the createContract field.
func (r *mutationResolver) CreateContract(ctx context.Context, input ent.CreateContractInput) (*ent.Contract, error) {
	return r.client.Contract.Create().
		SetInput(input).
		SetCreatedBy(r.TenantUserID(ctx)).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// UpdateContract is the resolver for the updateContract field.
func (r *mutationResolver) UpdateContract(ctx context.Context, id int, input ent.UpdateContractInput) (*ent.Contract, error) {
	return r.client.Contract.UpdateOneID(id).
		SetInput(input).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// DeleteContract is the resolver for the deleteContract field.
func (r *mutationResolver) DeleteContract(ctx context.Context, id int) (bool, error) {
	err := r.client.Contract.DeleteOneID(id).Where(contract.CreatedBy(r.TenantUserID(ctx))).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateFollowUp is the resolver for the createFollowUp field.
func (r *mutationResolver) CreateFollowUp(ctx context.Context, input ent.CreateFollowUpInput) (*ent.FollowUp, error) {
	return r.client.FollowUp.Create().
		SetInput(input).
		SetCreatedBy(r.TenantUserID(ctx)).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// UpdateFollowUp is the resolver for the updateFollowUp field.
func (r *mutationResolver) UpdateFollowUp(ctx context.Context, id int, input ent.UpdateFollowUpInput) (*ent.FollowUp, error) {
	return r.client.FollowUp.UpdateOneID(id).
		SetInput(input).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// DeleteFollowUp is the resolver for the deleteFollowUp field.
func (r *mutationResolver) DeleteFollowUp(ctx context.Context, id int) (bool, error) {
	err := r.client.FollowUp.DeleteOneID(id).Where(followup.CreatedBy(r.TenantUserID(ctx))).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, input ent.CreatePaymentInput) (*ent.Payment, error) {
	return r.client.Payment.Create().
		SetInput(input).
		SetCreatedBy(r.TenantUserID(ctx)).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// UpdatePayment is the resolver for the updatePayment field.
func (r *mutationResolver) UpdatePayment(ctx context.Context, id int, input ent.UpdatePaymentInput) (*ent.Payment, error) {
	return r.client.Payment.UpdateOneID(id).
		SetInput(input).
		SetUpdatedBy(r.TenantUserID(ctx)).
		Save(ctx)
}

// DeletePayment is the resolver for the deletePayment field.
func (r *mutationResolver) DeletePayment(ctx context.Context, id int) (bool, error) {
	err := r.client.Payment.DeleteOneID(id).Where(payment.CreatedBy(r.TenantUserID(ctx))).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
