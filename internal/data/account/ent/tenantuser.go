// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenant"
	"github.com/go-keg/monorepo/internal/data/account/ent/tenantuser"
	"github.com/go-keg/monorepo/internal/data/account/ent/user"
)

// TenantUser is the model entity for the TenantUser schema.
type TenantUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID int `json:"tenant_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// IsOwner holds the value of the "is_owner" field.
	IsOwner bool `json:"is_owner,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// 是否为最后登录的租户
	LastLoginTenant bool `json:"last_login_tenant,omitempty"`
	// 最后登录时间
	LastLoginAt time.Time `json:"last_login_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantUserQuery when eager-loading is set.
	Edges        TenantUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenantUserEdges holds the relations/edges for other nodes in the graph.
type TenantUserEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*TenantRole `json:"roles,omitempty"`
	// Memberships holds the value of the memberships edge.
	Memberships []*Membership `json:"memberships,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedRoles       map[string][]*TenantRole
	namedMemberships map[string][]*Membership
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TenantUserEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e TenantUserEdges) RolesOrErr() ([]*TenantRole, error) {
	if e.loadedTypes[2] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e TenantUserEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[3] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TenantUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenantuser.FieldIsOwner, tenantuser.FieldIsActive, tenantuser.FieldLastLoginTenant:
			values[i] = new(sql.NullBool)
		case tenantuser.FieldID, tenantuser.FieldTenantID, tenantuser.FieldUserID:
			values[i] = new(sql.NullInt64)
		case tenantuser.FieldLastLoginAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TenantUser fields.
func (tu *TenantUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenantuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tu.ID = int(value.Int64)
		case tenantuser.FieldTenantID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				tu.TenantID = int(value.Int64)
			}
		case tenantuser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				tu.UserID = int(value.Int64)
			}
		case tenantuser.FieldIsOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_owner", values[i])
			} else if value.Valid {
				tu.IsOwner = value.Bool
			}
		case tenantuser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				tu.IsActive = value.Bool
			}
		case tenantuser.FieldLastLoginTenant:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_tenant", values[i])
			} else if value.Valid {
				tu.LastLoginTenant = value.Bool
			}
		case tenantuser.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				tu.LastLoginAt = value.Time
			}
		default:
			tu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TenantUser.
// This includes values selected through modifiers, order, etc.
func (tu *TenantUser) Value(name string) (ent.Value, error) {
	return tu.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the TenantUser entity.
func (tu *TenantUser) QueryUser() *UserQuery {
	return NewTenantUserClient(tu.config).QueryUser(tu)
}

// QueryTenant queries the "tenant" edge of the TenantUser entity.
func (tu *TenantUser) QueryTenant() *TenantQuery {
	return NewTenantUserClient(tu.config).QueryTenant(tu)
}

// QueryRoles queries the "roles" edge of the TenantUser entity.
func (tu *TenantUser) QueryRoles() *TenantRoleQuery {
	return NewTenantUserClient(tu.config).QueryRoles(tu)
}

// QueryMemberships queries the "memberships" edge of the TenantUser entity.
func (tu *TenantUser) QueryMemberships() *MembershipQuery {
	return NewTenantUserClient(tu.config).QueryMemberships(tu)
}

// Update returns a builder for updating this TenantUser.
// Note that you need to call TenantUser.Unwrap() before calling this method if this TenantUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TenantUser) Update() *TenantUserUpdateOne {
	return NewTenantUserClient(tu.config).UpdateOne(tu)
}

// Unwrap unwraps the TenantUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TenantUser) Unwrap() *TenantUser {
	_tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("ent: TenantUser is not a transactional entity")
	}
	tu.config.driver = _tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TenantUser) String() string {
	var builder strings.Builder
	builder.WriteString("TenantUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tu.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", tu.TenantID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", tu.UserID))
	builder.WriteString(", ")
	builder.WriteString("is_owner=")
	builder.WriteString(fmt.Sprintf("%v", tu.IsOwner))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", tu.IsActive))
	builder.WriteString(", ")
	builder.WriteString("last_login_tenant=")
	builder.WriteString(fmt.Sprintf("%v", tu.LastLoginTenant))
	builder.WriteString(", ")
	builder.WriteString("last_login_at=")
	builder.WriteString(tu.LastLoginAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tu *TenantUser) NamedRoles(name string) ([]*TenantRole, error) {
	if tu.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tu.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tu *TenantUser) appendNamedRoles(name string, edges ...*TenantRole) {
	if tu.Edges.namedRoles == nil {
		tu.Edges.namedRoles = make(map[string][]*TenantRole)
	}
	if len(edges) == 0 {
		tu.Edges.namedRoles[name] = []*TenantRole{}
	} else {
		tu.Edges.namedRoles[name] = append(tu.Edges.namedRoles[name], edges...)
	}
}

// NamedMemberships returns the Memberships named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tu *TenantUser) NamedMemberships(name string) ([]*Membership, error) {
	if tu.Edges.namedMemberships == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tu.Edges.namedMemberships[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tu *TenantUser) appendNamedMemberships(name string, edges ...*Membership) {
	if tu.Edges.namedMemberships == nil {
		tu.Edges.namedMemberships = make(map[string][]*Membership)
	}
	if len(edges) == 0 {
		tu.Edges.namedMemberships[name] = []*Membership{}
	} else {
		tu.Edges.namedMemberships[name] = append(tu.Edges.namedMemberships[name], edges...)
	}
}

// TenantUsers is a parsable slice of TenantUser.
type TenantUsers []*TenantUser
