// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-keg/monorepo/internal/app/account/biz"
	"github.com/go-keg/monorepo/internal/app/account/conf"
	"github.com/go-keg/monorepo/internal/app/account/data"
	"github.com/go-keg/monorepo/internal/app/account/job"
	"github.com/go-keg/monorepo/internal/app/account/schedule"
	"github.com/go-keg/monorepo/internal/app/account/server"
	"github.com/go-keg/monorepo/internal/app/account/service/graphql"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "github.com/go-keg/monorepo/internal/data/account/ent/runtime"
)

// Injectors from wire.go:

func initApp(logger log.Logger, config *conf.Config) (*kratos.App, func(), error) {
	client, err := data.NewEntClient(config)
	if err != nil {
		return nil, nil, err
	}
	database, err := data.NewEntDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	userUseCase := biz.NewUserUseCase(config)
	userRepo := data.NewUserRepo(client)
	oauth2Config := conf.NewGoogleOAuthConfig(config)
	oAuthUseCase := biz.NewOAuthUseCase(oauth2Config)
	resolver := graphql.NewResolver(logger, database, client, userUseCase, userRepo, oAuthUseCase)
	directiveRoot := graphql.NewDirectiveRoot(userRepo)
	executableSchema := graphql.NewSchema(resolver, directiveRoot)
	httpServer := server.NewHTTPServer(logger, config, client, executableSchema, oauth2Config, oAuthUseCase, userRepo, userUseCase)
	kafkaConsumer, err := job.NewKafkaConsumer(config, logger)
	if err != nil {
		return nil, nil, err
	}
	jobJob := job.NewJob(logger, client, kafkaConsumer)
	daily := schedule.NewDaily(client)
	scheduleSchedule := schedule.NewSchedule(logger, client, daily)
	app := newApp(logger, httpServer, jobJob, scheduleSchedule)
	return app, func() {
	}, nil
}
