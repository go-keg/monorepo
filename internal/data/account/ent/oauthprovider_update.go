// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/account/ent/oauthprovider"
	"github.com/go-keg/monorepo/internal/data/account/ent/predicate"
)

// OAuthProviderUpdate is the builder for updating OAuthProvider entities.
type OAuthProviderUpdate struct {
	config
	hooks     []Hook
	mutation  *OAuthProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OAuthProviderUpdate builder.
func (opu *OAuthProviderUpdate) Where(ps ...predicate.OAuthProvider) *OAuthProviderUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetProvider sets the "provider" field.
func (opu *OAuthProviderUpdate) SetProvider(s string) *OAuthProviderUpdate {
	opu.mutation.SetProvider(s)
	return opu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableProvider(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetProvider(*s)
	}
	return opu
}

// SetName sets the "name" field.
func (opu *OAuthProviderUpdate) SetName(s string) *OAuthProviderUpdate {
	opu.mutation.SetName(s)
	return opu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableName(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetName(*s)
	}
	return opu
}

// SetClientID sets the "client_id" field.
func (opu *OAuthProviderUpdate) SetClientID(s string) *OAuthProviderUpdate {
	opu.mutation.SetClientID(s)
	return opu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableClientID(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetClientID(*s)
	}
	return opu
}

// SetClientSecret sets the "client_secret" field.
func (opu *OAuthProviderUpdate) SetClientSecret(s string) *OAuthProviderUpdate {
	opu.mutation.SetClientSecret(s)
	return opu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableClientSecret(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetClientSecret(*s)
	}
	return opu
}

// SetAuthURL sets the "auth_url" field.
func (opu *OAuthProviderUpdate) SetAuthURL(s string) *OAuthProviderUpdate {
	opu.mutation.SetAuthURL(s)
	return opu
}

// SetNillableAuthURL sets the "auth_url" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableAuthURL(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetAuthURL(*s)
	}
	return opu
}

// SetTokenURL sets the "token_url" field.
func (opu *OAuthProviderUpdate) SetTokenURL(s string) *OAuthProviderUpdate {
	opu.mutation.SetTokenURL(s)
	return opu
}

// SetNillableTokenURL sets the "token_url" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableTokenURL(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetTokenURL(*s)
	}
	return opu
}

// SetUserInfoURL sets the "user_info_url" field.
func (opu *OAuthProviderUpdate) SetUserInfoURL(s string) *OAuthProviderUpdate {
	opu.mutation.SetUserInfoURL(s)
	return opu
}

// SetNillableUserInfoURL sets the "user_info_url" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableUserInfoURL(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetUserInfoURL(*s)
	}
	return opu
}

// SetRedirectURI sets the "redirect_uri" field.
func (opu *OAuthProviderUpdate) SetRedirectURI(s string) *OAuthProviderUpdate {
	opu.mutation.SetRedirectURI(s)
	return opu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableRedirectURI(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetRedirectURI(*s)
	}
	return opu
}

// SetScopes sets the "scopes" field.
func (opu *OAuthProviderUpdate) SetScopes(s string) *OAuthProviderUpdate {
	opu.mutation.SetScopes(s)
	return opu
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableScopes(s *string) *OAuthProviderUpdate {
	if s != nil {
		opu.SetScopes(*s)
	}
	return opu
}

// ClearScopes clears the value of the "scopes" field.
func (opu *OAuthProviderUpdate) ClearScopes() *OAuthProviderUpdate {
	opu.mutation.ClearScopes()
	return opu
}

// SetEnabled sets the "enabled" field.
func (opu *OAuthProviderUpdate) SetEnabled(b bool) *OAuthProviderUpdate {
	opu.mutation.SetEnabled(b)
	return opu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (opu *OAuthProviderUpdate) SetNillableEnabled(b *bool) *OAuthProviderUpdate {
	if b != nil {
		opu.SetEnabled(*b)
	}
	return opu
}

// Mutation returns the OAuthProviderMutation object of the builder.
func (opu *OAuthProviderUpdate) Mutation() *OAuthProviderMutation {
	return opu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OAuthProviderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, opu.sqlSave, opu.mutation, opu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OAuthProviderUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OAuthProviderUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OAuthProviderUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opu *OAuthProviderUpdate) check() error {
	if v, ok := opu.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.name": %w`, err)}
		}
	}
	if v, ok := opu.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.client_id": %w`, err)}
		}
	}
	if v, ok := opu.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := opu.mutation.AuthURL(); ok {
		if err := oauthprovider.AuthURLValidator(v); err != nil {
			return &ValidationError{Name: "auth_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.auth_url": %w`, err)}
		}
	}
	if v, ok := opu.mutation.TokenURL(); ok {
		if err := oauthprovider.TokenURLValidator(v); err != nil {
			return &ValidationError{Name: "token_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.token_url": %w`, err)}
		}
	}
	if v, ok := opu.mutation.UserInfoURL(); ok {
		if err := oauthprovider.UserInfoURLValidator(v); err != nil {
			return &ValidationError{Name: "user_info_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.user_info_url": %w`, err)}
		}
	}
	if v, ok := opu.mutation.RedirectURI(); ok {
		if err := oauthprovider.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.redirect_uri": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OAuthProviderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthProviderUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OAuthProviderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := opu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthprovider.Table, oauthprovider.Columns, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeInt))
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.Provider(); ok {
		_spec.SetField(oauthprovider.FieldProvider, field.TypeString, value)
	}
	if value, ok := opu.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
	}
	if value, ok := opu.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := opu.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := opu.mutation.AuthURL(); ok {
		_spec.SetField(oauthprovider.FieldAuthURL, field.TypeString, value)
	}
	if value, ok := opu.mutation.TokenURL(); ok {
		_spec.SetField(oauthprovider.FieldTokenURL, field.TypeString, value)
	}
	if value, ok := opu.mutation.UserInfoURL(); ok {
		_spec.SetField(oauthprovider.FieldUserInfoURL, field.TypeString, value)
	}
	if value, ok := opu.mutation.RedirectURI(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := opu.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeString, value)
	}
	if opu.mutation.ScopesCleared() {
		_spec.ClearField(oauthprovider.FieldScopes, field.TypeString)
	}
	if value, ok := opu.mutation.Enabled(); ok {
		_spec.SetField(oauthprovider.FieldEnabled, field.TypeBool, value)
	}
	_spec.AddModifiers(opu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	opu.mutation.done = true
	return n, nil
}

// OAuthProviderUpdateOne is the builder for updating a single OAuthProvider entity.
type OAuthProviderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OAuthProviderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetProvider sets the "provider" field.
func (opuo *OAuthProviderUpdateOne) SetProvider(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetProvider(s)
	return opuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableProvider(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetProvider(*s)
	}
	return opuo
}

// SetName sets the "name" field.
func (opuo *OAuthProviderUpdateOne) SetName(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetName(s)
	return opuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableName(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetName(*s)
	}
	return opuo
}

// SetClientID sets the "client_id" field.
func (opuo *OAuthProviderUpdateOne) SetClientID(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetClientID(s)
	return opuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableClientID(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetClientID(*s)
	}
	return opuo
}

// SetClientSecret sets the "client_secret" field.
func (opuo *OAuthProviderUpdateOne) SetClientSecret(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetClientSecret(s)
	return opuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableClientSecret(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetClientSecret(*s)
	}
	return opuo
}

// SetAuthURL sets the "auth_url" field.
func (opuo *OAuthProviderUpdateOne) SetAuthURL(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetAuthURL(s)
	return opuo
}

// SetNillableAuthURL sets the "auth_url" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableAuthURL(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetAuthURL(*s)
	}
	return opuo
}

// SetTokenURL sets the "token_url" field.
func (opuo *OAuthProviderUpdateOne) SetTokenURL(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetTokenURL(s)
	return opuo
}

// SetNillableTokenURL sets the "token_url" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableTokenURL(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetTokenURL(*s)
	}
	return opuo
}

// SetUserInfoURL sets the "user_info_url" field.
func (opuo *OAuthProviderUpdateOne) SetUserInfoURL(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetUserInfoURL(s)
	return opuo
}

// SetNillableUserInfoURL sets the "user_info_url" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableUserInfoURL(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetUserInfoURL(*s)
	}
	return opuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (opuo *OAuthProviderUpdateOne) SetRedirectURI(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetRedirectURI(s)
	return opuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableRedirectURI(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetRedirectURI(*s)
	}
	return opuo
}

// SetScopes sets the "scopes" field.
func (opuo *OAuthProviderUpdateOne) SetScopes(s string) *OAuthProviderUpdateOne {
	opuo.mutation.SetScopes(s)
	return opuo
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableScopes(s *string) *OAuthProviderUpdateOne {
	if s != nil {
		opuo.SetScopes(*s)
	}
	return opuo
}

// ClearScopes clears the value of the "scopes" field.
func (opuo *OAuthProviderUpdateOne) ClearScopes() *OAuthProviderUpdateOne {
	opuo.mutation.ClearScopes()
	return opuo
}

// SetEnabled sets the "enabled" field.
func (opuo *OAuthProviderUpdateOne) SetEnabled(b bool) *OAuthProviderUpdateOne {
	opuo.mutation.SetEnabled(b)
	return opuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (opuo *OAuthProviderUpdateOne) SetNillableEnabled(b *bool) *OAuthProviderUpdateOne {
	if b != nil {
		opuo.SetEnabled(*b)
	}
	return opuo
}

// Mutation returns the OAuthProviderMutation object of the builder.
func (opuo *OAuthProviderUpdateOne) Mutation() *OAuthProviderMutation {
	return opuo.mutation
}

// Where appends a list predicates to the OAuthProviderUpdate builder.
func (opuo *OAuthProviderUpdateOne) Where(ps ...predicate.OAuthProvider) *OAuthProviderUpdateOne {
	opuo.mutation.Where(ps...)
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OAuthProviderUpdateOne) Select(field string, fields ...string) *OAuthProviderUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OAuthProvider entity.
func (opuo *OAuthProviderUpdateOne) Save(ctx context.Context) (*OAuthProvider, error) {
	return withHooks(ctx, opuo.sqlSave, opuo.mutation, opuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OAuthProviderUpdateOne) SaveX(ctx context.Context) *OAuthProvider {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OAuthProviderUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OAuthProviderUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OAuthProviderUpdateOne) check() error {
	if v, ok := opuo.mutation.Name(); ok {
		if err := oauthprovider.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.name": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.ClientID(); ok {
		if err := oauthprovider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.client_id": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.ClientSecret(); ok {
		if err := oauthprovider.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.client_secret": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.AuthURL(); ok {
		if err := oauthprovider.AuthURLValidator(v); err != nil {
			return &ValidationError{Name: "auth_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.auth_url": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.TokenURL(); ok {
		if err := oauthprovider.TokenURLValidator(v); err != nil {
			return &ValidationError{Name: "token_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.token_url": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.UserInfoURL(); ok {
		if err := oauthprovider.UserInfoURLValidator(v); err != nil {
			return &ValidationError{Name: "user_info_url", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.user_info_url": %w`, err)}
		}
	}
	if v, ok := opuo.mutation.RedirectURI(); ok {
		if err := oauthprovider.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OAuthProvider.redirect_uri": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OAuthProviderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OAuthProviderUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OAuthProviderUpdateOne) sqlSave(ctx context.Context) (_node *OAuthProvider, err error) {
	if err := opuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oauthprovider.Table, oauthprovider.Columns, sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeInt))
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OAuthProvider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthprovider.FieldID)
		for _, f := range fields {
			if !oauthprovider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthprovider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.Provider(); ok {
		_spec.SetField(oauthprovider.FieldProvider, field.TypeString, value)
	}
	if value, ok := opuo.mutation.Name(); ok {
		_spec.SetField(oauthprovider.FieldName, field.TypeString, value)
	}
	if value, ok := opuo.mutation.ClientID(); ok {
		_spec.SetField(oauthprovider.FieldClientID, field.TypeString, value)
	}
	if value, ok := opuo.mutation.ClientSecret(); ok {
		_spec.SetField(oauthprovider.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := opuo.mutation.AuthURL(); ok {
		_spec.SetField(oauthprovider.FieldAuthURL, field.TypeString, value)
	}
	if value, ok := opuo.mutation.TokenURL(); ok {
		_spec.SetField(oauthprovider.FieldTokenURL, field.TypeString, value)
	}
	if value, ok := opuo.mutation.UserInfoURL(); ok {
		_spec.SetField(oauthprovider.FieldUserInfoURL, field.TypeString, value)
	}
	if value, ok := opuo.mutation.RedirectURI(); ok {
		_spec.SetField(oauthprovider.FieldRedirectURI, field.TypeString, value)
	}
	if value, ok := opuo.mutation.Scopes(); ok {
		_spec.SetField(oauthprovider.FieldScopes, field.TypeString, value)
	}
	if opuo.mutation.ScopesCleared() {
		_spec.ClearField(oauthprovider.FieldScopes, field.TypeString)
	}
	if value, ok := opuo.mutation.Enabled(); ok {
		_spec.SetField(oauthprovider.FieldEnabled, field.TypeBool, value)
	}
	_spec.AddModifiers(opuo.modifiers...)
	_node = &OAuthProvider{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthprovider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	opuo.mutation.done = true
	return _node, nil
}
