// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-keg/monorepo/internal/data/crm/ent/contact"
	"github.com/go-keg/monorepo/internal/data/crm/ent/customer"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContactCreate) SetCreatedAt(t time.Time) *ContactCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCreatedAt(t *time.Time) *ContactCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContactCreate) SetUpdatedAt(t time.Time) *ContactCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUpdatedAt(t *time.Time) *ContactCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreatedBy sets the "created_by" field.
func (cc *ContactCreate) SetCreatedBy(i int) *ContactCreate {
	cc.mutation.SetCreatedBy(i)
	return cc
}

// SetUpdatedBy sets the "updated_by" field.
func (cc *ContactCreate) SetUpdatedBy(i int) *ContactCreate {
	cc.mutation.SetUpdatedBy(i)
	return cc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUpdatedBy(i *int) *ContactCreate {
	if i != nil {
		cc.SetUpdatedBy(*i)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *ContactCreate) SetName(s string) *ContactCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetPosition sets the "position" field.
func (cc *ContactCreate) SetPosition(s string) *ContactCreate {
	cc.mutation.SetPosition(s)
	return cc
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (cc *ContactCreate) SetNillablePosition(s *string) *ContactCreate {
	if s != nil {
		cc.SetPosition(*s)
	}
	return cc
}

// SetPhone sets the "phone" field.
func (cc *ContactCreate) SetPhone(s string) *ContactCreate {
	cc.mutation.SetPhone(s)
	return cc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (cc *ContactCreate) SetNillablePhone(s *string) *ContactCreate {
	if s != nil {
		cc.SetPhone(*s)
	}
	return cc
}

// SetEmail sets the "email" field.
func (cc *ContactCreate) SetEmail(s string) *ContactCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cc *ContactCreate) SetNillableEmail(s *string) *ContactCreate {
	if s != nil {
		cc.SetEmail(*s)
	}
	return cc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (cc *ContactCreate) SetCustomerID(id int) *ContactCreate {
	cc.mutation.SetCustomerID(id)
	return cc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (cc *ContactCreate) SetCustomer(c *Customer) *ContactCreate {
	return cc.SetCustomerID(c.ID)
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContactCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := contact.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := contact.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "Contact.created_by"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Contact.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := contact.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Contact.name": %w`, err)}
		}
	}
	if len(cc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Contact.customer"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contact.Table, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(contact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CreatedBy(); ok {
		_spec.SetField(contact.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := cc.mutation.UpdatedBy(); ok {
		_spec.SetField(contact.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(contact.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Position(); ok {
		_spec.SetField(contact.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := cc.mutation.Phone(); ok {
		_spec.SetField(contact.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if nodes := cc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.CustomerTable,
			Columns: []string{contact.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_contacts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *ContactCreate) OnConflict(opts ...sql.ConflictOption) *ContactUpsertOne {
	cc.conflict = opts
	return &ContactUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ContactCreate) OnConflictColumns(columns ...string) *ContactUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertOne{
		create: cc,
	}
}

type (
	// ContactUpsertOne is the builder for "upsert"-ing
	//  one Contact node.
	ContactUpsertOne struct {
		create *ContactCreate
	}

	// ContactUpsert is the "OnConflict" setter.
	ContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsert) SetUpdatedAt(v time.Time) *ContactUpsert {
	u.Set(contact.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUpdatedAt() *ContactUpsert {
	u.SetExcluded(contact.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ContactUpsert) ClearUpdatedAt() *ContactUpsert {
	u.SetNull(contact.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ContactUpsert) SetUpdatedBy(v int) *ContactUpsert {
	u.Set(contact.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ContactUpsert) UpdateUpdatedBy() *ContactUpsert {
	u.SetExcluded(contact.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ContactUpsert) AddUpdatedBy(v int) *ContactUpsert {
	u.Add(contact.FieldUpdatedBy, v)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ContactUpsert) ClearUpdatedBy() *ContactUpsert {
	u.SetNull(contact.FieldUpdatedBy)
	return u
}

// SetName sets the "name" field.
func (u *ContactUpsert) SetName(v string) *ContactUpsert {
	u.Set(contact.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContactUpsert) UpdateName() *ContactUpsert {
	u.SetExcluded(contact.FieldName)
	return u
}

// SetPosition sets the "position" field.
func (u *ContactUpsert) SetPosition(v string) *ContactUpsert {
	u.Set(contact.FieldPosition, v)
	return u
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *ContactUpsert) UpdatePosition() *ContactUpsert {
	u.SetExcluded(contact.FieldPosition)
	return u
}

// ClearPosition clears the value of the "position" field.
func (u *ContactUpsert) ClearPosition() *ContactUpsert {
	u.SetNull(contact.FieldPosition)
	return u
}

// SetPhone sets the "phone" field.
func (u *ContactUpsert) SetPhone(v string) *ContactUpsert {
	u.Set(contact.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *ContactUpsert) UpdatePhone() *ContactUpsert {
	u.SetExcluded(contact.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *ContactUpsert) ClearPhone() *ContactUpsert {
	u.SetNull(contact.FieldPhone)
	return u
}

// SetEmail sets the "email" field.
func (u *ContactUpsert) SetEmail(v string) *ContactUpsert {
	u.Set(contact.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ContactUpsert) UpdateEmail() *ContactUpsert {
	u.SetExcluded(contact.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *ContactUpsert) ClearEmail() *ContactUpsert {
	u.SetNull(contact.FieldEmail)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContactUpsertOne) UpdateNewValues() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(contact.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(contact.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContactUpsertOne) Ignore() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertOne) DoNothing() *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreate.OnConflict
// documentation for more info.
func (u *ContactUpsertOne) Update(set func(*ContactUpsert)) *ContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsertOne) SetUpdatedAt(v time.Time) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUpdatedAt() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ContactUpsertOne) ClearUpdatedAt() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ContactUpsertOne) SetUpdatedBy(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ContactUpsertOne) AddUpdatedBy(v int) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateUpdatedBy() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ContactUpsertOne) ClearUpdatedBy() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetName sets the "name" field.
func (u *ContactUpsertOne) SetName(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateName() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateName()
	})
}

// SetPosition sets the "position" field.
func (u *ContactUpsertOne) SetPosition(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdatePosition() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdatePosition()
	})
}

// ClearPosition clears the value of the "position" field.
func (u *ContactUpsertOne) ClearPosition() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearPosition()
	})
}

// SetPhone sets the "phone" field.
func (u *ContactUpsertOne) SetPhone(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdatePhone() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *ContactUpsertOne) ClearPhone() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearPhone()
	})
}

// SetEmail sets the "email" field.
func (u *ContactUpsertOne) SetEmail(v string) *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ContactUpsertOne) UpdateEmail() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ContactUpsertOne) ClearEmail() *ContactUpsertOne {
	return u.Update(func(s *ContactUpsert) {
		s.ClearEmail()
	})
}

// Exec executes the query.
func (u *ContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContactUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContactUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	err      error
	builders []*ContactCreate
	conflict []sql.ConflictOption
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Contact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContactUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContactUpsertBulk {
	ccb.conflict = opts
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ContactCreateBulk) OnConflictColumns(columns ...string) *ContactUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ContactUpsertBulk{
		create: ccb,
	}
}

// ContactUpsertBulk is the builder for "upsert"-ing
// a bulk of Contact nodes.
type ContactUpsertBulk struct {
	create *ContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContactUpsertBulk) UpdateNewValues() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(contact.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(contact.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Contact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContactUpsertBulk) Ignore() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContactUpsertBulk) DoNothing() *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContactCreateBulk.OnConflict
// documentation for more info.
func (u *ContactUpsertBulk) Update(set func(*ContactUpsert)) *ContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContactUpsertBulk) SetUpdatedAt(v time.Time) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUpdatedAt() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *ContactUpsertBulk) ClearUpdatedAt() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ContactUpsertBulk) SetUpdatedBy(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ContactUpsertBulk) AddUpdatedBy(v int) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateUpdatedBy() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *ContactUpsertBulk) ClearUpdatedBy() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetName sets the "name" field.
func (u *ContactUpsertBulk) SetName(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateName() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateName()
	})
}

// SetPosition sets the "position" field.
func (u *ContactUpsertBulk) SetPosition(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdatePosition() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdatePosition()
	})
}

// ClearPosition clears the value of the "position" field.
func (u *ContactUpsertBulk) ClearPosition() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearPosition()
	})
}

// SetPhone sets the "phone" field.
func (u *ContactUpsertBulk) SetPhone(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdatePhone() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *ContactUpsertBulk) ClearPhone() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearPhone()
	})
}

// SetEmail sets the "email" field.
func (u *ContactUpsertBulk) SetEmail(v string) *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *ContactUpsertBulk) UpdateEmail() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *ContactUpsertBulk) ClearEmail() *ContactUpsertBulk {
	return u.Update(func(s *ContactUpsert) {
		s.ClearEmail()
	})
}

// Exec executes the query.
func (u *ContactUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
