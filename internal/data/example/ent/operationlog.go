// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-keg/monorepo/internal/data/example/ent/operationlog"
	"github.com/go-keg/monorepo/internal/data/example/ent/user"
)

// 操作日志
type OperationLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 操作人
	UserID int `json:"user_id,omitempty"`
	// 操作类型
	Type string `json:"type,omitempty"`
	// 操作内容
	Content string `json:"content,omitempty"`
	// 元数据
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperationLogQuery when eager-loading is set.
	Edges        OperationLogEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OperationLogEdges holds the relations/edges for other nodes in the graph.
type OperationLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OperationLogEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperationLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operationlog.FieldMetadata:
			values[i] = new([]byte)
		case operationlog.FieldID, operationlog.FieldUserID:
			values[i] = new(sql.NullInt64)
		case operationlog.FieldType, operationlog.FieldContent:
			values[i] = new(sql.NullString)
		case operationlog.FieldCreatedAt, operationlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperationLog fields.
func (ol *OperationLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operationlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ol.ID = int(value.Int64)
		case operationlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ol.CreatedAt = value.Time
			}
		case operationlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ol.UpdatedAt = value.Time
			}
		case operationlog.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ol.UserID = int(value.Int64)
			}
		case operationlog.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ol.Type = value.String
			}
		case operationlog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				ol.Content = value.String
			}
		case operationlog.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ol.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OperationLog.
// This includes values selected through modifiers, order, etc.
func (ol *OperationLog) Value(name string) (ent.Value, error) {
	return ol.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the OperationLog entity.
func (ol *OperationLog) QueryUser() *UserQuery {
	return NewOperationLogClient(ol.config).QueryUser(ol)
}

// Update returns a builder for updating this OperationLog.
// Note that you need to call OperationLog.Unwrap() before calling this method if this OperationLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ol *OperationLog) Update() *OperationLogUpdateOne {
	return NewOperationLogClient(ol.config).UpdateOne(ol)
}

// Unwrap unwraps the OperationLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ol *OperationLog) Unwrap() *OperationLog {
	_tx, ok := ol.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperationLog is not a transactional entity")
	}
	ol.config.driver = _tx.drv
	return ol
}

// String implements the fmt.Stringer.
func (ol *OperationLog) String() string {
	var builder strings.Builder
	builder.WriteString("OperationLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ol.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ol.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ol.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ol.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ol.Type)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(ol.Content)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ol.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// OperationLogs is a parsable slice of OperationLog.
type OperationLogs []*OperationLog
